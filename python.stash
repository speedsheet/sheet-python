# <#>Python<> SpeedSheet
<b>What you need, faster.<>

Get answers to your Python questions fast.

<*>Use <b>Search<> (above) For Realtime Answers
Answers Get Right To The Point
Covers <b>Core Python 3<><>


<b>Follow us on Twitter:<>

<card><l https://twitter.com/_speedsheet>@_speedsheet<><>


<b>Feedback:<>

<card>Type '<c><b>feedback:<><>' into the search and then ENTER.<>

This is a work in progress. Feedback welcome.
Tell us what you liked, didn't like, and suggested improvements.
@
@ feedback:, twitter



## New For Movember 

<cb><table><col><l "/s/python?search=match-only">match Statement<><><col><l "/s/python?search=match-only">(Structural Pattern Matching)<><>
<col><l "/s/python?search=deque">deque<><><col><l "/s/python?search=deque">(Double Ended Queues)<><>
<col><l "/s/python?search=type+hint">Type Hints<><><><>



## New For October

New SpeedSheets!

Numpy:

The Numpy SpeedSheet is finally out! Check it out and let us know what you think.

<cb><l>/s/numpy<><>



## New for September

Got some small updates for September:

<cb><l "/s/python?search=bitwise">Bitwise Operators<>
<l "/s/python?search=literals-only">Python Literals<><>



## New for July

Got 2 brand new speedsheets for this month to help tame your http requests:

requests HTTP Library:

<cb><l>/s/requests<><>

aiohttp Asynchronous HTTP Library:

<cb><l>/s/aiohttp<><>


Python SpeedSheet Updates:

<cb><l "/s/python?search=timedelta">TimeDelta<>
<l "/s/python?search=reverse+format">Format Codes - Reverse Lookup<><>

Video Tutorials:

<cb><l "https://www.youtube.com/watch?v=JLMd7AJnzrc">ConfigParser Tutorial<><>



## New for June

Parallel Processing:

<cb><l "/s/python?search=ProcessPoolExecutor">ProcessPoolExecutor<>
<l "/s/python?search=ThreadPoolExecutor">ThreadPoolExecutor<>
<l "/s/python?search=concurrent.future&select=2gHW">Concurrent Futures<>
<l "/s/python?search=shared+value">Shared Value<><>

Asyncio / Event Loops

<cb><l "/s/python?search=asyncio&select=vQmp">async def / await<>
<l "/s/python?search=coroutine">Coroutines<>
<l "/s/python?search=event+loop">Event Loops<>
<l "/s/python?search=asyncio+futures">Futures<> / <l "/s/python?search=asyncio+task&select=HVy1">Tasks<><>


## New for May

Parallel Processing:

<cb><l "/s/python?search=thread()">Threads<>
<l "/s/python?search=process()">Processes<>
<l "/s/python?search=pipe()">Pipes<>
<l "/s/python?search=parallel+queue">Parallel Queues<>
<l "/s/python?search=lock()">Locks<>
<l "/s/python?search=Semaphore()">Semaphores<><>

Core Python:

<cb><l "/s/python?search=configparser">ConfigParser<>
<l "/s/python?search=csv">CSV<>
<l "/s/python?search=dataclass">Dataclasses<>
<l "/s/python?search=f-string">F-Strings<><>



## Search Tips

Find Something:
Enter terms for what you're looking for into <b>search<> above. Results will update in real time.

Identify Something:
Need to identify what a symbol is or does?
Try the '<b>Symbol Lookup<>' section, or search '<b>sym look<>'.



# Online Links



### Python Documents
<l>https://docs.python.org/3/<>



### Python Language Reference
<l>https://docs.python.org/3/reference/index.html<>



### Python Libraries
<l>https://docs.python.org/3/library/index.html<>



# The Python Philosophy

Enter from within the Python CLI:

<cb>import this<>


Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
@
@ Easter egg, import this



# Hello World
@
@ Examples



### Hello World

Create and run the following python script.


File Name:

<cb>hello.py<>

File Contents:

<cb>print("<v>Hello World!<>")<>

Run From The Command Line:

<cb>python3 hello.py<>



### Hello World - With Input

File Name:

<cb>hello2.py<>

File Contents:

<cb><v>name<> = input("Enter Name: ")

if not <v>name<>:
	<v>name<> = "World"

print("<v>hello <>" + <v>name<> + "<v>!<>")<>

Run From The Command Line:

<cb>python3 hello2.py <v>your_name_here<><>



### Hello World - With Command Line Arguments

This version takes one arguments and displays it as the name.


File Name:

<cb>hello2.py<>

File Contents:

<cb>from sys import argv		<#>#1<>

if len(argv) > 1:			<#>#2<>
	<v>name<> = argv[1]			<#>#3<>
else:
	<v>name<> = "World"			<#>#4<>

print("<v>hello <>" + <v>name<> + "<v>!<>")<>

Run From The Command Line:

<cb>python3 hello2.py <v>your_name_here<><>


\#1  <s>-<>  Importing argv allows the program to get arguments passed in from the command line.

\#2  <s>-<>  Check if any arguments were passed in.

\#3  <s>-<>  Take the first argument as the name.

\#4  <s>-<>  The default value for the name when none is given.
@
@ arguments, args, parameters, params



# Language Fundamentals



### Comments

<cb><#># This is a comment.<><>

Start the comment with a hash '#'.
Comments are ignored by the compiler.
@
@ #



### Comments - Multiline

There are no multiline comments in Python.
@
@ Multiline



### DocString

<cb><#>"""Python Docstring."""<><>

They are defined as a text between a set of 3 double quotes.
Place after the class or function definition.

See also: __doc__


Examples:

<cb>def <v>documented_function<>():
	<#>"""This docstring
	documents the function of this function
	"""<><>
@
@ code, documentation, docstring-only, docstr-only, doc-string-only, doc-str-only, """, double quotes, __doc__
 


### Escape Character

Escape Syntax		<c>\\<v>x<><>

Backslash ( \\ )		      <c>\\\\<>
Single Quote ( ' )		<c>\\'<>
Double Quote ( " )		<c>\\"<>

Newline				<c>\\n<>
Tab					<c>\\t<>

Null					<c>\\00<>


Example:

<cb>= "<v>\\"A quoted string.\\"<>"<>

<cb>= "<v>1st Line\\n2nd Line<>"<>
@
@ Newline, New Line, End of Line, Line Separator, \\n, \\\\, \\', \\", \\t, null, \\00, String
@ /n, //, /', /", /t, /00, single quote, double quote, backslash
@ whitespaces, white spaces, characters, tab, newline, nl, null



### Blocks, Indentation

Blocks are defined by indentation.

Code on the same indent level are in the same block.
Python will not allow mixed indentation


Example:

<cb><#># Outer block<>
print('Outer Block')

if True:

	<#># Inner Block<>
	print('    Inner Block')<>
@
@ Tabs, indenting



### Class Inheritance

Python supports Multiple Inheritance.
@
@ extend


### Interfaces

Not supported in Python.

Use abstract classes instead.
Or simply rely on duck typing.



### Indexes

0 Based.

Indexes are 0 based.
To get the first element, reference element 0.


Example:

<cb><v>first<> = <v>some_list<>[0]<>
@
@ indexing, base, zero, one, []



### Identifiers

( <v>letter<> | <v>_<> ) ( <v>letter<> | <v>digit<> | <v>_<> ) *


Case sensitive.
First letter must be an alphabet letter or underscore, not a digit.
All other letters can be alphabet letter, underscore or digit.


Examples:

<cb><v>a1<>
<v>item_2<>
<v>three_word_name<><>
@
@ Python names, variable names, module names, class names
@ alphabet



### Python Environment Variable

<cb>PYTHONPATH<>

Path to modules and packages.


Python checks <c>PYTHONPATH<> directories for modules and packages.
Python adds this to <c>sys.path<>.
@
@ PYTHONPATH, path, sys.path



### Passing Arguments - Pass By Assignment (Default)

Pass by Assignment

Python passes by assignment by default (same as pass by value).
Objects are passed by assigning the object reference.
@
@ args, arguments, assignment, reference, pass by value, parameters, params



### Passing Arguments - Options

Call Passing as list:

<cb>= <v>func_1<>(*<v>list_1<>)			<#>#1<><>

Call Passing as dict:

<cb>= <v>func_2<>(**<v>dict_1<>)			<#>#2<><>


Receive as list:

<cb>def <v>func_3<>(*args):			<#>#3<>
	<v>...<><>

Receive as dict:

<cb>def <v>func_4<>(**kwargs):		<#>#4<>
	<v>...<><>


\#1  <s>-<>   <c>list_1<> will be unpacked to function arguments in list order.

\#2  <s>-<>   <c>dict_1<> will be converted into their named arguments inside the function.

\#3  <s>-<>   Converts arguments to a list.

\#4  <s>-<>   Converts named arguments to a dict.
@
@ args, arguments, list, dict, Single Asterisk, Double Asterisks, parameters, params, *args, *kwargs



### Scope

Scope Levels

	Module
	Class
	Function
	Closure
	Generator Expression
	Comprehension

There is no block level scope


Example:

<cb><v>module_level_variable<> = "Module Scope"


class <v>SomeClass<>:
	def __init__(self):
		self.<v>class_level_variable<> = "Class Level"


def <v>SomeFunction<>():
	<v>function_level_variable<> = "Function Level"


<v>generator<> = (<v>generator_level_variable<>
		for <v>generator_level_variable<> in
		["Generator Level", "Generator Level"])


<v>comprehension<> = [<v>comprehension_level_variable<>
		for <v>comprehension_level_variable<> in
		["Comprehension Level", "Comprehension Level"]]<>
@
@ variables



### Statement - Multiline Statement

<cb><v>...<> \\
<v>...<><>

The '\\' at the line's end indicates line continues on next line.


Note:

Prefer using parenthesis '<c>( )<>', brackets '<c>[ ]<>', braces '<c>{ }<>' for multiline statements for clarity.


Example:

<cb>string_1 = "Part 1 and " + \\
		"part 2 and " + \\
		"part 3"<>
@
@ Split, Separate, Separator, Wrap, multiline statement, \\



### Statement - Statement Separator

<cb><v>statement<>;<>

Optional

Use a semicolon ';' to separate statements.
Allows multiple statements in one line.


Examples:

<cb>print("Optional command separator");

print("one"); print("two"); print("three");<>
@
@ Line Terminator, multi-statement, multistatement line, ;, semicolon



### Symbol Lookup

<c><#># A comment.<><>		    Programmer Comment

<c><v>command_1<>;<>			 Semicolon Statement Separator

<c>@<v>function_1<>()<>		   Decorated Function						<#># Ampersand '@'<>

<c>*args<>				  Arguments Passed as a Tuple (Array)			<#># Single Asterisk '*'<>
<c>**kwargs<>		 	Arguments Passed as a Key Value Dictionary	<#># Double Asterisks '**'<>

<c>*<v>value_1<><>		    	A Sublist Extracted from Some Sequence
<c>*_<>					    A Sublist Extracted from Some Sequence But Ignored
<c>_<>				  	A Value Extracted from a Sequence But Ignored

<c>self.<v>some_member<><>		    Class instance reference to internal member.	<#># <c>self.<><>

<c>'<v>A string<>'<>			 String
<c>"<v>A string<>"<>			 Also A String

<c><#>"""Doc comment."""<><>	   DocString

<c>"""<v>Multiline
String<>"""<><>			  A Multiline String

<c>'''<v>Multiline
String<>'''<>		 	A Multiline String


<c>_<v>name_1<><>				   Private Function or Variable					<#># Single Underscore '_'<>
<c>__<v>method_name<>__<>		 Magic Method / System Method				<#># Double Underscore, Both Ends '__'<>

<c>{}<>				 	Empty Dictionary
<c>{<v>key1<> : <v>value1<>, <v>...<>}<>	   Dictionary
<c>{<v>value1<>, <v>...<>}<>		  Set										<#># No Colon ':'<>

<c>[]<>					Empty List
<c>[<v>value1<>, <v>value2<>, <v>...<>]<>	List
<c>(<v>value1<>, <v>value2<>, <v>...<>)<>	Tuple

<c><v>a<> := <v>b<><>			    	Walrus Operator / Assignment Expression
@
@ Double Underscore, :=, underscore.



# Conventions Guidelines
@
@ Naming



### Convention - Module Names

<cb><v>short_name<><>

Use a short name for module file names. Use snake case if necessary.



### Convention - Class Names

<cb>class <v>ClassName1<>:<>

Use TitleCase, no underscore separator.



### Convention - Function Names

<cb>def <v>function_name_1<> <v>...<><>

Use snake case, all lower case letters, underscores between words.



### Convention - Private Names

<cb>_<v>private_name_1<> <v>...<><>

Lead with an underscore.


Examples:

<cb>def _<v>private_function_name_1<> <v>...<><>
@
@ _, underscores



### Convention - Variable Names

<cb><v>variable_name_1<>=<v>...<><>

Use snake case, all lower case letters, underscore separator between words.



### Convention - Constants

<cb><v>CONSTANT_NAME_1<>=<v>...<><>

Use upper snake case, all upper case letters, underscore separator between words.

Note: There is no mechanism in Python to enforce constants. They are normal variables.



### Convention - Magic Methods

<cb>__<v>magic_method_name<>__<>

Lead and end with a double underscore. All letters are lower case. Words are separated by underscores.



### Python - Version

<cb>python --version<>

<cb>python3 --version<>

Shows the current python version from the command line.
@
@ Get, command line, number, python3, --version



### REPL - Start

<cb>python3<>


Starts the REPL.
@
@ cli, run, python3



### REPL - Get Last Evaluated Expression

<cb>= _<>

<cb>print (_)<>

Underscore <c>'_'<> stores the result of the last evaluated expression.
@
@ cli, value, underscore, _



### REPL - Exit

<cb>Control + D<>

<cb>exit()<>


Press the keys <c>Control + D<> or type <c>exit()<> to quit.
@
@ End, Terminate, Stop, Quit, CLI, exit()



### Script - Run Program

<cb>python3 <v>python_file.py<><>

Run from the source root directory.
@
@ Start, Launch, python3



### Script - Run Module

<cb>python3 -m <v>package<>.<v>module_name<><>

Run from parent directory to the <c><v>package<><> directory.
<c><v>package<><> is the directory containing the module.
<c><v>module_name<><> is the python module file without the <c>.py<> extension.

Run from source root directory.
@
@ python3, -m, subdirectory, subfolder



# Unit Test - Command Line
@
@ command-line-only, commandline-only, python3, tests, testing, -m, unittest



### Unit Test - Run All

<cb>python3 -m unittest<>

Python will search for and run all tests in the current directory and subdirectories.



### Unit Test - Run Module

<cb>python3 -m unittest <v>module_name<><>

<cb>python3 -m unittest <v>package_name<>.<v>module_name<><>

Run from source root directory.
@
@ subfolder, subdirectory



### Unit Test - Run Test Class

<cb>python3 -m unittest <v>module_name<>.<v>TestClass<><>

<cb>python3 -m unittest <v>package_name<>.<v>module_name<>.<v>TestClass<><>

Run from source root directory.



### Unit Test - Run Test Method

<cb>python3 -m unittest <v>module_name<>.<v>TestClass<>.<v>test_method<><>

<cb>python3 -m unittest <v>package_name<>.<v>module_name<>.<v>TestClass<>.<v>test_method<><>

Run from source root directory.



# Distribution
@
@ Package, Dist



### Application Distribution - Egg - Create

Follow the following steps to create an egg file.

<b>Steps:<>

1)  Create the file <c>__main__.py<> to root directory.
2)  Add startup code to <c>__main__.py<>.
3)  Zip all python files into a single zip file.

Note: The root directory of the zip file must be the root directory of the python source files.
Do Not zip files into a directory in the zip file.
@
@ Deploy, __main__.py



### Application Distribution - Egg - Run

<cb>python3 <v>egg_file<>.egg<>

<cb>python3 <v>egg_file<>.zip<>
@
@ .egg, .zip



### Application Distribution - Wheel - Setup

Create <c>setup.py<> file.

Ensure <c>__init__.py<> in source root directory.


Example File:

<cb>from setuptools import setup, find_packages

setup(
	name='<v>package_name<>',  						<#># Required<>
	version='<v>2<>.<v>0<>.<v>1<>',  							<#># Required<>
	description='<v>package description here<>.',	<#># Required<>
	packages=find_packages(exclude=['contrib', 'docs', 'tests']),	<#># Required<>
)<>
@
@ setup.py, setuptools, find_packages, setup(), .whl



### Application Distribution - Wheel - Create

<cb>python3 setup.py sdist bdist_wheel<>

Run from project root directory.
Creates wheel distribution file in the<c>/dist<>.
@
@ setup.py, sdist, bdist_wheel, .whl



# PIP - Package Manager
Python's Package Manager.

Installs and manages libraries and their dependencies.

PIP = PIP Installs Packages
@
@ pip-only



### PIP - Installed Package Location

<cb><v>python_home_directory<>/lib/python3.<v>x<>/site-packages<>

The location of packages installed by PIP.
@
@ Directory, Library, GET



## PIP - Requirements File



### PIP - Requirements File - File Name

<cb>requirements.txt<>

Place in project root directory.


Note: The <c><v>requrements.txt<><> name is by convention only.
@
@ Library File, requirements.txt



### PIP - Requirements File - Sample File

<cb><#># This is a comment line.<>

<v>package_1_name<>					<#># Latest Version<>

<v>package_2<>==<v>1<>.<v>2<>.<v>3<>				<#># Specific Version<>

<v>package_3<>>=<v>1<>.<v>2<>.<v>3<>				<#># Specific Version or Higher<>

-r <v>other_requirements.txt<>		<#># Include packages from this file too.<><>
@
@ Example, Versioning, requirements.txt, ==, >=, !=, -r



## Commands



### PIP - Upgrade

<cb>pip install --upgrade pip<>

Upgrades PIP to the latest version.
@
@ Application, install --upgrade, update, --update



### PIP - Version

<cb>pip -V<>

or

<cb>pip --version<>
@
@ -v, --version



### PIP - Package - Install

<cb>pip install <v>package_name<><>

or

<cb>pip install <v>package_name<>==<v>1<>.<v>2<>.<v>3<><>
@
@ Library, version



### PIP - Package - Install From Wheel File

<cb>pip install <v>package_name<>.whl<>
@
@ Library, Package File, .whl



### PIP - Package - Install Using Proxy

<cb>pip install <v>package_name<> --proxy="<v>proxyserver.com<><>

<cb>pip install <v>package_name<> --proxy="https://<v>user<>:<v>password<>@<v>proxyserver.com<><>
@
@ Library, --proxy



### PIP - Package - Install, Force

<cb>pip install --force-reinstall <v>package_name<><>
@
@--force-reinstall



### PIP - Package - Upgrade

<cb>pip install --upgrade <v>package_name<><>
@
@ library, install, --upgrade, --update, update



### PIP - Package - Upgrade, Force

<cb>pip install --upgrade --force-reinstall <v>package_name<><>
@
@ library, install, --upgrade, --force-reinstall, --update, update



### PIP - Package - Uninstall

<cb>pip uninstall <v>package_name<><>
@
@ library, Remove



### PIP - Package - View Details

<cb>pip show <v>package_name<><>
@
@ show



### PIP - Packages - List

<cb>pip list<>

Lists all installed packages and their versions.
@
@ all, libraries



### PIP - Requirements File - Create

<cb>pip freeze > <v>requirements.txt<><>

Create requirements file from installed packages.
@
@ command, library, libraries, packages, freeze



### PIP - Requirements File - Install

<cb>pip install -r <v>requirements.txt<><>

Installs all the packages in the requirements file.
@
@ command, library, libraries, packages, install, -r



# Operators
@
@ Operators, Operations, Expressions



### Arithmetic Operators

	<c><v>a<> + <v>b<><> 
	<c><v>a<> - <v>b<><> 
	<c><v>a<> * <v>b<><> 
	<c><v>a<> / <v>b<><>					Always Returns a Float
	<c><v>a<> // <v>b<><>				Floor Divide ( 9 // 4 = 2)

	<c><v>a<> % <v>b<><>					Modulo ( 7 % 3 = 1)
	<c><v>a<> ** <v>b<><>				To The Power Of
@
@ power, modulo, modulus, plus, minus, divide, multiply, %, **, +, -, /, //



### Arithmetic Assignment Operators

Assign:

	<c><v>a<> = <v>value<><>

Calculate and update variable:

	<c><v>a<> += <v>value<><>
	<c><v>a<> -= <v>value<><>
	<c><v>a<> *= <v>value<><>
	<c><v>a<> /= <v>value<><>
	<c><v>a<> //= <v>value<><>			Floor Divide
	<c><v>a<> %= <v>value<><>			Modulo
	<c><v>a<> **= <v>value<><>			To The Power of
@
@ =, +=, -=, *=, /=, //=, %=, **=, =+, =-, =*, =/, =//, =%, =**



### Assignment Operator - Conditional Operator

<cb>= <v>true_expression<> if <v>test_condition<> else <v>false_expression<><>


Ternary conditional operator.
@
@ Ternary conditional operator, tertiary
@ Inline If, iif, if else, ?



### Assignment Expression (Walrus Operator)

<cb><v>value_1<> := <v>value_2<><>

<cb>if <v>value_1<> := <v>value_2<>:
	<v>...<><>

<cb>while (<v>item<> := <v>next_item<>()):
	<v>...<><>

Does 2 Things:

	Assigns a Value
	Returns That Value

This is usually used when the right side of the assignment is a function.


Example:

<cb><v>count<> = 0

while (<v>count<> := count + 1) < 5:
	print(<v>count<>)

<#># Prints 1 to 4, Then Exits<><>
@
@ Walrus Operator, :=



### Logical Operators

	<c><v>a<> == <v>b<><>				Equal In Value
	<c><v>a<> != <v>b<><>
	<c><v>a<> > <v>b<><>
	<c><v>a<> \< <v>b<><>
	<c><v>a<> >= <v>b<><>
	<c><v>a<> \<= <v>b<><>

	<c><v>a<> and <v>b<><>
	<c><v>a<> or <v>b<><>
	<c>not <v>b<><>

	<c><v>a<> is <v>b<><>
	<c><v>a<> is not <v>b<><>
@
@ Boolean, ==, !=, \<>, \<, \<=, >, >/, is, not
@ less than, greater than, less that or equal, greater than or equal



### Logical Operators - And, Or Not

	<c><v>a<> and <v>b<><>
	<c><v>a<> or <v>b<><>
	<c>not <v>b<><>

Versus <c>&&<>, <c>||<>, <c>!<> used in other languages.
@
@ Boolean, and, or, not, &&, ||, !



### Bitwise Operators
@
@ boolean, bitwise-only



#### Bitwise Operators - Basics

<c>~<v>a<><>						Complement / Inverse

<c><v>a<> & <v>b<><>					Bitwise AND
<c><v>a<> | <v>b<><>					Bitwise OR
<c><v>a<> ^ <v>b<><>					Bitwise XOR

<c><v>a<> \<\< <v>shift_count<><>			Bitwise Shift Left
<c><v>a<> >> <v>shift_count<><>			Bitwise Shift Right
@
@ &, |, ^, \<\<, >>



#### Bitwise Complement

<cb>= ~<v>a<><>

Same As:

<cb>= -<v>a<> - 1<>


Performs a bitwise complement on the value.
Because Python's integers are signed, this is not a straight inversion of the bits.


Example:

<cb><v>a<> = 0b<v>110<>

<v>compement<> = ~<v>a<>

<#># Returns -0b111<><>
@
@ ~, NOT



#### Bitwise AND

<cb>= <v>a<> & <v>b<><>


Example:

<cb><v>a<> = 0b<v>110<>
<v>b<> = 0b<v>011<>

<v>value<> = <v>a<> & <v>b<>

<#># Returns 0b10<><>
@
@ &



#### Bitwise OR

<cb>= <v>a<> | <v>b<><>


Example:

<cb><v>a<> = 0b<v>110<>
<v>b<> = 0b<v>011<>

<v>value<> = <v>a<> | <v>b<>

<#># Returns 0b111<><>
@
@ |



#### Bitwise XOR

<cb>= <v>a<> ^ <v>b<><>


Example:

<cb><v>a<> = 0b<v>110<>
<v>b<> = 0b<v>011<>

<v>value<> = <v>a<> ^ <v>b<>

<#># Returns 0b101<><>
@
@ ^



#### Bitwise Shift Left

<cb>= <v>a<> \<\< <v>shift_count<><>


Example:

<cb><v>a<> = 0b<v>110<>

<v>value<> = <v>a<> \<\< <v>2<>

<#># Returns 0b11000<><>
@
@ \<\<



#### Bitwise Shift Right

<cb>= <v>a<> >> <v>shift_count<><>


Example:

<cb><v>a<> = 0b<v>110<>

<v>value<> = <v>a<> >> <v>2<>

<#># Returns 0b1<><>
@
@ >>




### Identity Operators

Is The Same?:

<cb>= <v>x<> is <v>y<><>

<cb>= <v>x<> is not <v>y<><>


Same Memory Location?:

<cb>= id(<v>x<>) is id(<v>y<>)<>

<cb>= id(<v>x<>) is not id(<v>y<>)<>


<c>is<> and <c>is not<> compare items' identities to see if they are the same.
<c>id<><> compares memory locations.
@
@ id, is not, memory location, pointer, compare, same, equals
@ Object, id()



### Operators - Is Empty?

<cb>= not <v>var_1<><>

<cb>if not <v>var_1<>:
	<v>...<><><>

Use on sequences, strings, lists, sets, dicts, tuples.


Example:

<cb>if not <v>dict_1<>:
	print("<v>dict_1<> is empty.")
else:
	print("<v>dict_1<> not empty.")<>
@
@ Non-empty, None, sequences, strings, lists, sets, dicts, tuples, equals, not



### Operators - Not Empty?

<cb>if <v>var_1<>:
	<v>...<><>

Use on sequences, strings, lists, sets, dicts, tuples.


Example:

<cb>if <v>dict_1<>:
	print("<v>dict_1<> not empty.")
else:
	print("<v>dict_1<> is empty.")<>
@
@ Non-empty, None, sequences, strings, lists, sets, dicts, tuples, equals, not



### Operators - Is Between

<cb>= <v>min<> \< <v>value<> \< <v>max<>

= <v>min<> \<= <v>value<> \<= <v>max<><>

<cb>if <v>min<> \< <v>value<> \< <v>max<>:
	<v>...<>

if <v>min<> \<= <v>value<> \<= <v>max<>:
	<v>...<><>


Examples:

<cb><v>value<> = <v>1<>

<#># True:<>

print (0 \< <v>value<> \< 2)

<#># False:<>

print (1 \< <v>value<> \< 2)

<#># True:<>

print (1 \<= <v>value<> \< 2)<>



### Operator Precedence

From Highest To Lowest:


<table><col><c>(<v>...<>)<>, <c>[<v>...<>]<>, <c>{<v>key<>: <v>value<>}<>, <c>{<v>...<>}<><><col><#># Parenthesis, List, Dictionary or Set<><>
<col> <>
<col><c><v>x<>[<v>index<>]<>, <c><v>func_1<>()<>, <c><v>x<>.<v>attrib<><><><col><#># Subscripts, Slicing, Calls, Attributes<><>
<col> <>
<col><c>await <v>x<><><><col><#># Await Expression<><>
<col> <>
<col><c>**<><><col><#># Exponent<><>
<col> <>
<col><c>+<v>x<><>, <c>-<v>x<><>, <c>~<v>x<><><><col><#># Positive, Negative, Bitwise NOT<><>
<col> <>
<col><c>*<>, <c>/<>, <c>//<>, <c>%<>, <c>@<><><col><#># Multiply, Divide, Floor Divide, Remainder (Modulo), Matrix Multiply<><>
<col> <>
<col><c>+<>, <c>-<><><col><#># Add, Subtract<><>
<col> <>
<col><c>\<\<<>, <c>>><><><col><#># Bitwise Shift<><>
<col> <>
<col><c>&<><><col><#># Bitwise AND<><>
<col> <>
<col><c>^<><><col><#># Bitwise XOR<><>
<col> <>
<col><c>|<><><col><#># Bitwise OR<><>
<col> <>
<col><c>in<>, <c>not in<>, <c>is<>, <c>is not<>, <c>\<<>, <c>\<=<>, <c>><>, <c>>=<>, <c>!=<>, <c>==<><><col><#># Comparators<><>
<col> <>
<col><c>not<><><col><#># Boolean NOT<><>
<col> <>
<col><c>and<><><col><#># Boolean AND<><>
<col> <>
<col><c>or <><><col><#># Boolean OR<><>
<col> <>
<col><c>if else<><><col><#># Conditional Operator<><>
<col> <>
<col><c>lambda<><><col><#># Lambda Expression<><>
<col> <>
<col><c>:=<><><col><#># Assignment Operator<><><>



# Control Structures
@
@ statements, flow
@ control-only



### If Else

<cb>if <v>condition_1<>:
	<v>...<>
elif <v>condition_2<>:
	<v>...<>
else:
	<v>...<><>
@
@ basics, conditional
@ if-only, then, else, elif, elseif


### For
@
@ for-only, loop, loops, for-loops



#### For - Basics

<cb>for <v>item<> in <v>sequence_1<>:
	<v>...<><>

<cb>for <v>i<> in range(<v>max_plus_1<>):
	<v>...<><>

<cb>for <v>item_1<>, <v>item_2<>, <v>...<> in <v>sequence_1<>:      <#># Unpack<>
	<v>...<><>

<cb>for <v>item<> in <v>sequence_1<>:
	<v>...<>
	break
	<v>...<>
	continue
else:
	<v>...<><>
@
@ loop through, iterate, iterating, continue, break, else, skip



#### For - Else

<cb>for <v>i<> in range(<v>range_options<>):
	<v>...<>
else:
	<v>...<><>


The <c>else<> block executes after the <c>for<> block completes.


Examples:

<cb>for <v>i<> in range(3):
	print(i)
else:
	print("done")<>
@
@ range, forelse, for-else



#### For - In Dict

<cb>for <v>key<>, <v>element<> in <v>dict_1<>.items():
	<v>...<><>
@
@ each, foreach, over
@ dict, dictionary, .items(), iterating, iterate



#### For - In Range

<cb>for <v>i<> in range(<v>range_options<>):
	<v>...<><>


Examples:

<cb>for <v>i<> in range(5):                        <#># Loops through 0, 1, 2, 3, 4.<>
	<v>...<><>

<cb>for <v>i<> in range(1,5):                  <#># Loops through 1, 2, 3, 4.<>
	<v>...<><>
@
@ range()



#### For - In Range With Step

<cb>for <v>i<> in range(<v>first<>, <v>last_plus_one<>, <v>step<>):
	<v>...<><>


Example:

<cb>for <v>i<> in range(2, 9, 2):                  <#># Loops through 2, 4, 6, 8.<>
	print(<v>i<>)<>
@
@ over, step, range()



#### For - In Sequence

<cb>for <v>element<> in <v>sequence<>:
	<v>...<><>

<cb>for <v>element<> in <v>sequence<>:
	<v>...<>
	break                               <#># Exit for loop.<>
	<v>...<>
	continue                            <#># Jump to next iteration.<><>

A sequence can be a list, array, etc.


Example:

<cb><v>list_1<> = [<v>'a'<>, <v>'b'<>, <v>'c'<>]

for <v>item<> in <v>list_1<>:
	<v>...<><>
@
@ each, foreach, over, iterate, iterating



#### For - In Sequence of Tuples, Unpacked

<cb>for <v>item_1<>, <v>item_2<>, <v>...<> in <v>tuple_sequence<>:
	<v>...<><>

Separates inside each element inside <c><v>tuple_sequence<><>.
Works for lists too.


Example:

<cb><v>tuples<> = [(<v>"tuple 1"<>, <v>1<>), (<v>"tuple 2"<>, <v>2<>), (<v>"tuple 3"<>, <v>3<>)]

for <v>name<>, <v>value<> in <v>tuples<>:
	print(<v>name<>, ":", <v>value<>)

<#># Prints:
\#
\# tuple 1 : 1
\# tuple 2 : 2
\# tuple 3 : 3<><>
@
@ each, foreach, destructure, destructuring, In



#### For - Nested For

<cb>for <v>i<> in range(<v>count_1<>):
	for <v>j<> in range(<v>count_2<>):
		<v>...<><>

Example:

<cb>for <v>tens<> in range(2):
    for <v>units<> in range(5):
    	print(str(<v>tens<>) + str(<v>units<>))<><>
@
@ nesting



### Match

Python Version: 3.10+
@
@ Structural Pattern Matching
@ switch, case, match-only



#### Match - Match Basics

<cb>match <v>variable_1<>:

    case <v>value_1<>:
        <v>...<>

    case <v>value_2<> | <v>value_3<>:			<#>Matches Either Value<>
        <v>...<>

    case (<v>value_4_1<>, <v>value_4_2<>):	<#>Tuple<>
        <v>...<>

    case [<v>value_5_1<>, <v>value_5_2<>]:	<#>List<>
        <v>...<>

    case {<v>key_6<>: <v>value_6<>}:			<#>Dict (Contains)<>
        <v>...<>

    case <v>Class1<>(<v>param_1<>, <v>param_2<>):	<#>Class<>
        <v>...<>

    case <v>Enum1<>.<v>ENUM_1<>:				<#>Enum<>
        <v>...<>

    case (<v>value_8<>, <v>x<>):				<#>Varible<>
        <v>...<>
	
    case (<v>value_8<>, <v>x<>) if <v>condition<>:
        <v>...<>   
	
    case _:							<#>Unmatched<>
        <v>...<><>



#### Match - Capture To Variable

<cb>match <v>item_1<>:
    case <v>variable_1<>:
        <v>...<>
    case (<v>value<>, <v>variable_1<>):
        <v>...<>
    case (<v>variable_1<>, <v>variable_2<>, <v>variable_3<>):
        <v>...<>
    case _:
        <v>...<><>


Captures one or more values and binds them to variables.


Example:

<cb><v>item_1<> = (<v>1<>, <v>2<>)

match <v>item_1<>:
    case (1, <v>a<>):
        print (f'(1, a = {<v>a<>})')
    case (2, <v>b<>):
        print (f'(2, b = {<v>b<>})')
    case _:
        print('Unmatched Value')

<#># Prints: (1, a = 2)<><>
@
@ capture pattern, value


#### Match - Match Specific Values

<cb>match <v>item_1<>:
    case <v>value_1<>:
        <v>...<>
    case <v>value_2<> | <v>value_3<>:
        <v>...<>
    case _:
        <v>...<><>


Matches the value of the variable with the value of the case statements.
If matched, the case statement will execute.


Examples:

<cb><v>int_1<> = 2

match <v>int_1<>:
    case <v>1<>:
        print ('Value 1')
    case <v>2<> | <v>3<>:
        print ('Value 2 or 3')
    case _:
        print ('Unmatched Value')

<#># Prints: 'Value 2 or 3'<><>


<cb><v>month<> = '<v>feb<>'

match <v>int_1<>:
    case '<v>jan<>':
        print ('January')
    case '<v>feb<>':
        print ('February')
    case _:
        print ('Unmatched Month')

<#># Prints: 'It's February'<><>



#### Match - Match 'Constants'

<cb>class <v>Constants<>:
    <v>CONSTANT_1<> = <v>value_1<>
    <v>CONSTANT_2<> = <v>value_2<>

match <v>item_1<>:
    case <v>Constants<>.<v>CONSTANT_1<>:
        <v>...<>
    case <v>Constants<>.<v>CONSTANT_2<>:
        <v>...<>
    case _:
        <v>...<><>


Define constants in a class and reference them statically.

Note: If you do not include the class name, <c>match<> will think these are structural pattern variables and will assign values to them.


<cb>class <v>Status<>:
	<v>OK<> = '<v>ok<>'
	<v>ERROR<> = '<v>error<>'

<v>status<> = '<v>ok<>'

match <v>status<>:
    case <v>Status<>.<v>OK<>:
        print ("Status OK")
    case <v>Status<>.<v>ERROR<>:
        print ("Status Error")
    case _:
        print ("Status Unknown")

<#># Prints: "Status OK"<><>



#### Match - Match Dict

<cb>match <v>dict_1<>:
    case {<v>key_1<>: <v>value_1<>}:
        <v>...<>
    case {<v>key_2<>: <v>value_2<>, <v>key_3<>: <v>value_3<>}:
        <v>...<>
    case _:
        <v>...<><>


Matches key, value pairs in a dictionary.
If the pair exists, the case block will execute.
This is independent of any other values in the dict.


Examples:

<cb><v>dict_1<> = {'<v>b<>': '<v>b1<>', '<v>z<>': '<v>z1<>'}

match <v>dict_1<>:
    case {'<v>a<>': '<v>a1<>'}:
        print('Value a:a1')
    case {'<v>b<>': '<v>b0<>'}:
        print('Value b:b0')
    case {'<v>b<>': '<v>b1<>'}:
        print('Value b:b1')
    case _:
        print('Unmatched value.')

<#># Prints: 'Value b:b1'<><>



#### Match - Match Enums
@
@ enumerations

<cb>class <v>Enum1<>(Enum):
    <v>ENUM_1<> = <v>value_1<>
    <v>ENUM_2<> = <v>value_2<>

match <v>item_1<>:
    case <v>Enum1<>.<v>ENUM_1<>:
        <v>...<>
    case <v>Enum1<>.<v>ENUM_2<>:
        <v>...<>
    case _:
        <v>...<><>


Matches the values of an enumerated type.


<cb>from enum import Enum, auto

class <v>Status<>(Enum):
    <v>OK<> = '<v>ok<>'
    <v>ERROR<> = '<v>error<>'

<v>status<> = <v>Status<>.<v>OK<>

match <v>status<>:
    case <v>Status<>.<v>OK<>:
        print ("Status OK")
    case <v>Status<>.<v>ERROR<>:
        print ("Status Error")
    case _:
        print ("Status Unknown")

<#># Prints: "Status OK"<><>



#### Match - Match Lists

<cb>match <v>list_1<>:
    case [<v>value_1<>]:
        <v>...<>
    case [<v>value_2<>]:
        <v>...<>
    case [<v>value_3_1<>, <v>value_3_2<>]:
        <v>...<>
    case _:
        <v>...<><>


Matches the internal values of the variable with the value of the case statements.
If matched, the case statement will execute.


Example:

<cb><v>list_1<> =[<v>1<>, <v>3<>]

match <v>list_1<>:
    case [<v>1<>]:
        print ('Value [1]')
    case [<v>1<>, <v>2<>]:
        print ('Value [1, 2]')
    case [<v>1<>, <v>3<>]:
        print ('Value [1, 3]')
    case _:
        print ('Unmatched Value')

<#># Prints: Value (1, 3)'<><>



#### Match - Match Tuples

<cb>match <v>tuple_1<>:
    case (<v>value_1<>):
        <v>...<>
    case (<v>value_2<>):
        <v>...<>
    case (<v>value_3_1<>, <v>value_3_2<>):
        <v>...<>
    case _:
        <v>...<><>


Matches the internal values of the variable with the value of the case statements.
If matched, the case statement will execute.


Example:

<cb><v>tuple_1<> =(<v>1<>, <v>3<>)

match <v>tuple_1<>:
    case (<v>1<>):
        print ('Value (1)')
    case (<v>1<>, <v>2<>):
        print ('Value (1, 2)')
    case (<v>1<>, <v>3<>):
        print ('Value (1, 3)')
    case _:
        print ('Unmatched Value')

<#># Prints: Value (1, 3)'<><>



#### Match - Match Conditionally / If

<cb>match <v>item_1<>:
    case <v>...<> if <v>condition<>:
        <v>...<><>


Will match the case only when <v>condition<> is met.


<cb><v>item_1<> = (<v>1<>, <v>2<>)

match <v>item_1<>:
    case (<v>1<>, <v>x<>) if <v>x<> % 2 == 0:
        print('Value (1,x), x Is Even')
    case (<v>1<>, <v>x<>):
        print('Value (1,x), x Is Odd')
    case _:
        print('Unmatched value')

<#>Prints: 'Value (1,x), x Is Even'<><>
@
@ with condition



#### Match - Fall Through

Not Supported.

Unlike other languages, <c>match<> does not fall through from one case block into the next. There is no need for a <c>break<> statement within a case block to exit the block.
@
@ case block



#### Match - Unmatched / Wildcard

<cb>match <v>item_1<>:

    case _:
        <v>...<><>


<c>_<> catches all values that were not matched in any other case statements.


<cb><v>item_1<> = <v>-1<>

match <v>item_1<>:
    case <v>1<>:
        print('Value 1')
    case <v>2<>:
        print('Value 2')
    case _:
        print('Unmatched Value')

<#>Prints: 'Unmatched Value'<><>
@
@ underscore, _, default case



### While

<cb>while <v>condition<>:
	<v>...<><>

<cb>while <v>condition<>:
	<v>...<>
else:
	<v>...<>                                   <#># When <c>condition<> = <c>False<><><>

<cb>while <v>condition<>:
	<v>...<>
	break                               <#># Exit for loop.<>
	<v>...<>
	continue                            <#># Jump to next iteration.<>
	<v>...<>
else:
	<v>...<>                                   <#># When <c>condition<> = <c>False<><><>

<c>else<> block reached when <c>condition<> = false only. Not called for break, exception, etc.
@
@ loop, loops, basics
@ while-only, continue, break, skip



### Break, Continue

Exit Loop:

<cb>break<>

Continue on Next Iteration:

<cb>continue<>

Applies to <c>for<> and <c>while<> loops.
@
@ For, While, skip



### Pass

<cb>pass<>

Use as a placeholder in places where a code block should exist but you don't have any code yet.


Examples:

<cb>for <v>i<> in range(<v>5<>):
	pass<>

<cb>def <v>new_function<>():
	pass<>
@
@ For, While



# Variables
@
@ vars, variable-only, variables-only, vars-only, var-only



### Variable - Assign

<cb><v>name<> = <v>value<><>


Creates a new variable called <c><v>name<><> with value <c><v>value<><>.


Examples:

<cb>int_1 = 11<>

<cb>float_1 = 9.75<>

<cb>string_1 = 1Life, the universe, and everything1<>
@
@ create new, assignment



### Variable - Global - Create or Update

<cb>global <v>name<><>


Updates an existing global variable from inside a function.
Without the keyword <c>global<>, Python will create a local variable.

Creates a new global variabel if it doesn't exist.


Usage:

<cb>def <v>some_function<>():

	global <v>name<>
	<v>name<> = <v>value<><>


Example:

<cb><v>global_1<> = 'Global Value'


def <v>update_global<>():

	global <v>global_1<>
	<v>global_1<> = <v>global_1<> + ' + Update'


<v>update_global<>()

<#># Sets global_1 to 'Global Value + Update'<><>
@
@ scope



### Variable - NonLocal - Update Parent Variable

<cb>nonlocal <v>value_1<><>


Use <c>nonlocal<> to update a variable outside the scope of a inner (nested) function.

Usage:

<cb>def <v>parent_function<>():

	<v>value_1<> = <v>...<>

	def <v>inner_function<>():

		nonlocal <v>value_1<>
		<v>value_1<> = <v>new_value<><>

Without the keyword <c>nonlocal<>, Python will create a local variable.
The non-local variable must be in scope of the nested function declaration.
Works with multi-level nesting.
You can not create a non-existing variable.


Note:

The function already has read access to the parent variables through closure.
Consider avoiding updating the values.


Example:

<cb>def <v>parent_function<>:

	<v>count<> = 0

	def <v>update_count<>():

		nonlocal <v>count<>
		<v>count<> += 1

	<v>update_count<>()

	<#># count is now 1<><>
@
@ Scope



### Variable - Equals?

<cb>= <v>item_1<> == <v>item_2<><>


Returns true if <c><v>item_1<><> is equal to <c><v>item_2<><>.


@
@ equals, is, compare



### Variable - Cast

<cb>= <v>new_type<>(<v>item_1<>)<>


Converts <c><v>item_1<><> into a variable of type <c><v>new_type<><>.


Example:

<cb><v>float_1<> = <v>10.5<>

<v>int_1<> = int(<v>float_1<>)                       <#># Converts float 10.5 into integer 10.<><>
@
@ Convert-To, casting, converting, change, to-type



### Variable - Delete

<cb>del <v>variable_1<><>


Removes a variable from memory.


Example:

<cb><v>a<> = 10
print(<v>a<>)

del <v>a<>
print(<v>a<>)

<#># Returns Error:
\# ...
\# NameError: name 'a' is not defined<><>
@
@ remove, clear



### Variable - Exists?

Exists In Local Scope?

<cb>= '<v>variable_name<>' in locals()<>

Exists In Global Scope?

<cb>= '<v>variable_name<>' in locals()<>


Returns <c>True<> if in the checked scope.


Example:

<cb><v>a<> = 10

if '<v>a<>' in locals():
	print('a exists')

<#># Prints: a exists<><>
@
@ globals(), locals()



### Variable Type - Get Type

<cb>= type(<v>item_1<>)<>

Returns the item type.


Example:

<cb><v>item_1<> = <v>1.0<>
<v>item_1_type<> = type(<v>item_1<>)                  <#># Returns <c>class 'float'<>.<><>
@
@ Variable, check, typeof, type()



### Variable Type - Is Type?

<cb>= type(<v>item_1<>) is <v>type_1<><>


Returns true if <c><v>item_1<><> is the same type as <c><v>type_1<><>.


Example:

<cb>item_1 = [1, 2, 3]

if type(<v>item_1<>) is list:
	<v>...<>                                   <#># Executes if arg_1 is of type <c>list<>.<><>
@
@ Variable, equals, is, compare, isclass, type(), type of, is instance of



### Variable Type - Is Type or Subtype?

<cb>= isinstance(<v>item_1<>, <v>type_1<>)<>

Is One of These:

<cb>= isinstance(<v>item_1<>, (<v>type_1<>, <v>type_2<>, <v>...<>)<>


Returns true if <c><v>item_1<><> is a type or a subtype of <c><v>type_1<><>.


Examples:

<cb>item_1 = []

if isinstance(<v>item_1<>, list):
	<v>...<><>

<cb>item_2 = 10

if isinstance(<v>item_1<>, (int, complex, float)):
	<v>...<><>
@
@ equals, is type?, subclass, isclass, isinstance()
@ check, compare, is instance of



### Variable Type - Is Subtype?

<cb>= issubclass(<v>item_1<>, <v>type_1<>)<>


Returns true if <c><v>item_1<><> is a subtype of <c><v>type_1<><>.@
@ equals, is subtype?, is subclass of
@ check, compare, issubclass()



### Variables - Swap

<cb><v>a<>, <v>b<> = <v>b<>, <v>a<><>


This is an easy way to swap the values of <c><v>a<><> and <c><v>b<><>.
@
@ values



# Type
@
@ type-only, type()


### Type - Equals?

<cb>= type(<v>item_1<>) is <v>type_1<><>

Returns true if <c><v>item_1<><> is the same type as <c><v>type_1<><>.


Example:

<cb>if type(<v>arg_1<>) is list:
	<v>...<>                                   <#># Executes if arg_1 is of type <c>list<>.<><>
@
@ Variable, equals, is, compare, isclass, type()



### Type - Get

<cb>= type(<v>item_1<>)<>

Returns the item type.


Example:

<cb><v>float_1<> = <v>1.0<>
<v>type_1<> = type(<v>float_1<>)                  <#># Returns <c>class 'float'<>.<><>
@
@ Variable, check, typeof, type()



### Type - Get Name

<cb>= type(<v>item_1<>).__name__<>

Returns the type name of the item.


Example:

<cb><v>float_1<> = <v>1.0<>
print(type(<v>float_1<>).__name__)         <#># Prints <c>'float'<>.<><>
@
@ Variable, class, __name__, type()



# Data Types - Built In
@
@ standard, builtin



#### Standard Types

	<c>bool<>			(Boolean)
	<c>int<>				(Integer)
	<c>complex<>			(Complex Number)
	<c>float<>			(Floating Point)   
	<c>str<>				(String)



#### Sequence Types

	<c>list<>			(List / Mutable Array)
	<c>tuple<>			(Immutable Array)
	<c>range<>			(Immutable Integers)
@
@ Array, data structures



#### Collections

	<c>dict<>			(Dictionary of Key Value Pairs)
	<c>set<>				(Mutable Set)
	<c>frozenset<>		(Immutable Set)
@
@ data structures


#### Mutable Types

	<c>bytearray
	classes
	class instances
	dict
	list
	set<>



#### Immutable Types

	<c>boolean<>
	<c>byte<>
	<c>float<>
	<c>frozenset<>
	<c>int<>
	<c>long<>
	<c>complex<>
	<c>str<>
	<c>tuple<>



# Data Types - From Library



#### Date And Time

	<c>date<>				(Date Only)
	<c>datetime<>			(Date And Time)
	<c>timedelta<>			(Time Difference)

	<c>float<> (<c>timestamp<>)		(Epoch Time, Seconds Since 1970) (Use <c>float<>)



#### Collections

	<c>chainmap<>
	<c>counter<>
	<c>deque<>
	<c>defaultdict<>
	<c>namedtuple<>
	<c>ordereddict<>
	<c>userdict<>
	<c>userlist<>
	<c>userstring<>

	<c>array<>			(List Constrained To A Single Basic Type)
@
@ data structures



#### Enumerations

	<c>enum<>



# Literals
@
@ literals-only, lit-only, literal-only


## Literals - Basics

<table><col><c>= True | False<><><col>Boolean Literal<>
<col> <>
<col><c>= 11<><><col>Integer Literal<>
<col><c>= -12<><><col>Integer Literal<>
<col> <>
<col><c>= 0b<v>1011<><><><col>Binary Literal<>
<col><c>= 0o<v>13<><><><col>Octal Literal<>
<col><c>= 0x<v>0B<><><><col>Hex Literal<>
<col> <>
<col><c>= 11.23<><><col>Float Literal<>
<col><c>= -1.23<><><col>Float Literal<>
<col> <>
<col><c>= <v>1<> + <v>2<>j<><><col>Complex Literal<>
<col> <>
<col><c>= '<v>A String<>'<><><col>String Literal<>
<col><c>= "<v>A String<>"<><><col>String Literal<>
<col> <>
<col><c>= f'<v>...<>'<><><col>F-String Literal<>
<col><c>= f"<v>...<>"<><><col>F-String Literal<><>



## Literals - Details



### Boolean Literal

<cb>= True<>

<cb>= False<>
@
@ true, false



### Complex Literal

<cb>= <v>1<> + <v>2<>J<>

<cb>= <v>3<>J<>



### Integer Literal - Decimal

<cb>= <v>11<><>



### Integer Literal - Binary

<cb>= 0b<v>1011<><>
@
@ 0b



### Integer Literal - Hex

<cb>= 0x<v>0B<><>
@
@ 0x, hexadecimal



### Integer Literal - Octal

<cb>= 0o<v>13<><>
@
@ 0o



### Float Literal

<cb>= 42.42<>



### String Literal

<cb>= '<v>A String<>'<>

Or

<cb>= "<v>A String<>"<>



# None Type

<cb>= None<>


<c>None<> is a singleton in Python.


Examples:

<cb><v>var_1<> = None<>

<cb>if <v>var_1<> is None:
	<v>...<><>
@
@ character, none-only



### None - Is None

<cb>= <v>item_1<> is None<>

<cb>if not <v>item_1<>:
	<v>...<><>
@
@ equals?, equal to?, Compare



### None - Not None

<cb>= <v>item_1<> is not None<>

<cb>if <v>item_1<>:
	<v>...<><>
@
@ equals?, equal to?, Compare



# Boolean

<cb>= True
= False<>

Type: <c>bool<>


Immutable.
Subset of Integer
@
@ bool, bool-only, bools-only, boolean-only, booleans-only
@ Create, Define, Instantiate, New, True, False, data type


# Boolean Operations
@
@ bool, bool-only, bools-only, boolean-only, booleans-only
@ Ops, True, False



#### Boolean - To Integer

<cb>= int(<v>bool_1<>)<>

False = 0
True = 1
@
@ Convert, Conversion, From, int(), from-boolean, to-integer



#### Boolean - From String (Empty / Not Empty)

<cb>= bool(<v>string_value<>)<>


Tests for empty string.

Empty String = <v>False<>
Otherwise = <v>True<>
@
@ Convert, Conversion, To, bool(), to-boolean, from-string



#### Boolean - From String (Conversion)

<cb>= <v>string_value<>.lower() in ['t', 'true', 'y', 'yes', 1]<>

Returns true if <c><v>string_value<><> is one of 't', 'true', 'y', 'yes', or 1.
Case is ignored.
@
@ Convert, Conversion, To, True, False, parse, .tolower(), yes, no, to-boolean, from-string



#### Boolean - To String

<cb>= str(<v>value_1<>)<>

Returns 'True' or 'False'.
@
@ Convert, Conversion, From, str(), from-boolean, to-string




# Byte

<cb>= b"<v>String to bytes.<>"

= bytes([<v>66, 121, 116, 101, 115<>])     <#>#1<><>


Type: <c>bytes<>


\#1  <s>-<>  Same as b'Bytes'.


Creates a byte array.
@
@ bytes, byte-only, bytes-only, bytes(), b'', b""
@ Create, Define, Instantiate, New, binary, data type



# Byte Operations
@
@ ops, bytes, byte-only, bytes-only, binary



#### Bytes - Length

<cb>= len(<v>bytes_1<>)<>
@
@ size, count, len()



#### Bytes - To Base64

<cb>from base64 import b64encode

= b64encode(<v>bytes_1<>)<>

Returns: <c>bytes<>


Encodes a byte array into Base64.
Returns as another byte array.


Example:

<cb>from base64 import b64encode

<v>text<> = "Text in Base64"
<v>bytes<> = <v>text<>.encode("utf-8")

<v>base64_bytes<> = b64encode(<v>bytes<>)             <#>#1<>
<v>base64_text<> = <v>base64_bytes<>.decode("ascii")

print (<v>base64_text<>)                           <#>#2<><>

\#1  <s>-<>  Base64 Conversion

\#2  <s>-<>  Prints 'VGV4dCBpbiBCYXNlNjQ='
@
@ encode(), .encode(), Base 64, base64.b64encode(), b64encode()
@ Convert, Conversion, From
@ from-bytes, to-base64



#### Bytes - From Base64

<cb>from base64 import b64decode

= b64decode(<v>bytes_1<>)<>

Retuns: <c>bytes<>


Decodes a base64 encoded byte array.
Returns another byte array.


Example:

<cb>from base64 import b64decode

<v>base64_text<> = 'VGV4dCBpbiBCYXNlNjQ='
<v>base64_bytes<> = <v>base64_text<>.encode('ascii')

<v>decoded_bytes<> = b64decode(<v>base64_bytes<>)     <#>#1<>
<v>decoded_text<> = <v>decoded_bytes<>.decode("utf-8")

print (<v>decoded_text<>)                      <#>#2<><>

\#1  <s>-<>  Base64 Decoding

\#2  <s>-<>  Prints 'This in Base64'
@
@ .decode(), Base 64, base64.b64decode(), .b64decode()
@ Convert, Conversion, To, to-bytes, from-base64



#### Bytes - To Hex

<cb>from binascii import hexlify

= hexlify(<v>bytes_1<>)<>

Returns: <c>bytes<>


Converts a byte array into its hex representation.


Example:

<cb>from binascii import hexlify

<v>value_bytes<> = b'in bytes'
<v>value_hex<> = hexlify(<v>value_bytes<>)

print (<v>value_hex<>.decode('ascii'))     <#>#1<><>

\#1  <s>-<>  Prints '696e206279746573'
@
@ Convert, Conversion, hexadecimal, binascii.hexlify(), .hexlify()
@ from-bytes, to-hex



#### Bytes - To Int

<cb>= int.from_bytes(<v>bytes_1<>, "big")<>

Use <c>"big"<> for bytes with the most significant byte first.
Use <c>"little"<> for bytes with the most significant byte first.
@
@ Convert, Conversion, To
@ from-bytes, to-integer



#### Bytes - From String

<cb>= <v>string_1<>.encode()<>

<cb>= <v>string_1<>.encode('utf-8')<>
@
@ Convert, Conversion, To, .encode(), utf-8
@ to-bytes, from-string



#### Bytes - To String

<cb>= <v>bytes_1<>.decode("utf-8")<>
@
@ Convert, Conversion, From, decode, utf-8, .decode()
@ from-bytes, to-string



# Complex Number

<cb>= <v>real<> + <v>imaginary<>j<>

<cb>= <v>imaginary<>j<>

<cb>= complex(<v>real<>, <v>imaginary<>)<>

Type: <c>complex<>


Why J:
Becaues i looks too much like a 1.
Because j is used in engineering.


Example:

<cb><v>complex_1<> = <v>1<> + <v>2<>j<>

<cb><v>complex_2<> = <v>3<>j<>
@
@ complex-only, complex-numbers-only, real, imaginary, numbers
@ Create, Define, Instantiate, New, i, j, .real, .imag, data type, complex()



# Complex Number Operations
@
@ complex-only, complex-numbers-only
@ Ops



#### Complex Number - Real Part

<cb>= <v>complex_1<>.real<>
@
@ Get, .real



#### Complex Number - Imaginary Part

<cb>= <v>complex_1<>.imag<>
@
@ Get, .imag



#### Complex Number - From String

<cb>= complex("<v>1<> + <v>2<>j")<>
@
@ Convert, Conversion, To, parse, complex()
@ to-complex, from-string



#### Complex Number - To String

<cb>= str(<v>complex_1<>)<>
@
@ Convert, Conversion, From, str()
@ from-comple, to-string



# Float

<cb>= <v>1.0<>
= <v>123.345<>
= <v>123_345.67_89<>
= <v>1.9484E9<>
= <v>0.4388E-16<><>

Type: float


Immutable.
Underscores between digits are ignored. Use them to make numbers more readable.
@
@ float-only, floats-only
@ Create, Define, Instantiate, New, data type



# Float Operations
@
@ float-only, floats-only
@ ops



#### Float - NAN

<cb>= float('nan')<>
@
@ Not a number, is



#### Float - To Integer

<cb>= int(<v>float_value<>)<>

Example:

<cb><v>int_1<> = int(<v>1234.567<>)   <#># Returns 1234<><>
@
@ Convert, Conversion, From
@ from-float, to-integer



#### Float - From String

<cb>= float(<v>float_string<>)<>

Example:

<cb><v>float_1<> = float("<v>123.3<>")<>
@
@ Convert, Conversion, To, parse, float()
@ to-float, from-string



#### Float - To String

<cb>= "<v>format<>".format(<v>float_value<>)<>

Example:

<cb><v>string_1<> = "<v>{0:,.2f}<>".format(<v>1234.567<>)

<#># Returns "1,234.56"<><>
@
@ Convert, Conversion, From, .format()
@ from-float, to-string



# Integer

<cb>= <v>123<><>

<cb>= <v>123_456<><>

Type: <c>int<>


Immutable.
Length 32 or 64 bits. Depends on the machine.
Underscores between numbers are ignored. Use them to make the number more readable.
@
@ Long, int-only, ints-only, long-only, longs-only, integer-only
@ Create, Define, Instantiate, New, data type



# Integer Operations
@
@ Long, int-only, ints-only, long-only, longs-only, integer-only
@ ops



#### Integer - Is Zero

<cb>= not <v>int_1<><>

<cb>if not <v>int_1<>:
	<v>...<><>
@
@ Not



#### Integer - Not Zero

<cb>= bool(<v>int_1<>)<>

<cb>if <v>int_1<>:
	<v>...<><>
@
@ Non, bool()



#### Integer - Length

<cb>from math import floor
from math import log10

<v>length<> = (1 + floor(log10(abs(<v>int_1<>)))) if <v>int_1<> else 0<>

Returns number of digits.


Example:

<cb><v>int_1<> = 256
<v>length<> = (1 + floor(log10(abs(<v>int_1<>)))) if <v>int_1<> else 0       <#># Returns 3<><>
@
@ Count, Digits, Size
@ math.floor(), .floor(), Size, bath.log10(), .log10()



#### Integer - Maximum Value

<cb>import sys

<v>max_size<> = sys.maxsize<>

The maximum value of an integer is system dependent.
Use this function to find the value in your current environment.


32 bits = 2,147,483,647
64 bits = 9,223,372,036,854,775,807
@
@ Size, sys.maxsize, .maxsize, greatest



#### Integer - To Binary String

<cb>= bin(<v>int_1<>)<>

Returns: <c>str<>


Example:

<cb><v>binary_1<> = bin(<v>11<>)
<#># Returns '0b1001'<><>
@
@ bin(), convert
@ from-integer, to-binary-string, to-string, bits, binary, byte



#### Integer - From Hex String

<cb>= int(<v>hex_string<>, 16)<>

<cb>= int("0x<v>hex_value<>", 0)<>


Example:

<cb><v>hex_1<> = int("<v>A9<>", 16)
<#># Returns 169<><>

<cb><v>hex_2<> = int("0x<v>A9<>", 0)
<#># Returns 169<><>
@
@ Convert, Conversion, To, int(), hexadecimal
@ to-integer, from-string, from-hex-string



#### Integer - To Hex String

<cb>= hex(<v>int_1<>)<>

Returns: <c>str<>


Example:

<cb><v>hex_1<> = hex(<v>169<>)
<#># Returns '0xa9'<><>
@
@ Convert, Conversion, From, hex(), hexadecimal
@ from-integer, to-hex-string, to-string



#### Integer - To Octal String

<cb>= oct(<v>int_1<>)<>

Returns: <c>str<>


Example:

<cb><v>octal_1<> = oct(<v>57<>)
<#># Returns '0o71'<><>
@
@ Convert, Conversion, From, oct()
@ from-integer, to-oct-string, to-string



#### Integer - From String

<cb>= int(<v>string_value<>)<>

Example:

<cb><v>int_1<> = int("<v>123<>")<>
@
@ Convert, Conversion, To, int(), parse
@ to-integer, from-string



#### Integer - To String

<cb>= str(<v>int_1<>)<>


Example:

<cb><v>string_1<> = str(<v>123<>)<>
@
@ Convert, Conversion, From, str()
@ from-integer, to-string



# String

<cb>= "<v>A String<>"
= '<v>A String<>'
= str(<v>34<>)                         <#># Returns '34'<><>

Concatenated:

<cb>= '<v>123<>' + <v>string3<> + "<v>more text<>" + '<v>more text again<>'

= '123' '456'                     <#># Returns '123456'<><>

Escaped:

<cb>= ' "" ' + " '' "                <#># Returns ' ""  '' '<><>


Type: <c>str<>


Immutable.
Stored as variable byte unicode.
@
@ Strings, string-only, strings-only, str-only, text, text-only, str(), str., string.
@ Create, Define, Instantiate, New, "", '', single quote, double quote, data type



#### String - Multiline String

<cb>= '''<v>This is
a multiline
string.<>'''<>

<cb>= """<v>This is
a multiline
string.<>"""<>


Enclose multiline string in <c>'''<> or <c>"""<>.
@
@ ''', """, multiline, multi-line



#### String - Raw String

<cb>= r"<v>A\\String\\With\\Slashes<>"
= r'<v>A\\String\\With\\Slashes<>'<>


Escape characters are just regular characters.
@
@ r"", r''



# String Format - Format()
@
@ Strings, string-only, strings-only, str-only, text, text-only, .format(), {}
@ formatting, formats



### String Format() - Basics

<cb>string_1 = "value 1"
string_2 = "value 2"
float_3 = 12345.67<>

<cb><v>formatted_string<> = "{}".format(<v>string_1<>)<>

<cb><v>string_1_and_2<> = "{} {}".format(<v>string_1<>, <v>string_2<>)<>

<cb><v>pad_right<> = "{:<v>\<20<>}".format(<v>string_1<>)<>

<cb><v>formatted_number<> = "{:<v>,.1f<>}".format(<v>float_3<>)<>



### String Format() - Single Variable

<cb>= "{}".format(<v>item_1<>)<>


Example:

<cb><v>string_1<> = "<v>norminal<>"
<v>formatted<> = "Everything is {}.".format(<v>string_1<>)

<#># Returns "Everything is norminal."<><>



### String Format() - Multiplale Variables

<cb>= "{} {} <v>...<>".format(<v>item_1<>, <v>item_2<>, <v>...<>)<>


Example:


<cb><v>string_1<> = "<v>The cake<>"
<v>string_2<> = "<v>a lie<>"

<v>the_truth<> = "{} is {}.".format(<v>string_1<>, <v>string_2<>)

<#># Returns "The cake is a lie."<><>



### String Format() - With Formatting

<cb>= "{:<v>format<>}".format(<v>string_1<>)<>


Example:

<cb><v>string_1<> = "On the left!"
<v>padded<> = "{:<v>\<20<>}".format(<v>string_1<>)

<#># Returns "On the left!        "<><>

<cb><v>int_1<> = 12345
<v>comma_separated<> = "{:<v>,d<>}".format(<v>int_1<>)

<#># Returns "12,345"<><>



### String Format() - Escape

Escape {            <c>'{{'<>
Escape }            <c>'}}'<>

<cb>= "{{<v>...<>}}".format(<v>...<>)<>
@
@ {}, }



# String Format - F-String


Formatted String literal or f-string.

Creates a formatted string using a string literal.
@
@ Strings, string-only, strings-only, str-only, text, text-only
@ Formatted String literal
@ String Literals, {}, f"", f''
@ f-strings, fstrings, variable in, formatting, formats, f-string-only, f-strings-only



### F-String - Basics

<cb>string_1 = "value 1"
string_2 = "value 2"
float_3 = 12345.67<>

<cb><v>formatted_string<> = f"{<v>string_1<>}"<>

<cb><v>string_1_and_2<> = f"{<v>string_1<>} {<v>string_2<>}"<>

<cb><v>string_1_and_2<> = f"{<v>string_1<>}" f"{<v>string_2<>}"<>

<cb><v>pad_right<> = f"{<v>string_1<>:<v>\<20<>}"<>

<cb><v>formatted_number<> = f"{<v>float_3<>:<v>,.1f<>}"<>
@
@ Examples



### F-String - Single Variable

<cb>= f'{<v>item_1<>}'<>

<cb>= f"{<v>item_1<>}"<>


Example:

<cb><v>string_1<> = "<v>norminal<>"
<v>formatted<> = f"Everything is {<v>string_1<>}."

<#># Returns "Everything is norminal."<><>



### F-String - Multiplale Variables

<cb>= f"{<v>item_1<>} {<v>item_2<>} <v>...<>"<>


Example:


<cb><v>string_1<> = "<v>The cake<>"
<v>string_2<> = "<v>a lie<>"

<v>the_truth<> = f"{<v>string_1<>} is {<v>string_2<>}."

<#># Returns "The cake is a lie."<><>


### F-String - From Expression

<cb>= f'{<v>expression<>}'<>


You can embed an expression in an f-string and it will evaluate it.


Example:

<cb>print(f'{<v>10 + 20<>}')

<#># Prints 30<><>

<cb>print(f'{"<v>Everything Is Norminal<>"}')

<#># Prints "Everything Is Norminal"<><>



### F-String - Repr Variable

<cb>= f'{<v>item_1<>!r}'<>

Equvialent to:

<cb>= repr(<v>item_1<>)<>


Prints the repr() form of the value.


Example:

<cb><v>string_1<> = "<v>norminal<>"

<v>formatted<> = f"{<v>string_1<>!r}."

<#># Returns "'norminal'"<><>
@
@ !r, {!r}



### F-String - Show Name / Expression / Debug Mode

<cb>= f"{<v>item_1<> =}"<>


Prints the expression between <c>{<> and <c>}<> and it's value.
Useful for debugging.


Example:

<cb><v>string_1<> = "<v>norminal<>"

<v>formatted<> = f"{<v>string_1<>} =}"

<#># Returns "string_1 = 'norminal'"<><>
@
@ debugging, =, {=}



### F-String - With Formatting

<cb>= f"{<v>item_1<>:<v>format<>}"<>


Example:

<cb><v>string_1<> = "On the left!"
<v>padded<> = f"{<v>string_1<>:<v>\<20<>}"

<#># Returns "On the left!        "<><>

<cb><v>int_1<> = 12345
<v>comma_separated<> = f"{<v>int_1<>:<v>,d<>}"

<#># Returns "12,345"<><>
@
@ {:}, :



### F-String - Escape

Escape:

<cb>= f'{{<v>...<>}}''<>

Ugly Way:

<cb>= f"{'{'}"              <#>#1<><>

<cb>= f"{'}'}"              <#>#2<><>


\#1  -  Returns '{'<>

\#2  -  Returns '}'<>
@
@ {}, } {{, }}




# String - Operations
@
@ Strings, string-only, strings-only, str-only, text, text-only, str., string.
@ Ops



#### String - Append

<cb><v>string_1<> += <v>string_2<><>

Appends <c><v>string_2<><> to the end of <c><v>string_1<><>.
@
@ add, +=, append to



#### String - Concatenate

<cb>= <v>string_1<> + <v>string_2<> + <v>...<><>

Concatenate Raw Strings:

<cb>= "String 1" "String 2" <v>...<><>

Combines 2 or more strings into one string.
@
@ add, +, Combine


#### String - Contains?

<cb>= <v>string_1<> in <v>string_2<><>

<cb>if <v>string_1<> in <v>string_2<>:
	<v>...<><>

Returns <c>True<> when <c><v>string_1<><> is a substring of <c><v>string_2<><>.
@
@ in, includes



#### String - Not Contains?

<cb>= <v>string_1<> not in <v>string_2<><>

<cb>if <v>string_1<> not in <v>string_2<>:
	<v>...<><>

Returns <c>True<> when <c><v>string_1<><> is not a substring of <c><v>string_2<><>.
@
@ not in, includes, does



#### String - Contains Alpha Only

<cb>= <v>string_1<>.isalpha()<>

Returns <c>True<> if consisting entirely of alphabet characters.
Includes international characters.
Returns <c>False<> for numbers, symbols, emojis, or whitespace characters.
@
@ is, .isalpha(), alphabet characters, ischaracter



#### String - Contains Digits Only

<cb>= <v>string_1<>.isdigit()<>


Returns <c>True<> when all characters are from 0 to 9.
Returns <c>False<> for <c>+<> or <c>-<>
@
@ is, .isdigit(), numbers




#### String - Ends With?

<cb>= <v>string_1<>.endswith(<v>test_value<>)<>

Returns: <c>bool<>


Returns <c>True<> if <c><v>string_1<><> ends with or equals <c><v>test_value<><>.
@
@ .endswith()



#### String - Find

<cb>= <v>string_1<>.find(<v>search_value<>)<>

<cb>= <v>string_1<>.find(<v>search_value<>, <v>start<>)<>

<cb>= <v>string_1<>.find(<v>search_value<>, <v>start<>, <v>end<>)<>

Returns: <c>integer<>

If -1 is returned then no match was found.
@
@ search, position, index, .find()



#### String - Find Last

<cb>= <v>string_1<>.rfind(<v>search_value<>)<>

Returns: <c>integer<>

If -1 is returned then no match was found.
@
@ search, position, end, right .rfind()



#### String - Get Character

<cb>= <v>string_1<>[<v>position<>]<>

Example:

<cb><v>character_2<> = "<v>012345<>"[2]

<#># Returns "2"<><>



#### String - Is Blank?

<cb>= not <v>string_1<> or <v>string_1<>.isspace()<>

<cb>if not <v>string_1<> or <v>string_1<>.isspace():
	<v>...<><>


Returns <c>True<> for <c>None<> or <c>""<> or is all whitespace.
@
@ None, whitespaces, white spaces, .isspace()



#### String - Is Empty?

<cb>= not <v>string_1<><>

<cb>if not <v>string_1<>:
	<v>...<><>


Returns <c>True<> for <c>None<> or <c>""<>.
@
@ None, not



#### String - Not Empty?

<cb>= (<v>string_1<> != None and <v>string_1<> != "")<>

<cb>if <v>string_1<> != None and <v>string_1<> != "":
	<v>...<><>


Returns <c>False<> for <c>None<> or <c>""<>.


A bit messy.
There isn't a clean Pythonic way to do this.
I recommend making a function like this:

<cb>def not_empty(<v>value<>):
	return <v>value<> != None and <v>value<> != ""<>

Then call like this:

<cb>if not_empty(<v>string_1<>):
	<v>...<><>
@
@ Size, None



#### String - Is Equal?

<cb>= <v>string_1<> == <v>string_2<><>

<cb>if <v>string_1<> == <v>string_2<>:
	<v>...<><>


Example:

<cb>if <v>"a"<> == <v>"b"<>:
	print("Equal")
else:
	print("Not Equal")<>
@
@ Equals, Compares, Not, ==, identical



#### String - Not Equal?

<cb>= <v>string_1<> != <v>string_2<><>

<cb>if <v>string_1<> != <v>string_2<>:
	<v>...<><>


Example:

<cb>if <v>"a"<> != <v>"b"<>:
	print("Not Equal")
else:
	print("Equal")<>
@
@ Equals, Compares, Not, !=



#### String - Is Equal, Ignore Case?

<cb>= <v>string_1<>.casefold() == <v>string_2<>.casefold()<>

<cb>if <v>string_1<>.casefold() == <v>string_2<>.casefold():
	<v>...<><>


<c>casefold()<> is the correct way to compare strings caselessly.
This is especially true for unicode strings.
<c>casefold()<> convents the string to a safe case agnostic form.


Example:

<cb>if <v>"stoß"<>.casefold() == <v>"STOSS"<>.casefold():
	print("Equal")
else:
	print("Not Equal")

<#># These Are Equal<><>
@
@ Equals, Compares, Not, ==, identical, .casefold(), caseless



#### String - Not Equal, Ignore Case?

<cb>= <v>string_1<>.casefold() != <v>string_2<>.casefold()<>

<cb>if <v>string_1<>.casefold() != <v>string_2<>.casefold():
	<v>...<><>


<c>casefold()<> is the correct way to compare strings caselessly.
This is especially true for unicode strings.
<c>casefold()<> convents the string to a safe case agnostic form.

Example:

<cb>if <v>"stoß"<>.casefold() != <v>"STOSS"<>.casefold():
	print("Not Equal")
else:
	print("Equal")

<#># These Are Equal<><>
@
@ Equals, Compares, Not, !=, .casefold(), caseless



#### String - Is Integer

<cb>from re import match

def is_int(<v>value<>):
	return match(r"^[+-]?\d+$", <v>value<>) is not None<>

<cb>= is_int(<v>string_1<>)<>


Works for any integer including those with plus or minus.
@
@ .isint(), .isinteger(), is_int(), an, check



#### String - Iterate Over Characters

<cb>for <v>character<> in <v>string_1<>:
	<v>...<><>

Iterates over <c><v>string_1<><> one character at a time.
@
@ for loop, in, chars, iterating



#### String - Compare?

Is Less Than?:

<cb>= <v>string_1<> < <v>string_2<><>

Is Greater Than?:

<cb>= <v>string_1<> > <v>string_2<><>


Example:

<cb>if <v>"a"<> < <v>"b"<>:
	print("Less Than")
else:
	print("Not Less Than")<>
@
@ Is Less Than, Is Greater Than, <, <=, >, >=



#### String - Join

<cb>= <v>separator<>.join(<v>iterable<>)<>

Joins all elements of <c><v>iterable<><> into 1 string with <c><v>separator<><> between each element.


Example:

<cb><v>list_1<> = ['<v>a<>', '<v>b<>', '<v>c<>']
<v>string_1<> = '<v>, <>'.join(<v>list_1<>)          <#># Returns 'a, b, c'<><>
@
@ .join()



#### String - Length

<cb>= len(<v>string_1<>)<>
@
@ Size, Count, len()



#### String - Pad Right

<cb>= <v>string_1<>.ljust(<v>width<>)                 <#># Pad With Spaces<><>

<cb>= <v>string_1<>.ljust(<v>width<>, <v>fill_char<>)<>

Pads <c><v>string_1<><> to the given width.
Pads with <c><v>fill_char<><>, or spaces if not given.
@
@ Left Justify, .ljust(), end



#### String - Pad Left

<cb>= <v>string_1<>.rjust(<v>width<>)                 <#># Pad With Spaces<><>

<cb>= <v>string_1<>.rjust(<v>width<>, <v>fill_char<>)<>

Pads <c><v>string_1<><> on the left to the given width.
Pads with <c><v>fill_char<><>, or spaces if not given.
@
@ Right Justify, .rjust(), start



#### String - Repeat

<cb>= <v>string_1<> * <v>count<><>

Returns <v>string_1<> repeated <v>count<> times.


Example:

<cb><v>ten_asterisks<> = "*" * 10              <#># Returns "**********"<><>
@
@ *, Multiply, Multiple, expand, .repeat()



#### String - Replace

<cb>= <v>string_1<>.replace(<v>search_value<>, <v>replacement_value<>)<>
@
@ Update, Modify, Change, .replace(), substitute



#### String - Split

<cb>= <v>string_1<>.split(<v>split_string<>)<>

<cb>= <v>string_1<>.split(<v>split_string<>, <v>split_count<>)<>

Returns a list of strings split on <c><v>split_string<><>.
<c><v>split_string<><> is not returned in the results.
Stops after splitting <c><v>split_count<><> times if given.



Examples:

<cb><v>string_1<> = "<v>ab/cd/ef<>"

<v>split<> = <v>string_1<>.split("<v>/<>")
<#># Returns ['ab', 'cd', 'ef']<><>

<cb><v>string_1<> = "<v>ab/cd/ef<>"

<v>split<> = <v>string_1<>.split("<v>/<>", 1)
<#># Returns ['ab', 'cd/ef']<><>

<cb><v>string_1<> = "<v>abcd<>"

<v>split<> = <v>string_1<>.split("<v>/<>")
<#># Returns ['abcd']<><>

<cb><v>string_1<> = "<v>abcd/<>"

<v>split<> = <v>string_1<>.split("<v>/<>")
<#># Returns ['abcd', '']<><>

<cb><v>string_1<> = "<v>/abcd<>"

<v>split<> = <v>string_1<>.split("<v>/<>")
<#># Returns ['', 'abcd']<><>

<cb><v>string_1<> = "<v>ab//cd<>"

<v>split<> = <v>string_1<>.split("<v>/<>")
<#># Returns ['ab', '', 'cd']<><>
@
@ split start, split left side, .split(), delimiter, separate



#### String - Split From End

<cb>= <v>string_1<>.rsplit(<v>split_string<>)<>

<cb>= <v>string_1<>.rsplit(<v>split_string<>, <v>split_count<>)<>

Returns a list of strings split on <c><v>split_string<><> starting from the end.
<c><v>split_string<><> is not returned in the results.
Stops after splitting <c><v>split_count<><> times if given.


Example:

<cb><v>string_1<> = "<v>ab/cd/ef<>"
<v>split_1<> = <v>string_1<>.rsplit("<v>/<>", 1)            <#># Returns ['ab-cd', 'ef']<><>
@
@ split right side, .rsplit(), delimiter



#### String - Split / Partition

<cb>= <v>string_1<>.partition("<v>partition_string<>")<>


Returns: <c>tuple<>


Splits the string into 3 parts: before partition, partition and after partition.
If the partition can't be found, returns the string followed by two empty strings.
Splits at the first match only.


Examples:

<cb><v>partition1<> = "<v>aaa/bbb<>".partition("<v>/<>")

<#># Returns ('aaa', '/', 'bbb')<><>

<cb><v>partition1<> = "<v>aaa bbb<>".partition("<v>/<>")

<#># Returns ('aaa bbb', '', '')<><>
@
@ .partition()



#### String - Split On Newline

<cb>= <v>string_2<>.splitlines()<>

Returs: <c>list<>


Returns a list of strings split by newline.


Example:

<cb>lines = 'one\\ntwo\\nthree'.splitlines()

<#># Returns ['one', 'two', 'three']<><>
@
@ .splitlines(), new line, line break., lines, by



#### String - Starts With?

<cb>= <v>string_1<>.startswith(<v>test_value<>)<>

Returns: <c>bool<>


Returns <c>True<> if <c><v>string_1<><> begins with or equals <c><v>test_value<><>.
@
@ Begins, .startswith(), Starting



#### String - Strip

<cb>= <v>string_1<>.strip()<>

Removes all whitespace characters from the beginning and end of the string.
@
@ trim, remove, delete, whitespaces, white spaces, .strip()



#### String - Strip Left

<cb>= <v>string_1<>.lstrip()<>

Removes all whitespace characters at the start of the string.
@
@ trim, remove, whitespaces, white spaces, start, .lstrip(), spaces, delete



#### String - Strip Right

<cb>= <v>string_1<>.rstrip()<>

Removes all whitespace characters at the end of the string.
@
@ trim, remove, whitespaces, white spaces, end, .rstrip(), spaces, delete



#### String - Substring

<cb>= <v>string_1<>[<v>index<>]

= <v>string_1<>[<v>start<>:<v>end_plus_1<>]

= <v>string_1<>[:<v>end_plus_1<>]<>


See Also: <l "/s/python?search=slice+sequence">Slicing Sequences<>


Examples:

<cb><v>string_1<> = "<v>12345<>"

<v>first<> = <v>string_1<>[0]                     <#># Returns '1'<>

<v>last<> = <v>string_1<>[-1]                     <#># Returns '5'<>

<v>index_1<> = <v>string_1<>[1]                   <#># Returns '2'<>

<v>index_1_to_3<> = <v>string_1<>[1:4]            <#># Returns '234'<>

<v>index_1_to_end<> = <v>string_1<>[1:]           <#># Returns '2345'<>

<v>start_to_index_3<> = <v>string_1<>[:4]         <#># Returns '1234'<><>
@
@ Partial, Slice, .substring(), []



#### String - Substring - Left

<cb>= <v>string_1<>[:<v>length_plus_1<>]<>


Example:

<cb><v>string_1<> = "12345"

<v>substring<> = <v>string_1<>[:3]

<#># Returns "123"<><>
@
@ Start, Beginning, slice, partial, .left(), []


 
#### String - Substring - Right

<cb>= <v>string_1<>[<v>start<>:]<>


Example:

<cb><v>string_1<> = "12345"

<v>substring<> = <v>string_1<>[2:]

<#># Returns "345"<><>
@
@ Last, End, slice, partial, .right(), []



#### String - Substring - Remove Prefix

<cb>= <v>string_1<>.removeprefix(<v>prefix_1<>)<>


Removes the prefix but only if it is present.
No prefix returns the original string.

Python Version: 3.9+


Example:

<cb><v>string_1<> = 'https://speedsheet.io'

<v>substring<> = <v>string_1<>.removeprefix("https://")

<#># Returns 'speedsheet.io'<><>
@
@ partial, .removeprefix()
@ delete, start, beginning



#### String - Substring - Remove Suffix

<cb>= <v>string_1<>.removesuffix(<v>prefix_1<>)<>


Removes the suffix but only if it is present.
No suffix returns the original string.

Python Version: 3.9+


Example:

<cb><v>string_1<> = 'file_name.txt'

<v>substring<> = <v>string_1<>.removesuffix(".txt")

<#># Returns 'file_name'<><>
@
@ Postfix, .removesuffix()
@ end, delete



#### String - Word Count

<cb>= len(<v>string_1<>.split())<>


Example:

<cb><v>words<> = '<v>one two three<>'

<v>count<> = len(<v>words<>.split())

<#># Returns 3<><>



#### String - To Capitalized Case

<cb>= <v>string_1<>.capitalize()<>


Changes the first letter to upper case.


Example:

<cb><v>text<> = '<v>one two three<>'

<v>capitalized<> = <v>text<>.capitalize()

<#># Returns 'One two three'<><>
@
@ .capitalize(), caps, convert, conversion


 
#### String - To Lower Case

<cb>= <v>string_1<>.lower()<>


Converts every letter to lower case.


Example:

<cb><v>text<> = '<v>One TWO three<>'

<v>lower_case<> = <v>text<>.lower()

<#># Returns 'one two three'<><>
@
@ .lower(), .tolower(), lowercase, convert, conversion



#### String - To Title Case

<cb>= <v>string_1<>.title()<>


Capitalizes the first letter in every word.


Example:

<cb><v>text<> = '<v>one two three<>'

<v>title_case<> = <v>text<>.title()

<#># Returns 'One Two Three'<><>
@
@ .title(), convert, conversion



#### String - To Upper Case

<cb>= <v>string_1<>.upper()<>


Converts every letter to upper case.


Example:

<cb><v>text<> = '<v>one two three<>'

<v>upper_case<> = <v>text<>.upper()

<#># Returns 'ONE TWO THREE'<><>
@
@ .upper(), .toupper(), caps, uppercase, convert, conversion



#### String - Fold Case

<cb>= <v>string_1<>.casefold()<>


Use this when you need to compare two strings but ignore the case (caseless).

Converts the string into a safe case agnostic form.
This is very important for unicode characters.

Why?
Because case rules (uppercase, lowercase) can get complicated, especially in foreign languages.
Some languages have more than one case or special rules for when a particular form of letter should be used.


Example:

<cb><v>case_folded<> = '<v>Ὀδυσσεύς<>'.casefold()

<#># Returns 'ὀδυσσεύσ'<><>


In Depth:

<cb><#># Helper Function:<>

def print_cases(text):
	print("Original:   ", text)
	print("Upper:      ", text.upper())
	print("Lower:      ", text.lower())
	print("Folded:     ", text.casefold())<>

<cb><#># German Letter SS/ß<>

print_cases("<v>Hegelstraße<>")

<#>\#  Original:   Hegelstraße
\#  Upper:      HEGELSTRASSE
\#  Lower:      hegelstraße
\#  Folded:     hegelstrasse<><>


<cb><#># Greek Letter Σ/σ/ς<>

print_cases("<v>Ὀδυσσεύς<>")

<#>\#  Original: Ὀδυσσεύς
\#  Upper:    ὈΔΥΣΣΕΎΣ
\#  Lower:    ὀδυσσεύς
\#  Folded:   ὀδυσσεύσ<><>
@
@ .casefold(), case folding, compare strings unicode



#### String - To Words

<cb>= <v>string_1<>.split()<>


Returns: <c>list<>


Splits the string along whitespaces.
@
@ .split(), whitespaces, white spaces, convert



#### String - From List

<cb>= ''.join(<v>list1<>)<>

Joins all elements of <c><v>list1<><> into 1 string.


Example:

<cb><v>list_1<> = ['<v>1<>', '<v>2<>', '<v>3<>', '<v>4<>']

<v>string_1<> = ''.join(<v>list_1<>)

<#># Returns: '1234'<><>
@
@ convert to, conversion, characters, .join()
@ from-list, to-string



#### String - To List

<cb>= [<v>character<> for <v>character<> in <v>string_1<>]<>


Returns: <c>list<> of <c>str<>


Converts a string to a list of characters.


Example:

<cb><v>string_1<> = '<v>abc<>'

<v>list_1<> = [<v>character<> for <v>character<> in <v>string_1<>]

<#># Returns: ['a', 'b', 'c']<><>
@
@ convert from, conversion, characters, from, chars
@ from-string, to-list



#### String Character - From ASCII Code

<cb>= chr(<v>ascii_code<>)<>

Example:

<cb><v>string_1<> = chr(67)                        <#># Returns 'C'<><>
@
@ Convert, Conversion, To, Character, chr()



#### String Character - To ASCII Code

<cb>= ord(<v>string_char<>)<>

<c><v>string_char<><> must be a single letter string.


Example:

<cb><v>ascii_code<> = ord("<v>C<>")

<#># Returns 67<><>
@
@ convert, conversion, from, character, ord(), value
@ from-string, to-ascii



#### String List - Longest String

<cb>= max(<v>string_list<>, key = len)<>
@
@ strings, max()



#### String List - Max Length

<cb>= max(len(<v>string<>) for <v>string<> in <v>string_list<>)<>
@
@ strings, max(), greatest



# Date

<cb>from datetime import date

= date.today()
= date(<v>year<>, <v>month<>, <v>day<>)<>


Example:

<cb>from datetime import date

<v>date_1<> = date.today()
<v>date_2<> = date(<v>2000<>, <v>1<>, <v>2<>)<>
@
@ date-only, dates-only, .today(), .date(), datetime.date, date.
@ create, define, instantiate, new, now, current, data type



# Date Operations
@
@ date-only, dates-only, date.
@ ops, .date(), datetime.date, .today(), date.



#### Date - Compare

<cb>if <v>date_1<> == <v>date_2<>:
	<v>...<><>

<cb>if <v>date_1<> \< <v>date_2<>:
	<v>...<><>
@
@ less than, greater than, equals, ==, \<, \</, >, >=, !=



#### Date - Difference, Get TimeDelta

<cb>= <v>date_2<> - <v>date_1<><>

Returns: <c>timedelta<>

Returns the difference in days.
@
@ minus, subtraction, timedelta



#### Date - Add TimeDelta

<cb>= <v>date_1<> + <v>timedelta_2<><>

Returns: <c>date<>

Adds the day portion of <c><v>timedelta_2<><> to <c><v>date_1<><>.
@
@ time delta, +, plus



#### Date - Subtract TimeDelta

<cb>= <v>date_1<> - <v>timedelta_2<><>

Returns: <c>date<>

Subtracts the day portion of <c><v>timedelta_2<><> to <c><v>date_1<><>.
@
@ time delta, -, minus



#### Date - Get Now

<cb>from datetime import date

= date.today()<>
@
@ today, current, now, .today()



#### Date - To Year

<cb>= <v>date_1<>.year<>
@
@ Property, Properties, .years



#### Date - To Month

<cb>= <v>date_1<>.month<>
@
@ Property, Properties, .months



#### Date - To Day

<cb>= <v>date_1<>.day<>
@
@ Property, Properties, .days



#### Date - To Day of Week

<cb>= <v>date_1<>.weekday()<>


Returns: <c>int<>

That is <c>.weekday()<> with a ().

0 is Monday.
6 is Sunday.
@
@ Property, Properties, .weekday()



#### Date - From Timestamp

<cb>from datetime import date

<v>date_1<> = date.fromtimestamp(<v>timestamp_1<>)<>
@
@ Convert, Conversion, To, datetime.date, date.fromtimestamp(), .fromtimestamp()
@ from-date, to-timestamp



#### Date - From String

<cb>from datetime import datetime

<v>date_1<> = datetime.strptime(<v>date_string<>, <v>date_format<>).date()<>


You must convert to a datetime first, then to a date.


Example:

<cb>from datetime import datetime

<v>date_2<> = datetime.strptime(<v>"2000-01-02"<>, "<v>%Y-%m-%d<>").date()<>
@
@ date.strptime(), .strptime()
@ convert, conversion, to, from, parse
@ to-date, from-string



#### Date - To String

<cb>= '{:<v>date_format<>}'.format(<v>date_1<>)<>

or

<cb>= <v>date_1<>.strftime(<v>format<>)<>


Example:

<cb>from datetime import date

<v>date_1<> = date(2001, 1, 1)

<#># These are equivalent:<>

<v>string_1<> = ':%Y-%m-%d'.format(<v>date_1<>)
<v>string_2<> = <v>date_1<>.isoformat()
<v>string_3<> = <v>date_1<>.strftime(<v>'%Y-%m-%d'<>)

<#># Returns '2001-01-01'<><>
@
@ Convert, Conversion, To, From, Format, Formatting, Formatted, .format(), .strftime()
@ from-date, to-string



#### Date - From ISO-8601 String

<cb>from datetime import date

<v>date_1<> = date.fromisoformat(<v>iso_date_string<>)<>


Accepted Format:

<cb>'<v>YYYY<>-<v>MM<>-<v>DD<>'<>


Example:

<cb>from datetime import date

<v>date_1<> = date.fromisoformat(<v>"2000-01-02"<>)<>

<cb>from datetime import date
from datetime import datetime

<#># These are equivalent:<>

<v>date_1<> = date.fromisoformat(<v>"2000-01-02"<>)
<v>date_2<> = datetime.strptime(<v>"2000-01-02"<>, "<v>%Y-%m-%d<>").date()<>
@
@ date.fromisoformat(), .fromisoformat()
@ convert, conversion, to, from, parse
@ to-date, from-string, from-iso-8601, iso-8601



#### Date - To ISO-8601 String

<cb>= <v>date_1<>.isoformat()<>


Returned Format:

<cb>'<v>YYYY<>-<v>MM<>-<v>DD<>'<>


Example:

<cb>from datetime import date

<v>date_1<> = date(2001, 1, 1)

<v>string_1<> = <v>date_1<>.isoformat()

<#>Returns '2001-01-01'<><>

<cb>from datetime import date

<v>date_1<> = date.today()

<#># These are equivalent:<>

<v>string_1<> = <v>date_1<>.isoformat()
<v>string_2<> = <v>date_1<>.strftime(<v>'%Y-%m-%d'<>)
<v>string_3<> = ':%Y-%m-%d'.format(<v>date_1<>)<>
@
@ Convert, Conversion, To, From, Format, Formatting, Formatted, .format()
@ iso-8601, date.isoformat(), .isoformat(), .strftime()
@ from-date, to-string



# DateTime

<cb>from datetime import datetime

= datetime.today()
= datetime(<v>year<>, <v>month<>, <v>day<>, <v>hour<>, <v>minute<>, <v>second<>)
= datetime(<v>year<>, <v>month<>, <v>day<>, <v>hour<>, <v>minute<>, <v>second<>, <v>microsecond<>)<>


Month           1 - 12
Day             1 - Last-Day-Of-Month
Hour            1 - 23
Minute          1 - 59
Second          1 - 59
Microseconds        0 - 999,999


Example:

<cb>from datetime import datetime

<v>date_1<> = datetime.today()
<v>date_2<> = datetime(<v>2000<>, <v>11<>, <v>28<>, <v>23<>, <v>59<>, <v>59<>)<>
@
@ datetime, date times, datetime-only, datetimes-only, date-time-only, date-times-only, dt
@ datetime.datetime, .datetime(), datetime.today(), .today()
@ create, define, instantiate, new, now, current, data type



# DateTime - Operations
@
@ datetime, Date Times, datetime-only, datetimes-only, date-time-only, date-times-only, DT
@ Ops, datetime.datetime, .datetime()



#### DateTime - Compare

<cb>if <v>datetime_1<> == <v>datetime_2<>:
	<v>...<><>

<cb>if <v>datetime_1<> \< <v>datetime_2<>:
	<v>...<><>
@
@ Less Than, Greater Than, Equals, ==, \<, \</, >, >=, !=



#### DateTime - Difference, Get TimeDelta

<cb>= <v>datetime_2<> - <v>datetime_1<><>

Returns: <c>timedelta<>
@
@ -, Subtract, Minus, subtraction, timedelta



#### DateTime - Add TimeDelta

<cb>= <v>datetime_1<> + <v>time_delta_1<><>

Returns: <c>datetime<>
@
@ addition, timedelta, +



#### DateTime - Subtract TimeDelta

<cb>= <v>datetime_1<> - <v>time_delta_1<><>

Returns: <c>datetime<>
@
@ timedelta, -, minus, subtraction



#### DateTime - Get Now

<cb>from datetime import datetime

= datetime.today()<>
@
@ current, datetime.today(), .today()



#### DateTime - To Year

<cb>= <v>datetime_1<>.year<>
@
@ property, properties



#### DateTime - To Month

<cb>= <v>datetime_1<>.month<>
@
@ property, properties, .months



#### DateTime - To Day

<cb>= <v>datetime_1<>.day<>
@
@ property, properties, .days



#### DateTime - To Day of Week

<cb>= <v>datetime_1<>.weekday()<>


Returns: <c>int<>

Yes, this is <c>.weekday()<> with a <c>()<>.

0 is Monday.
6 is Sunday.
@
@ property, properties, .weekday()



#### DateTime - To Hour

<cb>= <v>datetime_1<>.hour<>
@
@ property, properties, .hours



#### DateTime - To Minute

<cb>= <v>datetime_1<>.minute<>
@
@ property, properties, .minutes



#### DateTime - To Second

<cb>= <v>datetime_1<>.second<>
@
@ property, properties, .seconds



#### DateTime - To Date

<cb>= <v>datetime_1<>.date()<>
@
@ convert, conversion, from, .date()
@ from-datetime, to-date



#### DateTime - To Time

<cb>= <v>datetime_1<>.time()<>
@
@ convert, conversion, from, .time()
@ from-datetime, to-time



#### DateTime - From Timestamp

<cb>from datetime import datetime

<v>datetime_1<> = datetime.fromtimestamp(<v>timestamp_1<>)<>


Get the datetime for the given timestamp or epoch time (the number of seconds since 1969-12-31 19:00:00).



Example:

<cb><v>datetime_1<> = datetime.fromtimestamp(<v>0<>)

<#># Returns 1969-12-31 19:00:00<><>

<cb><v>datetime_1<> = datetime.fromtimestamp(<v>978325200<>)

<#># Returns 2001-01-01 00:00:00<><>

<cb><v>datetime_1<> = datetime.fromtimestamp(<v>978325200.5<>)

<#># Returns 2001-01-01 00:00:00:500000<><>
@
@ Convert, Conversion, To, datetime.fromtimestamp(), .fromtimestamp()
@ to-datetime, from-timestamp



#### DateTime - To TimeStamp

<cb><v>timestamp_1<> = <v>datetime_1<>.timestamp()<>

Or

<cb>from datetime import datetime

<v>timestamp_1<> = datetime.timestamp(<v>datetime_1<>)<>


Returns: <c>float<>


Returns the timestamp or epoch time in seconds.


Example:

<cb>from datetime import datetime

<v>datetime_1<> = datetime(2001, 1, 1)

<v>timestamp_1<> = <v>datetime_1<>.timestamp()

<#># Returns 978325200.0.<><>
@
@ convert, conversion, from, datetime.timestamp(), .timestamp()
@ from-datetime, to-timestamp



#### DateTime - From String

<cb>from datetime import datetime

<v>datetime_1<> = datetime.fromisoformat(<v>iso_date_time_string<>)<>

or

<cb><v>datetime_2<> = datetime.strptime(<v>date_time_string<>, <v>date_time_format<>)<>


Example:

<cb>from datetime import datetime

<#># These are equivalent:<>

<v>date_1<> = datetime.fromisoformat("<v>2020-11-30 23:59:59<>")
<v>date_2<> = datetime.strptime("<v>2020-11-30 23:59:59<>", '<v>%Y-%m-%d %H:%M:%S<>')<>
@
@ convert, conversion, to,datetime.strptime(), .strptime(), parse
@ to-datetime, from-string



#### DateTime - To String

<cb>= <v>datetime_1<>.strftime(<v>datetime_1<>)<>


Example:

<cb>from datetime import datetime

<v>datetime_1<> = datetime(2001, 1, 1, 1, 1, 1)

<v>formatted_datetime<> = '{:<v>%Y-%m-%d %H:%M:%S<>}'.format(<v>datetime_1<>)

<#># Returns '2001-01-01 01-01-01'<><>
@
@ convert, conversion, to, from, .format(), formatting, formatted, .strftime()
@ from-datetime, to-string



#### DateTime - From ISO-8601 String

<cb>from datetime import datetime

<v>datetime_1<> = datetime.fromisoformat(<v>iso_date_time_string<>)<>


Accepted Formats:

<cb>'<v>YYYY<>-<v>MM<>-<v>DD<> <v>hh<>:<v>mm<>:<v>ss<>'
'<v>YYYY<>-<v>MM<>-<v>DD<>T<v>hh<>:<v>mm<>:<v>ss<>'<>


Example:

<cb>from datetime import datetime

<v>date_1<> = datetime.fromisoformat("<v>2020-11-30 23:59:59<>")<>

<cb>from datetime import datetime

<#># These are equivalent:<>

<v>date_1<> = datetime.fromisoformat("<v>2020-11-30 23:59:59<>")
<v>date_2<> = datetime.strptime("<v>2020-11-30 23:59:59<>", '<v>%Y-%m-%d %H:%M:%S<>')<>
@
@ convert, conversion, to, datetime.fromisoformat(), .fromisoformat(), parse, iso
@ to-datetime, from-string, from-iso-8601



#### DateTime - To ISO-8601 String

<cb>= <v>datetime_1<>.isoformat()<>


Returns Format:

<cb>'<v>YYYY<>-<v>MM<>-<v>DD<>T<v>HH<>:<v>MM<>:<v>SS<>'<>

<cb>'<v>YYYY<>-<v>MM<>-<v>DD<>T<v>HH<>:<v>MM<>:<v>SS<>.<v>ssssss<>'<>


Example:

<cb>from datetime import datetime

<v>datetime_1<> = datetime(2001, 1, 1, 1, 1, 1)

<v>formatted_datetime<> = <v>datetime_1<>.isoformat()

<#># Returns '2001-01-01T01:01:01'<><>

<cb>from datetime import datetime

<v>datetime_1<> = datetime(2001, 1, 1, 1, 1, 1, 500)

<v>formatted_datetime<> = <v>datetime_1<>.isoformat()

<#># Returns '2001-01-01T01:01:01.000500'<><>
@
@ convert, conversion, to, from, .format(), formatting, formatted, .isoformat(), .strftime(), iso
@ iso-8601
@ from-datetime, to-string, to-iso-8601



# Timestamp

<cb>= <u>seconds_since_epoch<><>

<cb>from time import time()

= time()<>


Returns: <c>float<>


Returns the number of seconds in Unix Time or Epoch Time.
Measures from the Epoch, January 1, 1970, at 00:00:00 UTC.


Example:

<cb>Set to 2001-01-01 00:00:00:

<v>timestamp_1<> = <v>978325200<><>
@
@ epoch time, unix time
@ time-only, timestamp-only, timestamp., timestamp(), time.time(), .time()



# Timestamp - Operations
@
@ epoch time, unix time
@ time-only, timestamp-only, timestamp., timestamp(), time.time(), .time()



### Timestamp - From Datetime

<cb>= <v>datetime_1<>.timestamp()<>
@
@ convert, datetime.timestamp(), .timestamp()



### Timestamp - To Datetime

<cb>= datetime.datetime.fromtimestamp(<v>timestamp_1<>)<>
@
@ convert, datetime.fromtimestamp(), .fromtimestamp()



### Timestamp - To String

<cb>from time import strftime
from time import localtime

= strftime("<v>format<>", localtime(<v>timestamp_1<>))<>

or

<card>Convert to a <c>datetime<> and then format.<>


Example:

<cb>from time import strftime
from time import localtime

<v>timestamp_2001<> = <v>978325200<>
<v>formatted<> = = strftime("<v>%Y-%m-%d %H:%M:%S<>", localtime(<v>timestamp_2001<>))<>
@
@ convert, time.strftime(), .strftime(), time.localtime(), .localtime()



# TimeDelta

<cb>from datetime import timedelta

= timedelta(<v>unit<> = <v>value<>)<>

<cb>= timedelta(<v>unit<> = <v>value<>, <v>unit<>=<v>value<> <v>...<>)<>

<cb>= timedelta(
		weeks=<v>weeks_value<>,
		days=<v>days_value<>,
		hours=<v>hours_value<>,
		minutes=<v>minutes_value<>,
		seconds=<v>seconds_value<>,
		microseconds=<v>microseconds_value<>,
		milliseconds=<v>milliseconds_value<>)<>

<cb><v>timedelta_3<> = <v>datetime_1<> - <v>datetime_2<><>


Stores a duration in time as days and seconds.


Examples:

<cb>from datetime import timedelta

<v>timedelta_1<> = timedelta(seconds=<v>10<>)
<v>timedelta_2<> = timedelta(days=<v>4<>, hours=<v>3<>, minutes=<v>2<>, seconds=<v>1<>)<>
@
@ datetime.timedelta, time deltas, timedelta-only, timedeltas-only, time-delta-only, time-deltas-only
@ create, define, instantiate, new, .timedelta(), data type, duration



# TimeDelta - Operations
@
@ datetime.timedelta, time deltas, timedelta-only, timedeltas-only, time-delta-only, time-deltas-only
@ .timedelta(), data type, duration



#### TimeDelta - Get Microseconds

<cb>= <v>timedelta_1<>.microseconds<>


Returns: <c>int<>



#### TimeDelta - Get Seconds

<cb>= <v>timedelta_1<>.seconds<>


Returns: <c>int<>


Returns the number of seconds for the portion less than a day.


Example:

<cb>from datetime import timedelta

<v>timedelta_1<> = timedelta(days = 2, hours = 1, seconds = 15)

<v>seconds<> = <v>timedelta_1<>.seconds

<#># Returns 3615 Seconds (1 hour * 3600 + 15 seconds)<><>



#### TimeDelta - Get Days

<cb>= <v>timedelta_1<>.days<>


Returns: <c>int<>


Returns the number of days for the timedelta.


Example:

<cb>from datetime import timedelta

<v>timedelta_1<> = timedelta(days = 2, hours = 1, seconds = 15)

<v>days<> = <v>timedelta_1<>.days

<#># Returns 2<><>



#### TimeDelta - Get Total Seconds

<cb>= <v>timedelta_1<>.total_seconds()<>


Returns: <c>float<>


Returns the timedelta in seconds.
Returns fraction of a second too.
@
@ .total_seconds(), total_seconds(), entire



#### TimeDelta - Is Equal?

<cb>= <v>timedelta_1<> == <v>timedelta_2<><>



#### TimeDelta - Compares?

Is Less Than:

<cb>= <v>timedelta_1<> < <v>timedelta_2<><>

Is Greater Than:

<cb>= <v>timedelta_1<> > <v>timedelta_2<><>
@
@ is less than, is greater than, <, <=, >, >=



#### TimeDelta - Absolute Value

<cb>= abs(<v>timedelta_1<>)<>
@
@ abs()



#### TimeDelta - Add

<cb>= <v>timedelta_1<> + <v>timedelta_2<><>

<cb><v>timedelta_1<> += <v>timedelta_2<><>


Returns: <c>timedelta<>


Adds 2 timedeltas together.


Example:

<cb>from datetime import timedelta

<v>timedelta_1<> = timedelta(minutes = 1)
<v>timedelta_2<> = timedelta(seconds = 15)

<v>added<> = <v>timedelta_1<> + <v>timedelta_2<>

<#># Returns 1 Minute 15 Seconds TimeDelta<><>
@
@ combine, +, +=



#### TimeDelta - Subtract

<cb>= <v>timedelta_1<> - <v>timedelta_2<><>

<cb><v>timedelta_1<> -= <v>timedelta_2<><>


Returns: <c>timedelta<>


Subtracts a timedelta from another.


Example:

<cb>from datetime import timedelta

<v>timedelta_1<> = timedelta(minutes = 1)
<v>timedelta_2<> = timedelta(seconds = 15)

<v>subtracted<> = <v>timedelta_1<> - <v>timedelta_2<>

<#># Returns a 45 Second TimeDelta<><>
@
@ minus, -, -=



#### TimeDelta - Divide By TimeDelta

<cb>= <v>timedelta_1<> / <v>timedelta_2<><>


Returns: <c>float<>


Divides a timedelta by another.


Example:

<cb>from datetime import timedelta

<v>timedelta_1<> = timedelta(minutes = 1)
<v>timedelta_2<> = timedelta(seconds = 15)

<v>subtracted<> = <v>timedelta_1<> / <v>timedelta_2<>

<#># Returns 4<><>
@
@ /



#### TimeDelta - Divide By Int / Float

<cb>= <v>timedelta_1<> / <v>int_2<><>

<cb>= <v>timedelta_1<> / <v>float<><>


Returns: <c>timedelta<>


Divides a timedelta by an integer or float.


Example:

<cb>from datetime import timedelta

<v>timedelta_1<> = timedelta(minutes = 1)

<v>subtracted<> = <v>timedelta_1<> / 4

<#># Returns timedelta(seconds = 15)<><>
@
@ /



#### TimeDelta - To String

<cb>= str(<v>timedelta_1<>)<>


Formatting with <c>.format()<> or f"" is not an option.
@
@ from, convert, from-timedelta, to-string



#### TimeDelta - To String Using Function

Function:

<cb>def <v>format_timedelta<>(<v>timedelta_1<>):

	<v>remainder<> = <v>timedelta_1<>.seconds

	<v>hours<> = int(<v>remainder<> // 3600)
	<v>remainder<> = <v>remainder<> % 3600

	<v>minutes<> = int(<v>remainder<> // 60)
	<v>seconds<> = int(<v>remainder<> % 60)

	if <v>timedelta_1<>.days > 0:
		return f"{<v>timedelta_1<>.days} days {<v>hours<>}:{<v>minutes<>:02}:{<v>seconds<>:02}"

	return f"{<v>hours<>}:{<v>minutes<>:02}:{<v>seconds<>:02}"<>

Call:

<cb>= <v>format_timedelta<>(<v>timedelta_1<>)<>



# Enum

<cb>from enum import Enum, auto

class <v>EnumName<>(Enum):
	<v>ENUM_1<> = auto()
	<v>ENUM_2<> = auto()
	<v>...<><>


<cb>from enum import Enum, auto

class <v>EnumName<>(Enum):
	<v>ENUM_1<> = <v>value_1<>
	<v>ENUM_2<> = <v>value_2<>
	<v>...<><>

<c>auto()<> is required if the Enum items don't have a value.
@
@ Definition, auto, enum.auto(), .auto(), enum.Enum
@ enum-only, enums-only, data type



# Enum Operations
@
@ enum-only, enums-only



### Enum - Assign

<cb>= <v>EnumName<>.<v>ENUM_1<><>
@
@ create, instantiate, new



### Enum - Get Name

<cb>= <v>ENUM_1<>.name<>
@
@ to string, tostring, .name



### Enum - Get Value

<cb>= <v>ENUM_1<>.value<>


Returns the numeric value of the enum (usually the enum position).
@
@ .value, index



### Enum - Is Equal?

<cb>= <v>item_1<> is <v>EnumName<>.<v>ENUM_1<><>



### Enum - From String

Define:

<cb>from enum import Enum, auto

class <v>EnumName<>(Enum):
	<v>ENUM_1<> = auto()
	<v>ENUM_2<> = auto()
	<v>...<>

	@classmethod
	def from_string(cls, <v>value<>):          <#>#1<>
		return cls.<v>_lookup<>[<v>value<>]           <#>#2<>

<v>EnumName<>.<v>_lookup<> = {                        <#>#3<>
		<v>"Enum 1a"<>: <v>EnumName<>.<v>ENUM_1<>,
		<v>"Enum 1b"<>: <v>EnumName<>.<v>ENUM_1<>,
		<v>"Enum 2a"<>: <v>EnumName<>.<v>ENUM_2<>,
		<v>"Enum 2b"<>: <v>EnumName<>.<v>ENUM_2<>}
<>

Use:

<cb>= <v>EnumName<>.from_string(<v>"Enum 1a"<>)<>

There is no built in way to do this but the example above will do it.
Implement a static method inside the <c><v>EnumName<><> class that will convert strings into enums.


\#1  <s>-<>  The static method that converts strings to Enums.

\#2  <s>-<>  Raises <c>KeyError<> if not found.

\#3  <s>-<>  Define string to enum mappings here.
@
@ convert, conversion, to, text, parse
@ to-enum, from-string



# Dict

<cb><v>dict_1<> = {}<>

<cb><v>dict_2<> = {<v>'key_1'<>: <v>'value_1'<>, <v>'key_2'<>: <v>'value_2'...<>}<>

<cb><v>dict_3<> = dict([(<v>'key_1'<>, <v>'value_1'<>), (<v>'key_2'<>, <v>'value_2'<>), <v>...<>])<>

Type: <c>dict<>


A collection of key value pairs.
Keys can be any immutable type.
Internally stored as a hash table.
@
@ dicts, dict(), dict-only, dicts-only, dictionary-only, dictionaries
@ create, define, instantiate, new, {}, }, :, {:}, empty, data type



# Dict Operations
@
@ dicts, dict-only, dicts-only, dictionary-only, dictionaries
@ ops, dict()



#### Dict - Add / Update

<cb><v>dict_1<>[<v>key<>] = <v>value<><>

Will replace <v>key<> value if key exists.
Will add <v>key<> if it does not exist.


Examples:

Add Value:

<cb><v>dict_1<> = {<v>1<>: "<v>a<>", <v>2<>: "<v>b<>"}

<v>dict_1<>[<v>3<>] = "<v>c<>"

<#># Updates To: {1: 'a', 2: 'b', 3: 'c'}<><>

Update Value:

<cb><v>dict_1<> = {<v>1<>: "<v>a<>", <v>2<>: "<v>b<>"}

<v>dict_1<>[<v>2<>] = "<v>x<>"

<#># Updates To: {1: 'a', 2: 'x'}<><>
@
@ add, put, insert, update, modify, change, item, element, value, append to




#### Dict - Add / Update From Dict

<cb><v>dict_1<>.update(<v>dict_2<>)<>


Adds or updates items from <c>dict_2<> into <c>dict_1<>.


Example:

<cb><v>dict_1<> = {<v>1<>: "<v>a<>", <v>2<>: "<v>b<>"}
<v>dict_2<> = {<v>2<>: "<v>b2<>", <v>3<>: "<v>c<>"}

<v>dict_1<>.update(<v>dict_2<>)

<#># Updates To: {1: 'a', 2: 'b2', 3: 'c'}<><>
@
@ .update(), extend, extends, join, concatenate, addall, append to



#### Dict - Dict Comprehension

<cb>= {<v>key_expression<> : <v>value_expression<> for <v>item<> in <v>sequence_1<>}<>

<cb>= {<v>key_expression<> : <v>value_expression<> for <v>item<> in <v>sequence_1<> if <v>condition<>}<>

Returns: <c>dict<>


Iterates over a sequence, performing an operation on every item.
Returns the result as <c>dict<>.


Example:

<cb><v>items<> = [1, 2, 3, 4, 5]

<v>dict_1<> = {<v>i<> : str(<v>i<>) for <v>i<> in <v>items<>}<>

With Conditional if:

<cb><v>items<> = [1, 2, 3, 4, 5]

<v>dict_1<> = {<v>i<> : str(<v>i<>) for <v>i<> in <v>items<> if <v>i<> % 2 == 0}<>
@
@ dict for in if {} :, conditional, iterating



#### Dict - Contains Key?

Contains Key?:

<cb>= <v>key_1<> in <v>dict_1<>                       <#># Preferred<><>

or

<cb>= <v>dict_1<>.has_key(<v>key_1<>)                 <#># Alternative<><>

Does Not Contain?:

<cb><v>key_1<> not in <v>dict_1<><>
@
@ has, check, exists, in, not in, .has_key(), includes



#### Dict - Contains Value?

<cb>= <v>value_1<> in <v>dict_1<>.values()<>
@
@ has, check, exists, item, element, in, includes, .values()



#### Dict - Delete

<cb>del <v>dict_1<>[<v>key_1<>]<>


Will raise an error if key is not present.
@
@ remove, element, item



#### Dict - Delete All

<cb><v>dict_1<>.clear()<>
@
@ remove, .clear(), elements, items



#### Dict - Duplicate

<cb>= <v>dict_1<>.copy()<>


Creates a shallow copy.
@
@ .copy(), shallow, clone



#### Dict - Duplicate - Deep Copy

<cb>from copy import deepcopy

= deepcopy(<v>dict_1<>)<>


Creates a deep copy.
@
@ copy, .deepcopy(), copy.deepcopy(), clone



#### Dict - Is Empty?

<cb>= not <v>dict_1<><>

<cb>if not <v>dict_1<>:
	<v>...<><>
@
@ not



#### Dict - Not Empty?

<cb>= bool(<v>dict_1<>)<>

<cb>if <v>dict_1<>:
	<v>...<><>
@
@ bool()



#### Dict - Get Keys

<cb>= <v>dict_1<>.keys()<>

As List:

<cb>= list(<v>dict_1<>.keys())<>
@
@ retrieve, all, .keys(), names



#### Dict - Get Key Value Pairs

<cb>= <v>dict_1<>.items()<>
@
@ retrieve, all, pairs, items, elements, keys, .items(), names, values



#### Dict - Get Key Value Pairs - Sorted By Key

<cb>= sorted(<v>dict_1<>.items(), <v>key<>=lambda item: item[0])<>

Returns list of key value tuples.
@
@ sorted, pairs, ordered, items, elements, .items(), sorted(), names, keys, values



#### Dict - Get Key Value Pairs - Sorted By Value

<cb>= sorted(<v>dict_1<>.items(), <v>key<>=lambda item: item[1])<>

Returns list of key value tuples.
@
@ sorted, pairs, ordered, items, elements, .items(), sorted(), names, keys, values



#### Dict - Get Value

<cb>= <v>dict_1<>[<v>key_1<>]                         <#>#1<><>

or

<cb>= <v>dict_1<>.get(<v>key_1<>)                     <#>#2<><>

or

<cb>= <v>dict_1<>.get(<v>key_1<>, <v>default_value<>)<>


\#1  <s>-<>  Preferred style.

\#1  <s>-<>  Raises <c>KeyError<> if not found.

\#2  <s>-<>  Returns <c>None<> if not found.
@
@ retrieve, item, elements, keyerror, .get()



#### Dict - Get Values

<cb>= <v>dict_1<>.values()<>


Returns: <c>dict_values<>


As List:

<cb>= list(<v>dict_1<>.values())<>
@
@ retrieve, items, elements, .values()



#### Dict - Get Values Sorted By Key

<cb>= [<v>dict_1<>[<v>key<>] for <v>key<> in sorted(<v>dict_1<>.keys())]<>
@
@ retrieve, items, elements, .values()



#### Dict - Iterate Over Keys

<cb>for <v>key<> in <v>dict_1<>:
	<v>...<><>
@
@ for, loop, foreach, each, in, iterating, names



#### Dict - Iterate Over Key, Value Pairs

<cb>for <v>key<>, <v>value<> in <v>dict_1<>.items():
	<v>...<><>
@
@ for, loop, foreach, each, in
@ items, elements, .items(), iterating, names, values



#### Dict - Iterate Over Values

<cb>for <v>value<> in <v>dict_1<>.values():
	<v>...<><>
@
@ for, loop, foreach, each, in
@ items, elements, .values(), iterating



#### Dict - Intersection

<cb>= {<v>key<> : <v>dict_1<>[<v>key<>] for <v>key<> in <v>dict_1<> if <v>key<> in <v>dict_2<>}<>

Returns: <c>dict<>


Return a dict with only those items in common between <c><v>dict_1<><> and <c><v>dict_2<><>.
@
@ dictionaries, dicts, in, conjuction



#### Dict - Merge

<cb>= dict_1 | dict_2                       <#>#1<><>

or

<cb>= {**<v>dict_1<>, **<v>dict_2<>}<>

Returns: <c>dict<>


Return a new dict with all items of <c><v>dict_1<><> and <c><v>dict_2<><>.


\#1  <s>-<>  Python 3.9+
@
@ addall, add all, join, union, dictionaries, **, combine, |



#### Dict - Pop Value

<cb>= <v>dict_1<>.pop(<v>key<>)<>

Removes and returns the value for <c><v>key<><>.
@
@ retrieve, all, dict.pop(), .pop()



#### Dict - Size

<cb>= len(<v>dict_1<>)<>
@
@ Size, Length, Count, len()



#### Dict - Sort Keys

<cb>= sorted(<v>dict_1<>.keys())<>

<cb>for <v>key<> in sorted(<v>dict_1<>.keys()):
	<v>...<><>

Returns: <c>list<>
@
@ ordered by, sorted(), .keys(), dict.keys(), names



#### Dict - Sort Values

<cb>= sorted(<v>dict_1<>.values())<>

<cb>for <v>key<> in sorted(<v>dict_1<>.values()):
	<v>...<><>

Returns: <c>list<>
@
@ ordered by, .sorted()
@ elements, items



#### Dict - Subtraction

<cb>= {<v>key<>: <v>dict_1<>[<v>key<>] for <v>key<> in <v>dict_1<> if <v>key<> not in <v>dict_2<>}<>

Returns: <c>dict<>


Returns a new dict containing only those items in <c><v>dict_1<><> but not in <c><v>dict_2<><>.
@
@ Delete, Remove Matching, Difference, dictionaries, dicts, minus, not in



#### Dict - To List

<cb>= list(<v>dict_1<>.values())<>
@
@ from, convert, list(), .values()
@ from-dict, to-list



# List

<cb>= []
= [<v>value_1<>, <v>value_2<>, <v>...<>]<>

Type: list


An ordered list.
Implemented as a fixed-length array of pointers.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]<>

<cb><v>list_2<> = [<v>1<>, <v>"1"<>, <v>"one"<>]<>
@
@ list-only, lists, lists-only
@ create, define, instantiate, new, [], ], empty, data type



#### List - Nested Lists

<cb>= [[<v>0<>, <v>1<>, <v>2<>], [<v>10<>, <v>11<>, <v>12<>], <v>...<>]<>

<cb>= [<v>sublist_1<>, <v>sublist_2<>, <v>...<>]<>


Examples:

2D List:

<cb><v>list_1<> = [
		[1, 2, 3, 4],
		[5, 6, 7, 8]]

<v>value<> = <v>list_1<>[1][3]

<#># Returns 8<><>

3D List:

<cb><v>list_1<> = [
		[[1, 2, 3],
		 [4, 5, 6]],
		[[11, 12, 13],
		 [14, 15, 16]]]

<v>value<> = <v>list_1<>[0][1][2]

<#># Returns 6<><>
@
@ 2d, sublists, nesting, of lists



#### List - Create With Initial Value

<cb>= [<v>value<>] * <v>size<><>


Example:

<cb><v>five_ones<> = [1] * 5

<#># Returns [1, 1, 1, 1, 1]<><>
@
@ repeating



# List Operations
@
@ list-only, lists, lists-only, [[]]



#### List - Append

<cb><v>list_1<>.append(<v>value<>)<>


Appends a value to the end of a list.


Example:

<cb><v>list_1<> = [<v>1<>, <v>2<>]

<v>list_1<>.append(<v>3<>)

<#># Sets list_1 to [1, 2, 3]<><>
@
@ put, add, item, value, append to, .append()



#### List - Append List

<cb><v>list_1<>.extend(<v>list_2<>)<>


Appends a list of items to the end of another list.


Example:

<cb><v>list_1<> = [<v>1<>, <v>2<>]
<v>list_2<> = [<v>3<>, <v>4<>]

<v>list_1<>.extend(<v>list_2<>)

<#># Sets list_1 to [1, 2, 3, 4]<><>
@
@ put, add, addall, concatenate, extend(), combine, append to, .extend()



#### List - Apply Function

<cb>= list(map(<v>function_1<>, <v>list_1<>)<>

Returns: <c>list<>


Applies the function to each value in <v>list_1<> returning the results in a new list.


Example:

<cb>def <v>add_10<>(<v>value<>):
	return <v>value + 10<>

<v>list_1<> = [<v>1<>, <v>2<>, <v>3<>]

<v>applied_list<> = list(map(<v>add_10<>, <v>list_1<>))

<#># Returns: [11, 12, 13]<><>
@
@ map(), list()
@ to elements, items, values



#### List - List Comprehension

<cb>= [<v>expression<> for <v>value<> in <v>list_1<>]<>

<cb>= [<v>expression<> for <v>value<> in <v>list_1<> if <v>condition<>]<>

Returns: <c>list<>


Iterates over a list or sequence, performing an operation on every item.
Returns the result as a <c>list<>.


Examples:

<cb><v>list_1<> = [1, 2, 3, 4, 5]

<v>list_2<> = [ <v>i<> * 2 for <v>i<> in <v>list_1<>]               <#># Returns [2, 4, 6, 8, 10]<><>

<cb><v>list_1<> = [1, 2, 3, 4, 5]

<v>list_2<> = [ <v>i<> * 2 for <v>i<> in <v>list_1<> if <v>i<> \<= 3]      <#># Returns [2, 4, 6]<><>
@
@ for in if [], conditional, iterating, sequences



#### List - List Comprehension, Nested

<cb>= [[<v>expression<> for <v>value<> in <v>sublist<>] for <v>sublist<> in <v>list_1<>]<>

Iterates over a list of lists or sequece of sequences, performing operations on every value in each sublist.


Example:

<cb><v>list_1<> = [[<v>1<>, <v>2<>], [<v>3<>, <v>4<>]]

<v>plus_10<> = [[<v>value<> + 10 for <v>value<> in <v>sublist<>] for <v>sublist<> in <v>list_1<>]

<#># Returns: [[11, 12], [13, 14]]<><>
@
@ for in if [], conditional, iterating, sequences



#### List - Contains?

<cb>= <v>value<> in <v>list_1<><>

<cb>if <v>value<> in <v>list_1<>:
	<v>...<><>
@
@ has, check, exists, item, element, includes, in



#### List - Contains Any From Second List?

<cb>= any(<v>value<> in <v>list_1<> for <v>value<> in <v>compare_list<>)<>

Returns: <c>bool<>


Returns <c>True<> if any item from <c>item_list<> is in <v>list_1<>.


Example:

<cb><v>list_1<> = [<v>1<>, <v>2<>, <v>3<>]
<v>compare_list<> = [<v>3<>, <v>5<>]

<v>match<> = any(<v>value<> in <v>list_1<> for <v>value<> in <v>compare_list<>)

<#># Returns: True<><>
@
@ has, check, exists, item, element, includes, in, matches, 2nd, other



#### List - Count Value Occurrences

<cb>= <v>list_1<>.count(<v>value<>)<>


Returns the number of times <c><v>value<><> appears in <c><v>list_1<><>.
@
@ item, occurrences, .count(), times



#### List - Count By Distinct Value

<cb>from collections import Counter

= Counter(<v>list_1<>)<>


Returns: <c>dict<>


Returns a dictionary with every unique value and the number of times of that value is present.
@
@ items, values, unique, individual, occurrences, .counter(), collections.counter()



#### List - Count Distinct Values

<cb>= len(set(<v>list_1<>))<>


Returns the number of unique values in <c><v>list_1<></..
@
@ items, unique, individual, occurrences, times, len(), .counter(), collections.counter()



#### List - Delete

<cb><v>del<> <v>list_1<>[<v>index<>]<>
@
@ remove from, one, single, del



#### List - Delete All

<cb><v>del<> <v>list_1<>[:]<>
@
@ remove from, clear, del



#### List - Delete First

<cb><v>del<> <v>list_1<>[0]<>
@
@ remove from start, del



#### List - Delete Last

<cb><v>del<> <v>list_1<>[-1]<>
@
@ remove from end, del



#### List - Delete In Range

<cb>del <v>list_1<>[<v>start<> : <v>end_plus_1<>]<>

Example:

<cb><v>list_1<> = [1, 2, 3, 4, 5, 6, 7, 8, 9]

del <v>list_1<>[<v>2<>:<v>7<>]                           <#># Returns [1, 2, 8, 9]<><>
@
@ remove, clear, del



#### List - Delete Matching Value

<cb><v>list_1<>.remove(<v>value<>)<>

Deletes the first item on the list that matches <v>value<>.
@
@ remove element, item, .remove()



#### List - Duplicate

<cb>= <v>list_1<>.copy()<>


Creates a shallow copy.
@
@ .copy(), shallow, clone, deepcopy()



#### List - Duplicate - Deep Copy

<cb>from copy import deepcopy

= deepcopy(<v>list_1<>)<>


Creates a deep copy.
@
@ copy, .deepcopy(), copy.deepcopy(), clone



#### List - Is Empty?

<cb>= not <v>list_1<><>

<cb>if not <v>list_1<>:
	<v>...<><>



#### List - Not Empty?

<cb>= bool(<v>list_1<>)<>

<cb>if <v>list_1<>:
	<v>...<><>

Use <b>bool()<> if you need to get a True/False value.
There is no need for <b>bool()<> when using <b>if...<>.
@
@ bool()



#### List - Is Equal

<cb>= <v>list_1<> == <v>list_2<><>

<cb>if <v>list_1<> == <v>list_2<>:
	<v>...<><>


Returns True if both lists are of same size and contain the same values.


Example:

<cb><v>list_1<> = [<v>1, 2, 3<>]
<v>list_2<> = [<v>1, 2, 3<>]
<v>list_3<> = [<v>3, 2, 1<>]

<v>is_identical<> = <v>list_1<> == <v>list_2<>

<#># Returns True<>

<v>is_identical<> = <v>list_1<> == <v>list_3<>

<#># Returns False<><>
@
@ equals, identical, ==



#### List - Is Sublist

Use Function:

<cb>def is_sublist(<v>list_1<>, <v>list_2<>):

	list_1_len = len(<v>list_1<>)

	for i in range(len(<v>list_2<>) - list_1_len + 1):
		if <v>list_1<> == <v>list_2<>[i : i + list_1_len]:
			return True

	return False<>

Call:

<cb>= is_sublist(<v>list_1<>, <v>list_2<>)<>


Returns True if <c><v>list_1<><> is a sublist of <c><v>list_2<><>.


Example:

<cb><v>list_1<> = [<v>3, 4<>]
<v>list_2<> = [<v>1, 2, 3, 4, 5<>]

is_it_a_sublist = is_sublist(<v>list_1<>, <v>list_2<>)

<#># Returns True<><>
@
@ contains, is_sublist



#### List - Extract To Sublist

<cb>= <v>list_1<>[<v>start<> : <v>end_plus_1<>]<>

<cb>= <v>list_1<>[<v>start<>:]                        <#># From <c><v>start<><> to the end.<><>

<cb>= <v>list_1<>[:<v>end_plus_1<>]                   <#># From the start to before <c><v>end_plus_1<><>.<><>


See Also: <l "/s/python?search=slice+sequence">Slicing Sequences<>


Examples:

<cb><v>list_1<> = [1, 2, 3, 4, 5, 6, 7, 8, 9]

= <v>list_1<>[0:5]                             <#># [1, 2, 3, 4, 5]<>
= <v>list_1<>[5:]                          <#># [6, 7, 8, 9]<>
= <v>list_1<>[0::8]                            <#># [1, 9] First, last items.<><>
@
@ Split, Slice, [:], ::, [::]



#### List - Find Index

<cb>= <v>list_1<>.index(<v>value<>)<>

<cb>= <v>list_1<>.index(<v>value<>, <v>start<>)<>

<cb>= <v>list_1<>.index(<v>value<>, <v>start<>, <v>end<>)<>

Returns the index of the first match.
@
@ search, index, get, location, position, .index()



#### List - Flatten

Define:

<cb>def flatten(<v>value<>):

	if type(<v>value<>) is not list:
		yield <v>value<>
		return

	for <v>subvalue<> in <v>value<>:
		yield from flatten(<v>subvalue<>)<>

Use:

<cb>= list(flatten(<v>list_1<>))<>


Will unwrap any combination of lists in lists into a flat list of values.
Python has no built in way to do this but the <c>flatten<> function above will do it.


Example:

<cb>def flatten(<v>value<>):

	if type(<v>value<>) is not list:
		yield <v>value<>
		return

	for <v>subvalue<> in <v>value<>:
		yield from flatten(<v>subvalue<>)


<v>list_1<> = [1, 2, [[3, 4, [5, 6]], 7], [8, 9]]

<v>flattened<> = list(flatten(<v>list_1<>))

<#># Returns: [1, 2, 3, 4, 5, 6, 7, 8, 9]<><>
@
@ flat list, flatten()



#### List - Get

<cb>= <v>list_1<>[<v>index<>]<>
@
@ item, value



#### List - Get First

<cb>= <v>list_1<>[0]<>
@
@ item, value, [0]



#### List - Get Last

<cb>= <v>list_1<>[-1]<>
@
@ item, value, [-1]



#### List - Get Remainder

<cb>= <v>list_1<>[1:]<>

Return everything but the first item.
@
@ tail, items, values, [1:]



#### List - Get Sublist

<cb>= <v>list_1<>[<v>index<>][<v>sub_index<>]<><>
@
@ item, value, 2d, sublists



#### List - Insert

<cb><v>list_1<>.insert(<v>index<>, <v>value<>)<>

Inserts at position <c><v>index<><>.


Example:

<cb><v>list_1<> = [<v>1<>, <v>2<>, <v>3<>]
<v>list_1<>.insert(1, 10)

<#># Sets: [1, 10, 2, 3]<><>
@
@ put, set, item, .insert()



#### List - Insert First

<cb><v>list_1<>.insert(0, <v>value<>)<>

Adds to the start of the list.


Example:

<cb><v>list_1<> = [<v>1<>, <v>2<>, <v>3<>]
<v>list_1<>.insert(0, 10)

<#># Sets: [10, 1, 2, 3]<><>
@
@ put, item, prepend, .insert()



#### List - Iterate

<cb>for <v>value<> in <v>list_1<>:
	<v>...<><>
@
@ for in, loop, items, elements, values, foreach, for each, iterating



#### List - Merge

<cb>= <v>list_1<> + <v>list_2<><>
@
@ lists, join, concatenate, combine, union



#### List - Pop First

<cb>= <v>list_1<>.pop(0)<>

Removes the first item from the list and returns it.
@
@ .pop(), left



#### List - Pop Last

<cb>= <v>list_1<>.pop()<>

Removes the last item from the list and returns it.
@
@ .pop(), right, end



#### List - Repeat

<cb>= <v>list_1<> * <v>count<><>

Returns <v>list_1<> repeated <v>count<> times.


Example:

<cb><v>repeated<> = [1, 2, 3] * 2

<#># Returns [1, 2, 3, 1, 2, 3]<><>
@
@ *, Multiply, Multiple, expand, .repeat()



#### List - Reverse

<cb>= <v>list_1<>[::-1]<>

Reverse in Place:

<cb><v>list_1<>.reverse()<>


Reverses a list.


Examples:

<cb><v>list_1<> = [<v>1<>, <v>2<>, <v>3<>]

<v>reversed<> = <v>list_1<>[::-1]

<#># Returns: [3, 2, 1]<><>

Reverse in Place:

<cb><v>list_1<> = [<v>1<>, <v>2<>, <v>3<>]

<v>list_1<>.reverse()

<#># Sets To: [3, 2, 1]<><>
@
@ .reverse()



#### List - Size

<cb>= len(<v>list_1<>)<>
@
@ count, length, len()



#### List - Sort

<cb>= sorted(<v>list_1<>)<>

<cb>= sorted(<v>list_1<>, key = str.lower)     <#># Ignores case.<><>

<cb>= sorted(<v>list_1<>, key = <v>compare<>)         <#># <c>compare<> takes 1 argument.<><>

Returns a new list in sorted order.

<c><v>compare<><> is a function that takes a list element as an argument, and returns it's comparable value.
@
@ ignore case, sorted()



#### List - Sort In Place

<cb><v>list_1<>.sort()<>

<cb><v>list_1<>.sort(key = str.lower)          <#># Ignores case.<><>

<cb><v>list_1<>.sort(key = <v>compare<>)              <#># <c>compare<> takes 1 argument.<><>


Sorts the list in place.

<c><v>compare<><> is a function that takes a list element as an argument, and returns it's comparable value.
@
@ ignore case, .sort(), sorted



#### List - Unpack

<cb><v>item_1<>, <v>item_2<>, <v>...<> = <v>list_1<><>

Unpacks the values in <c><v>list_1<><> into separate variables.
The number of variables on the left must match the number of values in the list on the right.

Example:

<cb><v>tuple_1<> = (<v>1<>, <v>2<>, <v>3<>)

<v>int_1<>, <v>int_2<>, <v>int_3<> = <v>tuple_1<><>
@
@ Destructure, Destructuring Assignment



#### List - Update

<cb><v>list_1<>[<v>index<>] = <v>updated_value<><>
@
@ change, modify, set, item, value



#### List - From Dict

<cb>=list(<v>dict_1<>.values())<>

Returns the values of <c><v>dict_1<><> as a list.
@
@ convert, conversion, to
@ dict, dictionary, list(), .values()
@ from-dict, to-list



#### List - To Dict

<cb>= {value:value for value in <v>list_1<>}<>

Returns: <c>dict<>


Use a dict comprehension
Returns a dict where every value is also the key to that value.
@
@ convert, conversion, from
@ dict, dictionary, {}
@ from-list, to-dict


#### List - To Dict - Enumerated

<cb>= dict(enumerate(<v>list_1<>))<>

Returns: <c>dict<>


Returns a dict where the value's list position maps to the value.
@ convert, conversion, from
@ dict, dictionary, indexed, by position, enumerate(), dict()
@ from-list, to-dict



#### List - To Dict - From 2 Lists

<cb>= dict(zip(<v>key_list<>, <v>value_list<>)<>

Returns: <c>dict<>
@
@ convert, conversion, from
@ dict, dictionary, two, dict(), zip()
@ from-lists, to-dict



#### List - From Set

<cb>= list(<v>set_1<>)<>
@
@ convert, conversion, to, list()
@ to-list, from-set



#### List - To Set

<cb>= set(<v>list_1<>)<>

Returns a set with all duplicates removed.
@
@ convert, conversion, from, set(), duplicates, deduplicate, unique
@ from-list, to-set



#### List - From Tuple

<cb>= list(<v>tuple_1<>)<>
@
@ convert, conversion, to, list()
@ to-list, from-tuple



#### List - To Tuple

<cb>= tuple(<v>list_1<>)<>
@
@ convert, conversion, from, tuple()
@ from-list, to-tuple



#### List - To Any Type

<cb>= list(map(<v>conversion<>, <v>list_1<>))<>


Converts elements in <c><v>list_1<><> to a different type.


Examples:

Convert Strings to Integers:

<cb><v>list_1<> = ['<v>1<>', '<v>2<>', '<v>3<>']
<v>list_as_ints<> = list(map(<v>int<>, <v>list_1<>))<>
@
@ map, convert, conversion, from, from-list, to-any



# Set

<cb>= {<v>value_1<>, <v>value_2<>, <v>...<>}

= set()                                 <#>#1<>

= set((<v>value_1<>, <v>value_2<>, <v>...<>))            <#>#2<><>

Unordered group of unique items.
Contains no duplicates.


\#1  <s>-<>  Empty Set

\#2  <s>-<>  Pass in items as a tuple.
@
@ set-only, sets-only
@ create, define, instantiate, new, {}, }, empty, set(), data type



# Set Operations
@
@ set-only, sets-only
@ ops



#### Set - Add

<cb><v>set_1<>.add(<v>value<>)<>
@
@ Insert, put, update, modify, change, .add()



#### Set - Contains?

Contains:

<cb>= <v>item_1<> in <v>set_1<><>

Does Not Contain:

<cb>= <v>item_1<> not in <v>set_1<><>
@
@ Has, Check, Exists, Item, Element, in, includes, not in



#### Set - Duplicate

<cb>= <v>set_1<>.copy()<>


Creates a shallow copy of <c><v>set_1<><>.
@
@ Copy, Shallow, copy(), clone



#### Set - Duplicate - Deep Copy

<cb>from copy import deepcopy

= deepcopy(<v>set_1<>)<>


Creates a deep copy of <c><v>set_1<><>.
@
@ copy, deepcopy(), copy.deepcopy(), clone



#### Set - Get

<cb>= next(iter(<v>set_1<>))<>


Returns an item from the set.
Repeating this call will return the same item!
@
@ item, value, next(), iter()



#### Set - Get, Pop

<cb>= <v>set_1<>.pop()<>

Removes and returns an item from the set.
@
@ item, value, .pop()



#### Set - Intersection

<cb>= <v>set_1<> & <v>set_2<><>

or

<cb>= <v>set_1<>.intersection(<v>set_2<>)<>

Returns a set containing only those values in both <c><v>set_1<><> and <c><v>set_2<><>.
@
@ conjunction, &



#### Set - Is Equal?

<cb>= <v>set_1<> == <v>set_2<><>

<cb>if <v>set_1<> == <v>set_2<>:
	<v>...<><>
@
@ Equals, compare, ==



#### Set - Is Disjoint?

<cb>= <v>set_1<>.isdisjoint(<v>set_2<>)<>

Returns true if <c><v>set_1<><> and <c><v>set_2<><> have no elements in common.
@
@ .isdisjoint()



#### Set - Is Subset?

<cb>= <v>set_1<>.issubset(<v>set_2<>)<>

Returns true if <c><v>set_2<><> is a subset of <c><v>set_1<><>.
@
@ .issubset()



#### Set - Is Superset?

<cb>= <v>set_1<>.issuperset(<v>set_2<>)<>

Returns true if <c><v>set_2<><> is a superset of <c><v>set_1<><>.
@
@ .issuperset()



#### Set - Merge

<cb>= <v>set_1<> | <v>set_2<><>

or

<cb>= <v>set_1<>.union(<v>set_2<>)<>

Returns a set with all the values of <c><v>set_1<><> and <c><v>set_2<><>.
Will have no duplicates.
@
@ addall, add all, join, union, combine, |, .union()



#### Set - Remove

<cb><v>set_1<>.remove(<v>value<>)<> 
@
@ Delete, update, modify, change, .remove()



#### Set - Remove All

<cb><v>set_1<>.clear()<>
@
@ Delete, Clear, .clear()



#### Set - Sort

<cb>= sorted(<v>set_1<>)<>
@
@ sorted()



#### Set - Subtraction

<cb>= <v>set_1<> - <v>set_2<><>

or

<cb>= <v>set_1<>.difference(<v>set_2<>)<>

Returns a set of the elements in <c><v>set_1<><> not in <c><v>set_2<><>.
@
@ Delete, Remove Matching, Difference, dictionaries -, minus, .difference()



#### Set - Symmetric Difference

<cb>= <v>set_1<>.symmetric_difference(<v>set_2<>)<>

<cb>= <v>set_1<>.symmetric_difference(<v>set_2<>, <v>set_3<>, <v>...<>)<>

Returns a set of the elements in <c><v>set_1<><> not in <c><v>set_2<><> and the elements in <c><v>set_2<><> not in <c><v>set_1<><>.
@
@ Delete, Remove Matching, Difference, dictionaries -, minus, .difference()



# Tuple

<cb>= ()        <#># Empty Tuple<>

= (<v>value_1<>, <v>value_2<>, <v>...<>)<>


Type: <c>tuple<>


Tuples are immutable arrays.
@
@ tuple-only, tuples-only, tuples, tupple
@ Create, Define, Instantiate, New, (), data type



# Tuple Operations
@
@ tuple-only, tuples-only, tuples, tupple
@ Ops



#### Tuple - Contains?

<cb>= <v>value<> in <v>tuple_1<><>
@
@ in, Check, Item, Element, includes



#### Tuple - Empty?

<cb>= not <v>tuple_1<><>

<cb>if not <v>tuple_1<>:
	<v>...<><>
@
@ not



#### Tuple - Get

<cb>= <v>tuple_1<>[<v>index<>]<>



#### Tuple - Get First

<cb>= <v>tuple_1<>[0]<>
@
@ [0]



#### Tuple - Get Last

<cb>= <v>tuple_1<>[-1]<>
@
@ [-1]



#### Tuple - Subset

<cb>= <v>tuple_1<>[<v>start<>:<v>end_plus_1<>]<>


See Also: <l "/s/python?search=slice+sequence">Slicing Sequences<>


Example:

<cb><v>tuple_1<> = (1, 2, 3, 4, 5)

<v>tuple_subset<> = <v>tuple_1<>[1:3]             <#># Returns (2, 3).<><>
@
@ Split, Slice



#### Tuple - Unpack

<cb><v>item_1<>, <v>item_2<>, <v>...<> = <v>tuple_1<><>

Unpacks the values in <c><v>tuple_1<><> into separate variables.
The number of variables on the left must match the number of values in the tuple on the right.


Example:

<cb><v>tuple_1<> = (<v>1<>, <v>2<>, <v>3<>)

<v>int_1<>, <v>int_2<>, <v>int_3<> = <v>tuple_1<><>
@
@ destructure, destructuring assignment



# Sequences

Sequence operations can be performed on any sequence type including lists, and tuples.
@
@ sequence-only, sequences-only, seq-only
@ list, tuple



### Index and Slicing Operations
@
@ indexing, Slice, subsequence, Subscripts



#### Index and Slicing Basics

Syntax:

<cb><table><col><v>first<><><col>= <v>sequence_1<>[0]<>
<col><v>nth<><><col>= <v>sequence_1<>[<v>n<>]<><col><#># Indexes are 0 based<><>
<col><v>second_last<><><col>= <v>sequence_1<>[-2]<><col> <>
<col><v>last<><><col>= <v>sequence_1<>[-1]<>
<col> <>
<col><v>all<><><col>= <v>sequence_1<>[:]<><col><#># Don't Use (Not Intuitive)<><>
<col><v>all_but_first<><><col>= <v>sequence_1<>[1:]<>
<col><v>all_but_last<><><col>= <v>sequence_1<>[:-1]<>
<col><v>reversed<><><col>= <v>sequence_1<>[::-1]<>
<col> <>
<col><v>from<><><col>= <v>sequence_1<>[<v>start<>:]<>
<col><v>from_to<><><col>= <v>sequence_1<>[<v>start<>:<v>end_plus_1<>]<>
<col><v>from_to_with_step<><><col>= <v>sequence_1<>[<v>start<>:<v>end_plus_1<>:<v>step<>]<>
<col><v>from_with_step<><><col>= <v>sequence_1<>[<v>start<>::<v>step<>]<>
<col><v>to<><><col>= <v>sequence_1<>[:<v>end_plus_1<>]<>
<col><v>step_over<><><col>= <v>sequence_1<>[::<v>step<>]<>
<col> <>
<col><v>m_to_nth<><><col>= <v>sequence_1<>[<v>m<> : <v>n<> + 1]<><><>


Examples:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<table><col><v>first<><><col>= <v>list_1<>[0]		<><col><#># Returns 0<><>
<col><v>second<><><col>= <v>list_1<>[1]<><col><#># Returns 1<><>
<col><v>...<><>
<col><v>second_last<><><col>= <v>list_1<>[-2]<><col><#># Returns 3<><>
<col><v>last<><><col>= <v>list_1<>[-1]<><col><#># Returns 4<><>
<col> <>
<col><v>all<><><col>= <v>list_1<>[:]<><col><#># Returns [0, 1, 2, 3, 4] (Not Recommended)<><>
<col><v>all_but_first<><><col>= <v>list_1<>[1:]<><col><#># Returns [1, 2, 3, 4]<><>
<col><v>all_but_last<><><col>= <v>list_1<>[:-1]<><col><#># Returns [0, 1, 2, 3]<><>
<col><v>reversed<><><col>= <v>list_1<>[::-1]<><col><#># Returns [4, 3, 2, 1, 0]<><>
<col> <>
<col><v>from_1_to_3<><><col>= <v>list_1<>[<v>1<>:<v>4<>]<><col><#># Returns [1, 2, 3]<><>
<col><v>from_1_step_to_3<><><col>= <v>list_1<>[<v>1<>:<v>4<>:<v>2<>]<><col><#># Returns [1, 3]<><>
<col><v>even<><><col>= <v>list_1<>[::<v>2<>]<><col><#># Returns [0, 2, 4]<><>
<col><v>odd_from_1<><><col>= <v>list_1<>[<v>1<>::<v>2<>]<><col><#># Returns [1, 3]<><><><>
@
@ examples, [0], [-1], [:], [::], [:-1]



#### Sequence - Get Value

<cb>= <v>sequence_1<>[<v>index<>]<>


Returns one value from the sequence.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<v>value<> = <v>list_1<>[<v>1<>]

<#># Returns 1<><>
@
@ item, []



#### Sequence - Get First Value

<cb>= <v>sequence_1<>[0]<>


Returns the first value from the sequence.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<v>value<> = <v>list_1<>[0]

<#># Returns 0<><>
@
@ item, [0]



#### Sequence - Get Last Value

<cb>= <v>sequence_1<>[-1]<>


Returns the last value from the sequence.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<v>value<> = <v>list_1<>[-1]

<#># Returns 4<><>
@
@ item, [-1]



#### Sequence - Get Sublist

<cb>= <v>sequence_1<>[<v>start<> : <v>end_plus_1<>]<>


Return everything but the first item.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<v>value<> = <v>list_1<>[<v>2<> : <v>4<>]

<#># Returns [2, 3]<><>
@
@ item, [:], subsequence



#### Sequence - Get Sublist From Position

<cb>= <v>sequence_1<>[<v>start<>:]<>


Return everything but the first item.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<v>value<> = <v>list_1<>[<v>2<>:]

<#># Returns [2, 3, 4]<><>
@
@ item, [1:], index, subsequence



#### Sequence - Get Sublist To Position

<cb>= <v>sequence_1<>[<v>start<> : <v>end_plus_1<>]<>


Return everything but the first item.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<v>value<> = <v>list_1<>[:<v>4<>]

<#># Returns [0, 1, 2, 3]<><>
@
@ item, [:], index, subsequence



#### Sequence - Get Remainder

<cb>= <v>sequence_1<>[1:]<>


Return everything but the first item.


Example:

<cb><v>list_1<> = [<v>0<>, <v>1<>, <v>2<>, <v>3<>, <v>4<>]

<v>value<> = <v>list_1<>[1:]

<#># Returns [1, 2, 3, 4]<><>
@
@ item, [1:], sublist, subsequence



### Sequence Destructuring
@
@ destructure, unpack, unpacking



#### Sequence Destructuring Basics

<cb><v>first<>, *<v>remainder<> = <v>sequence_1<>
<v>first<>, <v>second<>, *<v>remainder<> = <v>sequence_1<>
<v>first<>, <v>second<>, *_ = <v>sequence_1<>            <#># Remainder is Ignored<>
<v>first<>, _, <v>third<>, *_ = <v>sequence_1<>      <#># Second, Remainder are Ignored<>
<v>first<>, *_, <v>last<> = <v>sequence_1<>          <#># Returns First, Last Only<><>

<c>*<> is returned as a list.
<c>_<> is an element that is ignored.
@
@ example, _, *_



#### Sequence - Destructure First Elements, Remainder

<cb><v>first<>, *<v>remainder<> = <v>sequence_1<><>

<cb><v>first<>, <v>second<>, <v>...<> *<v>remainder<> = <v>sequence_1<><>

Returns the first element, and the remainder as a list.


Example:

<cb><v>sequence_1<> = [1, 2, 3, 4, 5]

<v>first<>, *<v>remainder<> = <v>sequence_1<>                <#># Returns 1, [2, 3, 4, 5]<><>

<cb><v>sequence_1<> = [1, 2, 3, 4, 5]

<v>first<>, <v>second<>, *<v>remainder<> = <v>sequence_1<>      <#># Returns 1, 2, [3, 4, 5]<><>
@
@ tail, *



#### Sequence - Destructure First, Last Only

<cb><v>first<>, *_, <v>last<> = <v>sequence_1<><>

Returns the first and last elements.
All others are ignored (denoted by <c>*_<>).


Example:

<cb><v>sequence_1<> = [1, 2, 3, 4, 5]

<v>first<>, *_, <v>last<> = <v>sequence_1<>          <#># Returns 1, 5<><>
@
@ *_



#### Sequence - Destructure Ignore Element

<cb><v>first<>, _, <v>third<>, *<v>remainder<> = <v>sequence_1<><>

<c>_<> denotes the element to be ignored (second element in this case).


Example:

<cb><v>sequence_1<> = [1, 2, 3, 4, 5]

<v>first<>, _, <v>third<>, *<v>remainder<> = <v>sequence_1<>        <#># Returns 1, 3, [4, 5]<><>
@
@ tail, _, *



#### Sequence - Destructure Ignore Remainder

<cb><v>first<>, <v>second<>, <v>third<>, *_ = <v>sequence_1<><>

Ignores everything after the third element (denoted by <c>*_<> ).


Example:

<cb><v>sequence_1<> = [1, 2, 3, 4, 5]

<v>first<>, <v>second<>, <v>third<>, *_ = <v>sequence_1<>       <#># Returns 1, 2, 3<><>
@
@ tail, *_



#### Sequence - Destructure Ignore Start

<cb>*_, <v>second_last<>, <v>last<> = <v>sequence_1<><>

Ignores everything before the 2nd last element (denoted by <c>*_<> ).


Example:

<cb><v>sequence_1<> = [1, 2, 3, 4, 5]

*_, <v>second_last<>, <v>last<> = <v>sequence_1<>            <#># Returns 4, 5<><>
@
@ *_



### Sequence Operations



#### Sequence - Contains?

<cb>= <v>value<> in <v>sequence_1<><>

<cb>if <v>value<> in <v>sequence_1<>:<>
@
@ has, check, exists, item, element, in, includes



#### Sequence - Count Value Occurrences

<cb>= <v>sequence_1<>.count(<v>value<>)<>


Returns the number of times <c><v>value<><> appears in <c><v>sequence_1<><>.
@
@ items, .count(), times



#### Sequence - Count Value Occurences

<cb>from collections import Counter

= Counter(<v>sequence_1<>)<>


Returns: <c>dict<>


Returns a dictionary with every unique value and the number of times of that value is present.
@
@ items, values, unique, individual, occurrences, collections.counter(), .counter()



#### Sequence - Count By Distinct Value

<cb>= len(set(<v>sequence_1<>))<>


Returns the number of unique values in <c><v>sequence_1<></..
@
@ items, unique, individual, occurrences, times, len(), .counter(), collections.counter()



#### Sequence - Duplicate

<cb>= <v>sequence_1<>.copy()<>

Creates a shallow copy.
@
@ Copy, .copy()



#### Sequence - Duplicate - Deep Copy

<cb>from copy import deepcopy

= deepcopy(<v>sequence_1<>)<>

Creates a deep copy.
@
@ Copy, deepcopy(), copy.deepcopy()



#### Sequence - Is Empty?

<cb>= not <v>sequence_1<><>

<cb>if not <v>sequence_1<>:
	<v>...<><>



#### Sequence - Not Empty?

<cb>= bool(<v>sequence_1<>)<>

<cb>if <v>sequence_1<>:
	<v>...<><>
@
@ bool()



#### Sequence - Find

<cb>= <v>sequence_1<>.index(<v>value<>)<>

<cb>= <v>sequence_1<>.index(<v>value<>, <v>start<>)<>

<cb>= <v>sequence_1<>.index(<v>value<>, <v>start<>, <v>end<>)<>

Returns the index of the first match.
@
@ Search, Index, .index()




#### Sequence - Iterate

<cb>for <v>value<> in <v>sequence_1<>:
	<v>...<><>
@
@ for in, foreach, iterating



#### Sequence - To Dict

<cb>= {<v>value<>:<v>value<> for <v>value<> in <v>sequence_1<>}<>

Returns: <c>dict<>


Returns a dict where every value is also the key to that value.
@
@ Convert, Conversion, From
@ Dict, Dictionary
@ from-sequence, to-dict



#### Sequence - To Dict - Enumerated

<cb>= dict(enumerate(<v>sequence_1<>))<>

Returns: <c>dict<>


Returns a dict where the key to a value is the original index position of that value.
@
@ convert, conversion, from
@ dictionary, by position, indexed, by index, dict(), enumerate()
@ from-sequence, to-dict



#### Sequence - To Set

<cb>= set(<v>sequence_1<>)<>

Returns a set with all duplicates removed.
@
@ Convert, Conversion, From, set()
@ from-sequence, to-set



#### Sequence - To Tuple

<cb>= tuple(<v>sequence_1<>)<>
@
@ Convert, Conversion, From, tuple()
@ from-sequence, to-tuple



#### Sequence - To Iterator

<cb>= iter(<v>sequence_1<>)<>

Turns any sequence type into an iterator.
@
@ list, tuple, iter()
@ from-sequence, to-iterator



### Sequence Functions



#### Sequence - All

<cb>= all(<v>boolean_sequence_1<>)<>

or

<cb>= all(map(<v>test_function<>, <v>sequence_1<>))<>

Returns true if all elements of <c><v>boolean_sequence_1<><> evaluate to True.
This function short-circuits when a False value is reached.

Use <c><v>test_function<><> to return the <c>True<> / <c>False<> value for <c><v>sequence_1<><> elements.
@
@ Boolean, all(), map()



#### Sequence - Any

<cb>= any(<v>boolean_sequence_1<>)<>

or

<cb>= any(map(<v>test_function<>, <v>sequence_1<>))<>

Returns true if any element of <c><v>boolean_sequence_1<><> evaluates to True.
This function short-circuits when a True value is reached.

Use <c><v>test_function<><> to return the <c>True<> / <c>False<> value for <c><v>sequence_1<><> elements.
@
@ Boolean, any(), map()



#### Sequence - Average

<cb>= sum(<v>sequence_1<>) / len(<v>sequence_1<>)<>


Returns the average of the values in a list.


Example:

<cb><v>list_1<> = [3, 4, 7, 10]

<v>average<> = sum(<v>list_1<>) / len(<v>list_1<>)

<#># Returns: 6.0<><>
@
@ average()


#### Sequence - Enumerate

<cb>= enumerate(<v>sequence_1<>)<>

<cb>for <v>index<>, <v>value<> in enumerate(<v>sequence_1<>):
	<v>...<><>

Returns:    <c>enumerate<>
		(generator of index, value tuples)


The <c>enumerate<> function returns a generator.
That generator returns an index, value tuple for each entry in the sequence.
The index is the position in the sequence (zero based).
The value is the value in the sequence at that position.


Example:

<cb><v>list_1<> = ["zero", "one", "two"]

for <v>index<>, <v>value<> in enumerate(<v>list_1<>):
	print (<v>index<>, <v>value<>)<>

Prints:

<cb><#>0 zero
1 one
2 two<><>
@
@ enumerate(), index, indexed



#### Sequence - Min

<cb>= min(<v>sequence_1<>)<>
@
@ minimum, value, item, element, min()



#### Sequence - Max

<cb>= max(<v>sequence_1<>)<>
@
@ greatest, maximum, value, item, element, max()



#### Sequence - Filter

<cb>= filter(<v>test_function<>, <v>sequence_1<>)<>

Returned Type: <c>filter<>

Returns a filter that will return a subset of <c><v>sequence_1<><>.
Returns all values where <c><v>test_function<>(<v>value<>)<> == <c>True<>.

Filters are lazy iterators.
Values are evaluated and returned one at a time, and only when requested.


Examples:

Using a Filter Function:

<cb><#># Define Test:<>

def <v>is_even<>(<v>value<>):
	return <v>value % 2 == 0<>

<#># Filter:<>

<v>sequence_1<> = [<v>1<>, <v>2<>, <v>3<>, <v>4<>, <v>5<>]

<v>filtered_1<> = filter(<v>is_even<>, <v>sequence_1<>)

<#># Returns values 2, 4.<><>

Using a Lambda Filter:

<cb><v>sequence_1<> = [<v>1<>, <v>2<>, <v>3<>, <v>4<>, <v>5<>]

<v>filtered_1<> = filter(
		lambda <v>value<> : <v>value % 2 == 0<>,
		<v>sequence_1<>)

<#># Returns values 2, 4.<><>
@
@ filter()



##### Filter - Test Function

<cb>def <v>test_function<>(<v>value<>):
	return <v>true_or_false_value<><>


Used by <c>filter()<> to determine which values to return.
Must return <c>True<> or <c>False<>.
<c>True<> values will be returned by <c>filter()<>
@
@ filtering



##### Filter - To List

<cb>= list(<v>filtered_1<>)<>
@
@ Convert, Conversion, From, list()



#### Sequence - Map

<cb>= map(<v>mapping_function<>, <v>sequence_1<>)<>

Returns: <c>map<>


Returns a map of <c><v>sequence_1<><> values passed through <c><v>mapping_function<><>.


Example:

<cb>def <v>add_10<>(<v>value<>):
	return <v>value + 10<>

<v>list_1<> = [<v>1<>, <v>2<>, <v>3<>]

<v>mapped_1<> = map(<v>add_10<>, <v>list_1<>)

<#># Returns: Map of 11, 12, 13.<><>
@
@ map()
@ from-sequence, to-map, convert, conversion



##### Map - Mapping Function

<cb>def <v>mapping_function<>(<v>value<>):
	return <v>some_transformation<><>

Returns a new value based on the original value.



##### Map - To List

<cb>= list(<v>mapped_1<>)<>

<cb>= list(map(<v>mapping_function<>, <v>list_1<>))<>



#### Sequence - Reduce

<cb>from functools import reduce

<v>reduced_1<> = reduce(<v>reducing_function<>, <v>sequence_1<>)<><>

<cb>= reduce(<v>reducing_function<>, <v>sequence_1<>, <v>initial_value<>)<><>

Returns a single value calculated by passing every value in <c><v>sequence_1<><> into <c><v>reducing_function<><>.


Examples:

<cb>def <v>add<>(<v>previous_result<>, <v>value<>):
	return <v>previous_result + value<>

<v>sequence_1<> = [<v>1<>, <v>2<>, <v>3<>, <v>4<>, <v>5<>]
<v>total<> = reduce(<v>add<>, <v>sequence_1<>)                       <#># Returns 15.<><>

<cb><v>sequence_1<> = [<v>1<>, <v>2<>, <v>3<>, <v>4<>, <v>5<>]
<v>total<> = reduce(
		lambda <v>previous<>, <v>value<> : <v>previous + value<>,
		<v>sequence_1<>)                                   <#># Returns 15.<><>
@
@ functools.reduce(), .reduce()



##### Reducing Function

<cb>def <v>reducing_function<>(<v>previous_result<>, <v>next_value<>):
	return <v>some_calculation<><>                                    

Calculates a value base on <c><v>previous_result<><> and <c><v>next_value<><>.

For the first calculation, <c><v>previous_result<><> will either be:
	<c><v>initial_value<><> if provide, or
	<c><v>first_value<><> the first value in the sequence.



#### Sequence - Shuffle

<cb>from random import shuffle

shuffle(<v>sequence_1<>)<>

Randomizes a sequence in place.
@
@ Randomize, random.shuffle(), .shuffle()



#### Sequence - Sort

<cb>= sorted(<v>sequence_1<>)<>

<cb>= sorted(<v>sequence_1<>, key = <v>compare<>)<>

Returns: <c>list<>

Returns a new sorted list from <c><v>sequence_1<><>.

<c><v>compare<><> is a function that takes a sequence element as an argument, and returns it's comparable value.


Example:

<cb><v>values<> = ['<v>a<>', '<v>B<>', '<v>c<>']

<v>sorted_1<> = sorted(<v>values<>)
<#># Returns 'B', 'a', 'c'<>

<v>sorted_2<> = sorted(<v>values<>, key = str.lower)
<#># Returns 'a', 'B', 'c'<>

<v>sorted_3<> = sorted(<v>values<>, key = lambda <v>value<>: <v>value<>.lower())
<#># Returns 'a', 'B', 'c'<>


<v>to_lower<> = lambda value: value.lower()

<v>sorted_4<> = sorted(<v>values<>, key = <v>to_lower<>)
<#># Returns 'a', 'B', 'c'<><>
@
@ Sort By, sorted()



#### Sequence - Sum

<cb>= sum(<v>sequence_1<>)<>


Example:

<cb>= sum(<v>[1, 2, 3]<>)                      <#># Returns 6<><>
@
@ sum()



#### Sequence - Zip

<cb>= zip(<v>sequence_1<>, <v>sequence_2<>)<>

or

<cb>= zip(<v>sequence_1<>, <v>sequence_2<>, <v>...<>)<>

Returns: <c>zip(*iterable)<>

Zips two or more sequences or iterables together.
The returned zip object is iterable and returns tuples.
Each tuple contains the element from each sequence at that position.


Example:

<cb><v>list_1<> = [1, 2]
<v>list_2<> = ["one", "two"]

<v>zipped<> = zip(<v>list_1<>, <v>list_2<>)
<v>combined_list<> = list(<v>zipped<>)            <#># Returns [(1, 'one'), (2, 'two')]<><>
@
@ Merge, Combine, List, Set, zip()



# Collections
@
@ Structures



## Queue

<cb>from queue import Queue

<v>queue_1<> = Queue()<><>

or

<cb><v>queue_1<> = Queue(<v>max_size<>)               <#>#1<><>

Asynchronous first in first out queue.

\#1  <s>-<>  This queue has a maximum size.
@
@ Create, Define, Instantiate, New
@ Queue-only, queues-only, queue(), queue.queue()



## Queue Operations
@ Queue-only, queues-only



#### Queue - Add

<cb><v>queue_1<>.put(<v>value_1<>)<>
@
@ put, append, insert, append to, .put()



#### Queue - Get Next

<cb>= <v>queue_1<>.get()                           <#>#1<><>

or

<cb>= <v>queue_1<>.get_nowait()                    <#>#2<><>


Get next item.


\#1  <s>-<>  If no items, waits until one becomes available.

\#2  <s>-<>  If no items, raises <c>QueueEmpty<>.
@
@ .get(), .get_nowait()



#### Queue - Is Empty?

<cb>= <v>queue_1<>.empty()<>

Returns: <c>bool<>

Returns <c>True<> if empty.
@
@ .empty()



#### Queue - Is Full?

<cb>= <v>queue_1<>.full()<>

Returns: <c>bool<>

Returns <c>True<> if the queue is full and can't take any more items.
@
@ .empty()



#### Queue - Maximum Size

<cb>= <v>queue_1<>.maxsize<>


Returns the maximum allowed size of the queue.
Returns 0 if no maximum set.
@
@ count, length, .maxsize



#### Queue - Size

<cb>= <v>queue_1<>.qsize()<>

Returns the number of items in the queue.
@
@ count, length, .qsize()



# Context Manager

Allows a resource's lifecycle to be handled correctly.
The context manager will open the resource using <c>with<>
and will close it correctly when exiting the block.
No <c>close<>() method needs to be called, even if an exception is thrown.
@
@ managers


### Context Manager - Define

<cb>class <v>ManagedResource1<>:

	def __enter__ (self):                           <#># Called At Creation<>
		<v>...<>

	def __exit__ (self, type, value, traceback):    <#># Called At Completion<>
		<v>...<><>


Allows a class to be used as a managed resource.

<c>type<>, <c>value<>, <c>traceeback<> will be populated when an exception is raised. <c>value<> will contain the exception.
@
@ define, new, closeable auto close, __enter__, __exit__, enter, exit, reseource, autoclose
@ with-only



### Context Manager - Use / With

<cb>with <v>ManagedResource1<>() as <v>resource_item_1<>:
	<v>...<><>

Reference the resource using <c><v>resource_item_1<><>.
<c><v>resource_item_1<><> is automatically closed at the end of the block.
@
@ with, instantiate, auto close, closeable, open, reseource, autoclose
@ with-only



# Error Handling
@
@ Exceptions, except-only, exception-only, exceptions-only
@ Errors, error-only, error-handling-only, errors-only



## Exceptions



### Exception Basics

<cb>class <v>Exception1<>(Exception):
	<v>...<><>

<cb>raise <v>Exception1<>()<>

<cb>try:
	<v>...<>
except <v>Exception1<> as exception:
	<v>...<>
finally:
	<v>...<><>
@
@ try, except, finally, raise


### Define

<cb>class <v>Exception1<>(Exception):
	<v>...<><>

Defines a new exception type.
Inherit from <c>Exception<>.
@
@ create, new, exception



### Raise

<cb>raise <v>Exception1<>()<>

<cb>raise <v>Exception1<>() from <v>exception_1<>		<#>#1<><>

<#>#1<> - Chains Stack Traces From <c><v>exception_1<><>
@
@ Raises, Chaining, chains, create, new, stack traces



### Try Except

<cb>try:
	<v>...<>
except <v>Exception1<> as exception:
	<v>...<>
else:
	<v>...<>
finally:
	<v>...<><>

<cb>try:
	<v>...<>

except <v>Exception1<>:
	<#># Catches <c>Exception1<> (#1)<>
	<v>...<>

except <v>Exception2<> as <v>exception_2<>
	<#># Catches <c>Exception2<>, Reference with <c>exception_2<><>
	<v>...<>

except Exception as <v>exception_3<>
	<#># Catches Any Exception<>
	<v>...<>

else:
	<#># Called if no exception thrown.<>
	<v>...<>

finally:
	<#># Always Executed (#2)<>
	<v>...<><>

Catches an exception raised in the try part of the block.
All subclasses of a exception are caught in the same block as the exception.

\#1 - No exception variable assignd so exceptions can not be referenced in this block.

\#2 -  Always executes even if an exception is thrown.
@
@ exception, else, finally



### Exception - Get Message

<cb>= <v>exception_1<>.args[0]<>
@
@ .args[0]



### Exception - Get Stack Trace

<cb>import traceback

<v>taceback_1<> = traceback.format_exc()<>

Returns: <c>str<>


Example:

<cb>except Exception as <v>exception_1<>:
	print(traceback.format_exc())<>
@
@ traceback.format_exc(), .format_exc()
@ print, show



## Standard Exceptions
@
@ std


#### Exception - FileNotFoundError

<cb>FileNotFoundError<>
@
@ not found


#### Exception - IndexError

<cb>IndexError<>

Use to indicate index out of bounds or other index error.
@
@ index out of bounds



#### Exception - NotImplementedError

<cb>NotImplementedError<>

A runtime exception.
@
@ not implemented error



#### Exception - StopIteration

<cb>StopIteration<>

Use to indicate an iterator or generator has completed.
@
@ stop iterator, iterator finished, generator, yield



#### Exception - TypeError

<cb>TypeError<>

Use to indicate invalid or None type.
@
@ invalid, none type



#### Exception - ValueError

<cb>ValueError<>

Use when type is correct but value is outside the expected range.
Use this for request validations.
@
@ invalid value.



# Functions
@
@ function-only, functions-only, func-only


## Python Functions Page:

<l>https://docs.python.org/3/library/functions.html<>



## Functions
@
@ functions-only, func-only, def-onlyl



### Function Basics

<cb>def <v>function_1<>(<v>arg_1<>, <v>arg_2<> <v>...<>):
	<#>"""Function docstring."""<>

	<v>...<>

	return <v>response<><>

<cb><v>response_1<> = <v>function_1<>(<v>arg_1<>, <v>arg_2<>, <v>...<>)<>

<cb><v>response_1<> = <v>function_1<>(<v>arg_1_name<> = <v>arg_1<>, <v>...<>)		<#># With Named Arguments<><>

Functions are stored as global attributes.
Function definitions can be monkey patched by changing the global definition.
Functions are first class objects and can be passed as values.
@
@ examples, def



### Function - Define

<cb>def <v>function_1<>(<v>arg_1<>, <v>arg_2<> <v>...<>): 
	<v>...<><>

<cb>def <v>function_1<>(<v>arg_1<>, <v>arg_2<> <v>...<>):		<#># With Return<>
	return <v>response<><>
@
@ new, create, arguments, args, parameters, params, return, def



### Function - Define - Empty Function

<cb>def <v>empty_function_1<>():					<#># Empty Function, Does Nothing Yet<>
	pass<>

Use <c>pass<> to define an empty function.
@
@ new, create, pass



### Function - DocString - Define

<cb>def <v>function_1<>():
	<#>"""Place docstring here."""<>
	<v>...<><>
@
@ Doc String, Add, Create, """



### Function - Arguments - Optional

<cb>def <v>function_1<>(<v>optional_arg_1<> = <v>default_value<>, <v>...<>):
	<v>...<><>

The arguments with default values are optional.
Optional arguments must come after standard non-optional arguments.


Example:

<cb>def <v>say_hello<>(<v>name<>, <v>greeting<> = "<v>Hello<>"):
	print(<v>greeting<>, <v>name<>)

<v>say_hello<>("<v>John<>")
<v>say_hello<>("<v>John<>", "<v>Hi<>")<>
@
@ new, create, values, default, arguments, args, parameters, params



### Function - Arguments - As Key Word Dict

<cb>def <v>function_1<>(**<v>kwargs<>):
	<v>...<>
	<v>value_1<> = <v>kwargs<>[<v>key_1<>]				<#># References Argument <v>key_1<><>
	<v>...<><>

<c>kwargs<> Type: dict

The caller arguments are placed in a dictionary.
The caller must use named arguments.
"<c>kwargs<>" is the name by convention for this argument.

kwargs = key word arguments


Example:

<cb>def <v>say<>(**kwargs):
	print(kwargs[<v>'greeting'<>], kwargs[<v>'name'<>])

<v>say<>(greeting = "<v>Hi<>", name = "<v>John<>")<>
@
@ arguments, args, parameters, params
@ dictionary, **kwargs, kwargs, keyword



### Function - Arguments - As Tuple

<cb>def function1(*args):
	<v>...<>
	<v>value_1<> = <v>args<>[<v>index_1<>]				<#># Reference an Argument<>
	<v>...<><>

<c>args<> Type: tuple

The caller arguments are placed in a tuple.


Example:

<cb>def <v>say<>(*args):
	print(args[<v>0<>], args[<v>1<>])

<v>say<>("<v>Hi<>", "<v>John<>")<>
@
@ arguments, args, parameters, params
@ list, array, pass, *args



### Function - Return

<cb>def <v>function_1<>():
	return <v>value_1<><>


Returns a value.


Example:

<cb>def <v>return_a_1<>():
	return 1

<v>results<> = <v>return_a_1<>()<>
@
@ New, Create, Value



### Function - Return - Multiple Values

<cb>def <v>function_1<>():
	return <v>value_1<>, <v>value_2<>, <v>...<><>


Returns: <c>Tuple<>


Returns values as a tuple.


Example:

<cb>def <v>return_three_values<>():
	return "one", "two", "three"

<v>results<> = <v>return_three_values<>()<>
@
@ New, Create, Values



### Function - Call

<cb><v>function_1<>()							<#># No Arguments, No Return Value<><>

<cb><v>function_2<>(<v>arg_1<>, <v>...<>)					<#># With Arguments<><>

<cb>= <v>function_3<>(<v>arg_1<>, <v>...<>)				<#># When Returning a Value<><>
@
@ calling



### Function - Call - With Named Arguments

Call:

<cb><v>function_1<>(<v>arg_1_name<> = <v>value<>, <v>arg_2_name<> = <v>value<>, <v>...<>)<>


Pass arguments by name to by using the form <c><v>name<> = <v>value<><>.
Order is not important.


Example:

<cb>def <v>greet<>(<v>greeting<>, <v>name<>):
	print(<v>greeting<>, <v>name<>)

<#># Call:<>

<v>greet<>(name = 'John', greeting = 'Hi')<>
@
@ calling
@ arguments, args, parameters, params



### Function - Call - With Dict

<cb><v>function_1<>(**<v>dict_1<>)<>

Pass as <c><v>dict_1<><> it's arguments.
Unpacks the dictionary into keyword arguments inside the function.


Example:

<cb>def <v>say<>(<v>greeting<>, <v>name<>):
	print(<v>greeting<>, <v>name<>)

<v>dict_1<> = {<v>'greeting'<> : <v>'Hi'<>, <v>'name'<> : <v>'John'<>}

<v>say<>(**<v>dict_1<>)<>
@
@ dictionary
@ calling, passing, **kwags
@ arguments, args, parameters, params



### Function - Call - With Sequence

<cb><v>function_1<>(*<v>sequence_1<>)<>

Pass <c><v>sequence_1<><> to the function as it's arguments.
Unpacks the sequence into arguments in order they are declared in the function signature.


Example:

<cb>def <v>say<>(<v>greeting<>, <v>name<>):
	print(<v>greeting<>, <v>name<>)

<v>list_1<> = [<v>'Hi'<>, <v>'John'<>]

<v>say<>(*<v>list_1<>)<>
@
@ list, tuple
@ calling, passing, *args
@ arguments, args, parameters, params



## Function - Function Passing

Assign:

<cb><v>function_variable_1<> = <v>function_1<><>

Call:

<cb><v>function_variable_1<>(<v>...<>)<>

Pass:

<cb><v>function_2<>(<v>function_variable_1<>):<>

Pass Directly:

<cb><v>function_2<>(<v>function_1<>):<>

Can be passed as a value.
@
@ assignment, assigning, call, variable, passing



## Function - Get Name

<cb>= <v>function_1<>.__name__<>


Example:

<cb>def <v>function_1<>():
	return "This is a function."

<v>function_name<> = <v>function_1<>.__name__<>
@
@ __name__



## Inner Functions

Define:

<cb>def <v>parent_function<>(<v>...<>):

	def <v>inner_function<>(<v>...<>):			<#>#1<>
		<v>...<><>

Call:

<cb>def <v>parent_function<>(<v>...<>):

	<v>...<>

	<v>response_1<> = <v>inner_function<>()<>


\#1  -  Scope - <c><v>inner_function<><> is visible to <c><v>parent_function<><> only.
@
@ new, create, define, nested, outer



### Inner Function - Closure

An inner function has read access to it's parent's variables.
There are in scope due to the function 'closing' over the parent's environment.


Example:

<cb>def <v>parent<>():

	def <v>inner<>():
		print ('value =', <u>value<>)

	<v>value<> = <v>10<>
	<v>inner<>()

<v>parent<>()

<#># Prints 'value = 10'<><>

Here <c><v>value<><> is a non-local variable to <c><v>inner<><>.
@
@ nonlocal, non-local



## Function Decorators
@
@ decorated, decorator-only, decorators-only, decorated-only
@ wrapper, annotations, @decorators



### Decorator Basics

Define:

<cb>def <v>decorator_1<>(<v>function<>):
	
	def wrapper(*args, **kwargs):
		<v>...<>                              <#># Pre-function Code<>
		<v>function<>(*args, **kwargs)        <#># Function Call<>
		<v>...<>                              <#># Post-function Code<>
		
	return wrapper<>

Use (Decorate):

<cb>@<v>decorator_1<>
def <v>decorated_2<>(<v>arg_1<>, <v>...<>):
	<v>...<><>

Uses:

<cb>decorated_2(<v>arg_1<>, <v>...<>)<>


Example:

<cb><#># Define Decorator:<>

def <v>decorate_before_and_after<>(<v>function<>):
	
	def wrapper(*args, **kwargs):

		print("Before:  " + function.__name__)
		<v>function<>(*args, **kwargs)
		print("After:   " + function.__name__)
		
	return wrapper

<#># Decorate Function:<>

\@<v>decorate_before_and_after<>
def <v>print_message<>(message):
	print("Message:", message)

<#># Call:<>

<v>print_message<>(<v>"This message appears after 'Before' but before 'After'."<>)<>
@
@ examples, @



### Decorator - Define - No Arguments

<cb>def <v>decorator_1<>(<v>decorated_function<>):

	def <v>wrapper<>():
		<v>...<>                           <#>#1<>
		<v>decorated_function<>()          <#>#2<>
		<v>...<>                           <#>#3<>

	return <v>wrapper<>()<>

When a function is decorated and then called, <c><v>decorated_function<><> will be called thorugh <c><v>wrapper<>()<>.

\#1  <s>-<>  Place pre-function call code here.
\#2  <s>-<>  Calls <c><v>decorated_function<><>.
\#3  <s>-<>  Place post-function call code here.
@
@ new, create, @



### Decorator - Define - Passing Arguments

<cb>def <v>decorator_1<>(<v>decorated_function<>):

	def <v>wrapper<>(*args, **kwargs):             <#>#1<>
		<v>...<>
		<v>decorated_function<>(*args, **kwargs)       <#>#2<>
		<v>...<>

	return <v>wrapper<>()<>


When a function is decorated and then called, <c><v>decorated_function<><> will be called thorugh <c><v>wrapper<>()<>.

\#1  <s>-<>  Captures calling statement's arguments.

\#2  <s>-<>  Calls <c><v>decorated_function<><> and passes arguments.
@
@ new, create
@ arguments, args, parameters, params



### Decorator - Define - Return Result

<cb>def <v>decorator_1<>(<v>decorated_function<>):

	def <v>wrapper<>(*args, **kwargs):
		<v>...<>
		result = <v>decorated_function<>(*args, **kwargs)
		<v>...<>
		return result

	return <v>wrapper<>()<>
@
@ new, create, response, returning, value



### Decorator - Use

<cb>@<v>decorator_1<>
def <v>decorated_function<>(<v>...<>):
	<v>...<><>

Calls <c><v>decorated_function<><> through <c><v>decorator_1<><>.
@
@ use, assign, annotate, decorate, call



## Lambda

An anonymous function.
All lambdas return a value. Returns are implied.
@
@ lambdas, ->, =>, lambda-only,lambdas-only



### Lambda - Define

<cb>= lambda <v>arg_1<>, <v>arg_2<>, <v>...<> : <v>expression<><>


Example:

<cb><v>multiply<> = lambda <v>x<>, <v>y<> : <v>x<> * <v>y<>

<v>result<> = <v>multiply<>(2, 3)<>



### Lambda - Define - Alternative

<cb>def <v>lambda_name<>(<v>args_1<>, <v>args_2<>, <v>...<>): return <v>expression<><>

This is using the standard function form to return a 'lambda'.



### Lambda - Closure

A lambda has read access to it's parent's variables through closure.


Example:

<cb>def <v>test<>():

	<v>value<> = <v>10<>        <#># Closed Variable<> 

	<v>multiply_by<> = lambda <v>x<> : <v>x<> * <v>value<>

	print(<v>multiply_by<>(<v>3<>))

<v>test<>()

<#># Prints '30'<><>



## Partial Functions

<cb>from functools import partial

<v>partial_function_1<> = partial(<v>function_1<>, <v>arg_1_value<>)<>

Returns the function with some arguments applied.
Arguments are applied to arguments from first to last.
Call the returned function with additional arguments to make the actual call.

Also Called: Currying


Example:

<cb>def <v>say<>(<v>greeting<>, <v>name<>):
	print(<v>greeting<>, <v>name<>)

<v>say_hi<> = partial(<v>say<>, <v>"Hi"<>)
<v>say_hi<>(<v>"John"<>)<>
@
@ currying, partially applied function, functools.partial(), .partial()



# Classes
@
@ class-only, classes-only



## Standard Class



### Class Basics

Define:

<cb>class <v>Class1<>:
	<#>"""Class docstring."""<>

	<v>class_variable<> = <v>value<>				<#># Static Variable<>

	def __init__(self, <v>arg_1<>, <v>...<>):		<#># Constructor<>
		self.<v>variable_1<> = <v>arg_1<>
		self._<v>private_variable_2<> = <v>arg_2<>

	def <v>method_1<>(self, <v>arg_1<>, <v>...<>):
		<#>"""Method docstring."""<>
		<v>...<>

	def _<v>private_method_2<>(self, <v>arg_1<>, <v>...<>):
		<v>...<>

	@classmethod						<#># Class Method<>
	def <v>class_method_3<>(cls, <v>arg_1<>, <v>...<>):
		<v>...<>

	@staticmethod						<#># Static Method<>
	def <v>static_method_3<>(<v>arg_1<>, <v>...<>):
		<v>...<><>

Call Class Method:

<cb><v>Class1<>.<v>class_method_3<>(<v>arg_1<>, <v>...<>)<>

Call Static Method:

<cb><v>Class1<>.<v>static_method_4<>(<v>arg_1<>, <v>...<>)<>

Read Static Variable:

<cb><v>value_1<> = <v>Class1<>.<v>class_variable<><>

Set Static Variable:

<cb><v>Class1<>.<v>class_variable<> = <v>value_2<><>

Create Class:

<cb><v>class_1<> = <v>Class1<>(<v>arg_1<>, <v>...<>)<>

Call Instance Method:

<cb><v>class_1<>.<v>method_1<>(<v>arg_1<>, <v>...<>)<>

Read Instance Variable:

<cb><v>value_1<> = <v>Class1<>.<v>variable_1<><>

Set Instance Variable:

<cb><v>Class1<>.<v>variable_1<> = <v>value_2<><>


All class functions and variables are public by default.

Function overloading is NOT supported.
- use arguments default values to solve this.
- use type checking to catch incorrect arguments.

Classes are mutable.
Class methods are stored as attributes and can be monkey patched.

Instance variables must be created in a class function and attached to self.

The <c>self<> argument is required for all class functions.
- <c>self<> is called <v>self<> by convention.
@
@ Examples, cls



### Class - Define

<cb>class <v>Class1<>:
	<v>...<><>

With Constructor:

<cb>class <v>Class1<>:

	 def __init__(self, <v>arg_1<>, <v>...<>):

		self.<v>property_1<> = <v>...<><>

All Options:

<cb>class <v>Class1<>:
	<#>"""Class docstring."""<>

	<v>variable_1<> = <v>value<>					<#># Class Variable / Static Variable<>
	<v>_private_variable_2<> = <v>value<>

	def __init__(self, <v>arg_1<>, <v>...<>):		<#># Constructor<>

		super().__init__()

		self.<v>variable_3<> = <v>arg_1<>			<#># Instance Variable<>
		self._<v>private_variable_2<> = <v>arg_2<>

	def <v>method_1<>(self, <v>arg_1<>, <v>...<>):
		<#>"""Method docstring."""<>
		<v>...<>

	def <v>_private_method_1<>(self, <v>arg_1<>, <v>...<>):
		<v>...<><>
@
@ New, Definition, Create, __init__(), init



### Class - Define - Constructor

<cb>class <v>Class1<>:
	def __init__(self, <v>arg_1<>, <v>...<>):
		<v>...<><>

Define the constructor with the <c>__init__<> method.

Define instance arguments in the constructor.
@
@ Initializer
@ arguments, args, parameters, params, __init__()



### Class - Define - With Inheritance

<cb>class <v>Subclass1<>(<v>Superclass1<>):
	<v>...<><>

Initializing Parent:

<cb>class <v>Subclass1<>(<v>Superclass1<>):

	def __init__(self, <v>...<>):
		super().__init__()
		<v>...<><>

Initializing Parent With Arguments:

<cb>class <v>Subclass1<>(<v>Superclass1<>):

	def __init__(self, <v>...<>):
		super().__init__(<v>arg_1<>, <v>...<>)
		<v>...<><>
@
@ subclass, superclass, super(), __init__()
@ extend


### Class - Define - With Multiple Inheritance

<cb>class <v>Subclass1<>(<v>Superclass1<>, <v>Superclass2<>, <v>...<>):
	<v>...<><>

Priority is from left to right.
<c><v>Superclass1<><>'s members take precedence over other super classes.
@
@ subclass, superclass



### Class - Call Superclass

<cb>super().__init__()<>

<cb>class <v>class1<>(<v>Superclass1<>):

	def __init__(self, <v>...<>):
		super().__init__(<v>arg_1<>, <v>...<>)
<>
@
@ parent, __init__(), super().__init__()



### Class - New Instance

<cb>= <v>Class1<>(<v>arg_1<>, <v>...<>)<>
@
@ new, instantiate, create



### Class - Instance Variable

<cb>class <v>Class1<>:

	def <v>some_method<>(self):

		self.<v>variable_1<> = <v>value<>			<#># Create / Set<>

		= self.<v>variable_1<>				<#># Get<><>

Get:

<cb>= <v>class_1<>.<v>variable_1<><>

Set:

<cb><v>class_1<>.<v>variable_1<> = <v>new_value<><>

Define instance variables in the constructor so they are always available.
Reference instance variable internally in the class with '<b>self.<>' .
Reference instance variable through instance name outside of class.
@
@ define, create



### Class - Instance Method

Define:

<cb>class <v>Class1<>:

	def <v>method_1<>(self, <v>arg_1<>, <v>...<>):
		<v>...<><>

Call Inside Class:

<cb>class <v>Class1<>:

	def <v>...<>(self):

		self.<v>method_1<>(<v>arg_1<>, <v>...<>)<>

Call Outside Class:

<cb><v>class_1<>.<v>method_1<>(<v>arg_1<>, <v>...<>)<>

Reference instance methods internally in the class with '<b>self.<>' .
Reference instance methods externally through the instance name (u>class_1<> in this case).
@
@ define, create



### Class - Class Variable

Define:

<cb>class <v>Class1<>:
	<v>variable_1<> = <v>value<>					<#># Static Variable<><>

Get:

<cb>= <v>Class1<>.<v>variable_1<><>

Set:

<cb><v>Class1<>.<v>variable_1<> = <v>new_value<><>

Reference class or static variable through it class name.
@
@ Static



### Class - Class Method

Define:

<cb>class <v>Class1<>:

	@classmethod					<#>#1<>
	<v>method_1<>(cls, <v>arg_1<>, <v>...<>):		<#>#2<>
		cls.<v>class_variable<> = <v>value<>
		<v>...<><>

Call:

<cb><v>Class1<>.<v>method_1<>(<v>arg_1<>, <v>...<>)<>


Define with <c>@classmethod<>.
Reference the method using the class name (<c><v>Class1<><> in this case).

This is useful if you need to know exactly what type of class was instantiated.


\#1  <s>-<>  <c>@classmethod<> defines a class method.

\#2  <s>-<>  The class is passed in as <c>cls<>.
@
@ @classmethod, static, cls



### Class - Static Method

Define:

<cb>class <v>Class1<>:

	@staticmethod						<#># Defines Static Method<>
	<v>method_1<>(<v>arg_1<>, <v>...<>):
		<v>...<><>

Call:

<cb><v>Class1<>.<v>method_1<>(<v>arg_1<>, <v>...<>)<>

Define with <c>@staticmethod<>.
Reference through the class name.
Can not update class variables.
@
@ @staticmethod



### Class - Class Method vs Static Method

Class Method:

Use for class level methods than work with the class itself.



Static Method:

Use for utility methods that are related to the class but do not interact with the class.
@
@ @classmethod, @staticmethod



### Class - Equals - Is Type or Subtype?

<cb>= isinstance(<v>item_1<>, <v>Class1<>)<>

Returns true if <c><v>item_1<><> is a type or a subtype of <c><v>Class1<><>.
@
@ isinstance(), subclass, isclass, compare, is instance of



### Class - Equals - Is Same Class?

<cb>= type(<v>item_1<>) is <v>Class1<><>

Returns true if <c><v>item_1<><> is the class <c><v>Class1<><>.
Does not match subtypes.
@
@ subclass, isclass. type(), compare



### Class - Equals - Is Same

Implement Method:

<cb>def __eq__(self, <v>other<>):<>

Compare:

<cb>= <v>item1<> == <v>item2<><>

<cb>if <v>item1<> == <v>item2<>:<>


Implement <c>__eq__()<> to allow class instances to be compared with equals (<c>==<>).


Example:

<cb><#># Define Class:<>

class <v>SampleClass<>:

	def __init__(self, <v>value_1<> = None, <v>value_2<> = None):

		self.<v>value_1<> = <v>value_1<>
		self.<v>value_2<> = <v>value_2<>

	def __eq__ (self, <v>other<>):

		if not isinstance(<v>other<>, <v>SampleClass<>):
			return False

		return (self.<v>value_1<> == <v>other<>.<v>value_1<> and
				self.<v>value_2<> == <v>other<>.<v>value_2<>)

<#># Instantiate:<>

<v>item1<> = <v>SampleClass<>(<v>1<>, <v>"one"<>)
<v>item2<> = <v>SampleClass<>(<v>2<>, <v>"two"<>)

<#># Compare:<>

if <v>item1<> == <v>item2<>:
	print("The same.")
else:
	print("Different.")<>
@
@ Instance, __eq__(), ==



### Class - DocString

<cb>class <v>Class1<>:
	<#>"""Class docstring."""<>

	<v>...<><>
@
@ Create, Add, Document, """



### Class - DocString - Read

<cb>= <v>Class1<>.__doc__						<#># From Class<><>

<cb>= <v>class_1<>.__doc__						<#># From Instance<><>
@
@ to, get, retrieve, __doc__()



### Class - self

<cb>class <v>Class1<>:

	def <v>function_1<>(self):

		self.<v>_variable_1<> = <v>...<>
		<v>...<> = self.<v>_variable_1<>

		self.<v>function_1<>()<>


<c>self<> is the current instance of the class.

Reference any instance variables or functions using <c>self<>.
<c>self<> must be the first argument in any non static functions.
Do not pass <c>self<> to a non static function. It will be passed automatically.
@
@ this, instance, self-only, this-only, self.



### Class - To String

<cb>class <v>Class1<>:
	<v>...<>
	def __repr__(self):
		return <v>string_representing_class<><>

<cb>= <v>class_1<>__repr__())<>

<cb>= repr(<v>class_1<>)							<#># Equivalent to <c>.__repr()<><><>

Override <c>__repr__<> to create class string.
@
@ Repr, tostring, __repr__()



## Abstract Class
@
@ Interfaces



### Abstract Class - Define

<cb>from abc import ABC, abstractmethod

class <v>AbstractClass1<>(ABC):

	@abstractmethod
	def <v>abstract_method_1<>(self):
		pass<>
@
@ abc, @abstractmethod, interface, (ABC), abc.abc, abc.abstractmethod



### Abstract Class - Use

<cb>class <v>Subclass1<>(<v>AbstractClass1<>):

	def <v>abstract_method_1<>(self):		<#># Implement Abstract Method<>
		<v>...<><>



## Class Properties

Defines class functions as if they were class variables.
Use to encapsulate mutation of internal variables.
@
@ getter, setter, @property, method as, property, to, into



### Class Property - Define

<cb>class <v>Class1<>:

	def __init__(self):

		self.<v>_variable_1<> = <v>value<>

	@property
	def <v>variable_1<>(self):

		return self.<v>_variable_1<>

	@<v>variable_1<>.setter
	def <v>variable_1<>(self, <v>arg_1<>):

		self.<v>_variable_1<> = <v>arg_1<><>
@
@ @property, .setter



### Class Property - Use

<cb><v>class_1<> = <v>Class1<>()

<v>class_1<>.<v>variable_1<> = <v>value_1<>		<#>#1<>
<v>value_2<> = <v>class_1<>.<v>variable_1<><>

\#1  -  Treat like an instance variable.
@
@ access, get, set


## Class Introspection



### Class - Name

<cb>= <v>Class1<>.__name__						<#># From Class<><>

<cb>= type(<v>class_1<>).__name__				<#># From Instance<><>
@
@ __name__, type()



### Class - Attribute - Exists?

<cb>= hasattr(<v>class_1<>, '<v>attribute_name<>')<>
@
@ hasattr(), member



### Class - Attribute - Get

<cb>= getattr(<v>class_1<>, '<v>attribute_name<>')<>
@
@ getattr(), member



### Class - Attribute - Set

<cb>setattr(<v>class_1<>, '<v>attribute_name<>', <v>value<>)<>

Creates or updates a class attribute.

Access using <c><v>class_1<>.<v>attribute_name<><>
@
@ setattr(), member, create, add, new



### Class - Attribute - Names

<cb>= <v>class_1<>.__dict__.keys()<>

<cb>= list(<v>class_1<>.__dict__.keys())			<#># As List<><>
@
@ __dict__, .keys()



### Class - Attributes - To Dict

<cb>= <v>instance_1<>.__dict__<>
@
@ __dict__, members



## Class Extras



### Class - Monkey Patch

<cb><v>Class1<>.<v>method_to_patch<> = <v>patch_1<><>

<cb><#># Class to Patch:<>

class <v>Class1<>:
    def <v>method_to_patch<>(self):
        <v>...<>

<v>class_1<> = <v>Class1<>()


<#># Assign Patch:<>

def <v>patch_1<>(self):
    <v>...<>

<v>Class1<>.<v>method_to_patch<> = <v>patch_1<>

<v>class_1<>.<v>method_to_patch<>()<>


Changes the behaviour of a method at runtime.
Apply the patch to the class, not the instance.
This will change all instances of the class.


Example:

<cb>class <v>Class1<>:
    def <v>print_message<>(self):
        print("Original Message")

def <v>patch_1<>(self):
    print("Patched Message")

<v>class_1<> = <v>Class1<>()
<v>class_1<>.print_message()

<v>Class1<>.print_message = patch_1
<v>class_1<>.print_message()

<#># Prints:
\#
\# Original Message
\# Patched Message<><>



### Class - View Help, Structure

<cb>help(<v>Class1<>)<>

Prints docstrings, methods, everything about the class.
@
@ help()



### Class - Operator - in

<cb>def <v>Class1<>:

	def __contains__(self, <v>key<>)
		<v>...<><>

<cb>if <v>item_1<> in <c>class_1<>:					<#># Using with <c>in<><>
	<v>...<><>

Override <c>__contains__<> to use class with <c>in<> operator.
Return true if <c><v>key<><> is in the class.
@
@ __contains__(), __in__(), contains



# Iterable, Iterator
@
@ iterable-only, iterator-only, iter-only, iterating, iterators



### Iterable - Define

<cb>def <v>IterableClass1<>:

	def __iter__(self):					<#>#1<>
		return <v>iterator<>					<#>#2<><>


Defines a class as iterable.


\#1  <s>-<>  Implement <c>__iter__()<> to make the class iterable.

\#2  <s>-<>  Return an iterator for the class data.


Example:

<cb><#># Define:<>

class <v>Integers<>:

	def __init__(self, max):
		self.integers = range(1,max + 1)

	def __iter__(self):
		return iter(self.integers)


<#># Use:<>

<v>integers_1<> = <v>Integers<>(<v>5<>)

for <v>integer<> in <v>integers_1<>:
	print(<v>integer<>)<>
@
@ create, define, __iter__(), 



### Iterable - Define - Self Iterable

<cb>def <v>IterableIteratorClass1<>:

	def __iter__(self):					<#>#1<>
		return self

	def __next__(self):					<#>#2<>

		If <v>at_the_end<>:
			raise StopIteration			<#>#3<>
		else:
			return <v>next_item<>			<#>#4<><>


This class is both an iterator and an iterable.


\#1, #2  <s>-<>  Implement <c>__iter__()<> and <c>__next__()<> to make this both an iterabale and an iterator.

\#3  <s>-<>  Raise <c>StopIteration<> to indicate iterating is complete.

\#4  <s>-<>  Return the next item in the iteration with <c>__next__()<>.
@
@ create, define, iterator, iterable, __iter__(), __next__()



### Iterator - Define

<cb>class <v>Iterator1<>:

	def __next__(self):					<#>#1<>

		If <v>at_the_end<>:
			raise StopIteration			<#>#2<>
		else:
			return <v>next_item<>			<#>#3<><>


Defines an iterator class.


\#1  <s>-<>  Implement c>__next__()<> to make this an iterator.

\#2  <s>-<>  Raise <c>StopIteration<> to indicate iterating is complete.

\#3  <s>-<>  Return the next item in the iteration with <c>__next__()<>.


Example:

<cb><#># Define:<>

class <v>ListIterator<>:

	def __init__(self, <v>list<>):

		self.<v>list<> = <v>list<>
		self.<v>index<> = -1

	def __next__(self):

		self.<v>index<> += 1

		if self.<v>index<> == len(self.<v>list<>):
			raise StopIteration()

		return self.<v>list<>[self.<v>index<>]


<#># Use:<>

<v>iterator<> = <v>ListIterator<>([1, 2, 3])

try:
	while (<v>value<> := next(<v>iterator<>)):
		print(<v>value<>)
except StopIteration:
	print("Done.")<>
@
@ create, define, __next__()



### Iterator - Get Next

<cb>= next(<v>iterator_1<>)						<#>#1<><>

or

<cb>= next(<v>iterator_1<>, <v>default_value<>)		<#>#2<><>


Returns the next value from an iterator.


\#1  <s>-<>  When no more elements, raises <c>StopIteration<>.

\#2  <s>-<>  When no more elements, returns <c><v>default_value<><>.



Example:

<cb><v>values<> = iter([1, 2, 3])

while <v>value<> := next(<v>values<>):
	print(<v>value<>)<>
@
@ Element, Item, Value, next()



# Generators
@
@ generate



### Generator Expression

<cb>= (<v>expression<> for <v>item<> in <v>sequence_1<>)<>

<cb>= (<v>expression<> for <v>item<> in <v>sequence_1<> if <v>condition<>)<>

Returns: <c>generator<>


Similar to a list comprehension but are evaluated lazily.
Lazy iterators - Values are evaluated and returned one at a time, and only when requested.


Examples:

<cb><v>list_1<> = [1, 2, 3, 4, 5]

<v>generator<> = (<v>i<> * 2 for <v>i<> in <v>list_1<>)

print(list(generator))							<#># Prints [2, 4, 6, 8, 10]<><>

<cb><v>list_1<> = [1, 2, 3, 4, 5]

<v>generator<> = (<v>i<> * 2 for <v>i<> in <v>list_1<> if <v>i<> \<= 3)

print(list(generator))							<#># Prints [2, 4, 6]<><>
@
@ for in if ()
@ Filter, list, sequence



### Generator Expression - Get Next

<cb>= next(<v>generator_1<>)<>
@
@ next()



### Generator Expression - To List

<cb>= list(<v>generator_1<>)<>
@
@ from, convert, conversion, list()



### Yield

<cb>yield <v>return_value<><>

<cb>def <v>some_function<>():					<#>#1<>

	for <v>list_value<> in <v>list_1<>:
		yield <v>list_value<>				<#>#2<>


for <v>value<> in <v>some_function()<>:			<#>#3<>
	<v>...<><>

Returns: <c>generator<>

\#1  <s>-<>  <c>yield<> must be defined inside a function.

\#2  <s>-<>  <c>yield<> temporarily suspends operation and returns <c><v>list_value<><>.

\#3  <s>-<>  The function returns a generator that can be used to iterate over the yield values.


<c>yield<> turns a function into a generator.
The generator returns a result every time yield is executed, suspending the function.
Execution continues when the generator is called again.


Example:

<cb><#>Define:<>

from math import factorial

def <v>factorial_series<>(<v>n<>):
	for <v>i<> in range (<v>n<> + 1):
		yield factorial(<v>i<>)


<#>Use:<>

for <v>value<> in <v>factorial_series<>(4):
	print(<v>value<>)<>



### Yield From

<cb>yield from <v>generator_1<><>

<cb>def <v>some_function<>():
	yield from <v>generator_1<><>


Short For:

<cb>[yield <v>item<> for <v>item<> in <v>generator_1<>]<>


Allows the function to delegate part of its generator results to a 2nd generator.
Must be inside a function.
This is very useful for recursion.
@
@ delegate, subgenerator, subgenerate, recursion, recursive, to


# Packages, Modules



### Package Directory - Define

Create File Named:

<cb>__init__.py<>

Create the file in the subdirectory that contains modules.

Package directories require the presence of the file '__init__.py'.
<c>__init__.py<> can be empty.



### Package Directory - Name

The package name is the directory name.



### Module - Name

<cb>= __name__<>

Returns the module name.
'<c>__main__<>' is the root module called in the program.
@
@ __name__, __main__



### Import - Module

Import:

<cb>import <v>module_1<><>

<cb>import <v>package1<>.<v>subpackage1<>.<v>module_1<><>

<cb>from <v>package1<>.<v>subpackage1<> import <v>module_1<><>


Use:

<cb><v>module_1<>.<v>item_1<><v>...<><>



### Import - Class / Function

<cb>from <v>package1<>.<v>module_1<> import <v>Class1<><>

<cb>from <v>package1<>.<v>module_1<> import <v>function_1<><>



# Math Functions



## Standard



### Absolute Value

<cb>= abs(<v>value<>)<>
@
@ abs()



### Modulo

<cb>= <v>a<> % <v>b<><>

<cb><v>a<> %= <v>b<><>


Returns the remainder after dividing <c><v>a<><> by <c><v>b<><>.


Example:

<cb><v>modulus<> = <v>7<> % <v>3<>							<#># Returns Modulus 1<><>
@
@ Modulus, Remainder, %, %=



## Math Package



### Factorial

<cb>from math import factorial

= factorial(<v>n<>)<>
@
@ math.factorial(), .factorial()



## Math Constants
@
@ Package, Library



### Constant - Exponential Constant

<cb>from math import e

= e<>

Euler's Number

Returns 2.718281828459045.
@
@ math.e, euler's number, eulers number



### Constant - Pi

<cb>from math import pi

= pi<>

π or 3.141592653589793
@
@ math.pi



### Constant - Tau

<cb>from math import tau

= tau<>

Returns 2π or 6.283185.
@
@ math.tau



### Constant - Infinity

<cb>from math import inf

= inf<>

<cb>= float('inf')<>

These are equivalent.

Positive infinity.
@
@ math.inf



### Constant - Not a Number (NAN)

<cb>from math import nan

= nan<>

Equivalent To:

<cb>= float('nan')<>


Returns: <c>float<>
@
@ math.nan, float, isnan



## Power, Logarithm
@
@ Package, Library



### Exponent (exp)

<cb>from math import exp

= exp(<v>x<>)<>
@
@ math.exp(), .exp()


Returns e raised to the power of <v>x<>.
@
@ exp-only, exponent-only



### Exponent Minus 1 (expm1)

<cb>from math import expm1

= expm1(<v>x<>)<>

Returns e raised to the power of <v>x<> minus 1.
@
@ exponent - one, subtract one
@ exp-only, exponent-only, math.expm1, .expm1()




### Log

Natural Log

<cb>from math import log

= log(<v>x<>)<>

Log For Specific Base:

<cb>from math import log

= log(<v>x<>, <v>base<>)<>

Uses <v>base<> as the base if given.
Otherwise it uses the natural log (base e).
@
@ log-only, logarithm-only, math.log, .log(), ln(), natural



### Log 10

<cb>from math import log10

= log10(<v>x<>)<>
@
@ log 10, base 10, math.log10(), .log10()
@ log-only, logarithm-only




### Log 2

<cb>from math import log2

= log2(<v>x<>)<>
@
@ log2, base 2, math.log2(), .log2()
@ log-only, logarithm-only




### Log 1 Plus (log1p)

<cb>from math import log1p

= log1p(<v>x<>)<>

Equivalent to <c>log(1 + <v>x<>)<>.

Uses the natural log (base e).
@
@ log one +
@ log-only, logarithm-only, math.log1p(), .log1p()



### Power

<cb>= <v>x<> ** <v>y<><>

Or

<cb>= pow(<v>x<>, <v>y<>)<>


Returns <c><v>x<><> to the power of <c><v>y<><>.

<b>pow()<> is a standard function.  No import required.
@
@ inverse logarithm, power of, pow(), **



### Square

<cb>= <v>x<> ** 2<>

Or

<cb>= pow(<v>x<>, 2)<>


<b>pow()<> is a standard function.  No import required.
@
@ **, power of, pow()



### Square Root

<cb>from math import sqrt

= sqrt(<v>x<>)<>
@
@ math.sqrt, .sqrt()



## Rounding



### Round

<cb>= round(<v>value<>)<>

<cb>= round(<v>value<>, <v>decimals<>)<>


Rounds up or down.


Example:

<cb><v>rounded_1<> = round(<v>1.5<>)					<#># Returns 1.0<><>	

<cb><v>rounded_1<> = round(<v>1.6<>)					<#># Returns 2.0<><>

<cb><v>rounded_1<> = round(<v>1.56<>, <v>1<>)				<#># Returns 1.6<><>
@
@ decimals, digits, round()



### Round To Floor

<cb>from math import floor

<v>floor_1<> = floor(<v>value_1<>)<>

Always rounds downwards (e.g. -1.5 rounds to -2.0).


Examples:

<cb>from math import floor

<v>rounded_1<> = floor(<v>1.6<>)					<#># Returns 1.0<><>

<cb><v>rounded_1<> = floor(<v>-1.6<>)					<#># Returns -2.0<><>
@
@ package, library, math.floor(), .floor(), down



### Round To 0

<cb>= int(<v>value<>)<>


Rounds to the integer nearest to 0.


Examples:

<cb><v>rounded_1<> = int(<v>1.6<>)					<#># Returns 1<><>

<cb><v>rounded_1<> = int(<v>-1.6<>)					<#># Returns -1<><>
@
@ int(), down



### Round To Ceiling

<cb>from math import ceil

= ceil(<v>value<>)<>

Always rounds upwards (e.g. -1.5 rounds to -1.0).


Examples:

<cb>from math import ceil

<v>rounded_1<> = ceil(<v>1.6<>)					<#># Returns 2.0<><>

<cb><v>rounded_1<> = ceil(<v>-1.6<>)					<#># Returns -1.0<><>
@
@ ceiling, math.ceil(), .ceil(), up
@ package, library



## Trigonometry
@ 
@ Trigonometric, Package, Library


### Arccosine

<cb>from math import acos

= acos(<v>value<>)<>


Returns: <c>float<> (radians)

<c>-1 \<= <v>value<> \<= 0<>
<c> 0 \<= <v>result<> \<= pi<>
@
@ math.acos(), .acos(), arc cosine, inverse



### Arcsine

<cb>from math import asin

= asin(<v>value<>)<>


Returns: <c>float<> (radians)

<c>-1 \<= <v>value<> \<= 0<>
<c>-pi/2 \<= <v>result<> \<= pi/2<>
@
@ math.asin(), .asin(), arc sine, inverse



### Arctan

<cb>from math import atan

= atan(<v>value<>)<>


Returns: <c>float<> (radians)

<c>-pi/2 \<= <v>result<> \<= pi/2<>
@
@ arc tangent, math.atan(), .atan(), arc tan, inverse



### Cosine

<cb>from math import cos

= cos(<v>radians_1<>)<>


Returns: <c>float<> (radians)

<c>-1 \<= <v>value<> \<= 0<>
<c>0 \<= <v>result<> \<= pi<>
@
@ math.cos(), .cos()


### Sine

<cb>from math import sin

= sin(<v>radians_1<>)<>


Returns: <c>float<> (radians)

<c>-1 \<= <v>value<> \<= 0<>
<c>-pi/2 \<= <v>result<> \<= pi/2<>
@
@ math.sin(), .sin()



### Tan

<cb>from math import tan

= tan(<v>radians_1<>)<>


Returns: <c>float<> (radians)

<c>-pi/2 \<= <v>result<> \<= pi/2<>
@
@ tangent, math.tan(), .tan()



### Degrees To Radians

<cb>from math import radians

= radians(<v>degrees_1<>)<>
@
@ converting, conversion, from
@ math.radians()



### Radians To Degrees

<cb>from math import degrees

= degrees(<v>radians_1<>)<>
@
@ converting, conversion, from
@ math.degrees(), .degrees()



# Standard Functions

Built in functions in Python
@
@ std


### Hash

<cb>= hash(<v>value<>)<>

Returns: <c>int<>


Example:

<cb><v>hash_1<> = hash("The quick brown fox jumps over the lazy dog")

<#># Returns -7136537410058541255<><>
@
@ hashing, create, new, hash-only, hash()



## JSON Functions



### From JSON

<cb>from json import loads

<v>data_1<> = loads(<v>json_string<>)<>
@
@ parse, convert, from string, json.loads(), .loads()



### To JSON

<cb>from json import dumps

<v>json_string<> = dumps(<v>data_1<>)<>
@
@ parse, from, to string, json.dumps(), .dumps()



## Random

Creates pseudo-random numbers.
@
@ randomize, rnd
@ generate, create, new, generator



### Random Boolean

<cb>from random import choice

<v>random_1<> = choice([True, False])<>
@
@ choice, choose, pick, random.choice(), .choice()



### Random Character

<cb>from random import choice

<v>random_1<> = choice(<v>letters_string<>)<>

Returns a single random character from <v>letters_string<>.


Example:

<cb>from random import choice

<v>character_1<> = choice(<v>'abcde'<>)<>
@
@ choice, choose, pick, random.choice(), .choice()



### Random Float

<cb>from random import random

<v>random_1<> = random()				<#># 0.0 \<= x \< 1.0<><>

<cb>from random import uniform

<v>random_2<> = uniform(<v>min<>, <v>max<>)		<#># min \<= x \< max<><>


Example:

<cb>from random import uniform

<v>random_float<> = uniform(<v>1.0<>, <v>5.0<>)	<#># Returns 1.0 \<= x \< 5.0<><>
@
@ number, random.uniform(), .uniform(), random.random(), .random()



### Random Integer

<cb>from random import randrange

<v>random_int_1<> = randrange(<v>max_plus_1<>)		<#># 0 \<= x \< <c>max_plus_1<><><>

<cb>from random import randint

= randint(<v>min<>, <v>max_plus_1<>) 				<#># min \<= x \< <c>max_plus_1<><><>

<cb>from random import randrange

= random.randrange(<v>min<>, <v>max_plus_1<>, <v>step<>)<>
@
@ number, random.randint(), .randint(), random.randrange(), .randrange(), step



### Random - From Sequence

<cb>from random import sample

<v>random_item<> = sample(<v>sequence_1<>, 1)[0] 		<#># Pick 1 Item<><>

Returns: 1 Item

<cb>= sample(<v>sequence_1<>, <v>count<>)				<#># Pick <c>count<> Items<><>

Returns: List of Items


Return one or more items from <c><v>sequence_1<><>.
@
@ list, tuple, pick, choose, item, element
@ random.sample(), .sample()



## Range

<cb>= range(<v>max_plus_1<>)<>

<cb>= range(<v>min<>, <v>max_plus_1<>)<>

<cb>= range(<v>min<>, <v>max_plus_1<>, <v>step<>)<>

Type: <c>range<>


Range is an immutable sequence of integers.

The integers start with <c><v>min<><> and end with the value before <c><v>max_plus_1<><>.
<c><v>min<><> defaults to 0.
Technically <c>range<> is a class of immutable iterable objects.
Range can be used anywhere a sequence can be used.


Examples:

<cb><v>range_1<> = range(<v>4<>)						<#># Returns 0, 1, 2, 3<>
<v>range_2<> = range(<v>2<>, <v>4<>)					<#># Returns 2, 3<>
<v>range_3<> = range(<v>1<>, <v>11<>, <v>5<>)				<#># Returns 1, 5, 10<><>
@
@ step, range(), new, create



## Regular Expression Functions
@
@ regex, string, strings, expressions, regex-only, regular-expressions-only



### Regular Expressions - Find

<cb>from re import search

<v>match<> = search(<v>match_pattern<>, <v>string_to_search<>)<>

Returns: <c>re.Match<> | <c>None<>

<cb><v>match_text<> = <v>match<>.group()<><>

Returns: <c>str<>


Returns the first match.
Returns <c>None<> if no match found.


Example:

<cb>from re import search

<v>string_1<> = "<v>123 abc 789<>"
<v>match<> = search(r"<v>[a-zA-Z]+<>", <v>string_1<>)		<#># Find the letters in the string.<>

<v>letters_1<> = <v>match<>.group()							<#># Returns "abc"<>
<v>letters_2<> = <v>string_1<>[<v>match<>.start():<v>match<>.end()]		<#># Returns "abc"<><>
@
@ get, match, exists, .search(), re.search()



### Regular Expressions - Get All

<cb>from re import findall

<v>match<> = findall(<v>match_pattern<>, <v>string_to_search<>)<>

Returrns: <c>list<> of <c>str<>

Returns a list of all the matches.


Example:

<cb>from re import findall

<v>string_1<> = "<v>123 abc 456 def 789<>"
<v>matches<> = findall(r"<v>[a-zA-Z]+<>", <v>string_1<>)		<#># Returns ["abc", "def"]<><>
@
@ Find, re.findall(), .findall()



### Regular Expressions - Is Match

<cb>from re import match

= match(<v>match_pattern<>, <v>string_1<>)<>

Returns: <c>bool<>

Returns <c>True<> if <c><v>string_1<><> matches <c><v>match_pattern<><>.
@
@ Matches, re.match(), .match()



### Regular Expressions - Replace

<cb>from re import sub

<v>string_2<> = sub(<v>match_pattern<>, <v>replacement<>, <v>string_to_update<>)<>

or

<cb><v>string_2<> = sub(<v>match_pattern<>, <v>replacement<>, <v>string_to_update<>, <v>split_count<>)<>

Returns a new string with all matches replaced.
<c>sub<> is short for substitute.


Example:

<cb>from re import sub

<v>original<> = "<v>ab 12 cd 345<>"
<v>updated<> = sub(r"<v>\\d+<>", "(digits)", <v>original<>)			<#># Returns "ab (digits) cd (digits)"<><>
@
@ Substitute, re.sub(), .sub()



### Regular Expressions - Split

<cb>from re import split

<v>splits<> = split(<v>split_pattern<>, <v>string_to_split<>)<>

or

<cb><v>splits<> = split(<v>split_pattern<>, <v>string_to_split<>, <v>split_count<>)<>

Returns: <c>list<> of <c>str<>

Returns a list of strings split on <c><v>split_expression<><>.
<c><v>split_expression<><> is not returned in the results.
Stops after splitting <c><v>split_count<><> times if given.


Example:

<cb>from re import split

<v>string_1<> = "<v>ab12cd34ef<>"
<v>split_1<> = split(r"<v>\\d+<>", <v>string_1<>)		<#># Returns ['ab', 'cd', 'ef']<><>
@
@ .split(), re.split()



### Regular Expressions - Patterns

Escape					<c>\\<>

Escape These				<c>\ ^ $ . * + ? - & | {} [] () <><>

Any Character			<c>.<>

Alphanumeric, _			<c>\\w<>			<#># A-Z, a-z, 0-9, _<>			
Non Alphanumeric, _		<c>\\W<>
Digit					<c>\\d<>			<#># 0-9<>	
Non Digit				<c>\\D<>

Whitespace				<c>\\s<>
Non Whitespace			<c>\\S<>

Starts With				<c>\\A<>
Ends With				<c>\\Z<>
Starts or Ends With		<c>\\b<>
Doesn't Start or Ends With	<c>\\B<>

Set. Either <v>a<>, <v>b<> or <v>c<>			<c>[<v>a<><v>b<><v>c<>]<>
Not						<c>^<v>a<><>
Or						<c><v>a<>|<v>b<><>
From - To				<c><v>a<>-<v>z<><>

0 or 1					<c>?<>
0 or More				<c>*<>
1 or More				<c>+<>
<c><v>n<><> Times					<c>{<v>n<>}<>
<c><v>m<><> to <c><v>n<><> Times				<c>{<v>m<>,<v>n<>}<>

Match After				<c>(?\<=<v>after_this<>)<v>match<><>
Match Before				<c><v>match<>(?\=<v>before_this<>)<>
@
@ Codes, Syntax, ?, *, +
@ whitespaces, white spaces



### Regular Expressions - Pattern Reverse Lookup

<c>\\<>		Escape

<c>.<>		Any Character
<c>^<>		Starts With
<c>$<>		Ends With

<c>*<>		0 or More Times
<c>+<>		1 or More Times
<c>?<>		0 or 1 Times
<c>{<v>m<>}<>		<c><v>m<><> Times
<c>{<v>m<>,<v>n<>}<>	<c><v>m<><> to <c><v>n<><> Times

<c>^<v>a<><>		Not
<c><v>a<>|<v>b<><>		<c><v>a<><> or <c><v>b<><>
<c><v>a<>-<v>z<><>		<c><v>a<><> to <c><v>z<><>

<c>[<v>...<>]<>	Set (One of These)
<c>(<v>...<>)<>	Group

<c>\\A<>		Start of String
<c>\\b<>		Beginning or End of Word
<c>\\B<>		Not Beginning or End of Word
<c>\\d<>		Digit (0-9)
<c>\\D<>		Non Digit (0-9)
<c>\\s<>		Whitespace Character
<c>\\S<>		Non Whitespace Character
<c>\\w<>		Word Character (a-z, A-Z, 0-9, _)
<c>\\W<>		Non Word Character
<c>\\Z<>		End of String

@
@ Codes



## UUID

<cb>import uuid 
  
<v>uuid_1<> = uuid.uuid1()<>

Returns: <c>UUID<>


Yes, there is a '1' in the function name '<c>.uuid1()<>'. Why? I've no idea.


Example:

<cb>import uuid 
  
<v>uuid_1<> = uuid.uuid1()

<v>uuid_bytes<> = <v>uuid_1<>.bytes		<#># b'\x03\xeamdJ\xc2\x11\xeb\xa9\xdd\xac\xdeH\x00\x11"'<>
<v>uuid_hex<> = <v>uuid_1<>.hex			<#># 03ea6d644ac211eba9ddacde48001122<>
<v>uuid_int<> = <v>uuid_1<>.int			<#># 5204900180851453705537495610857361698<><>
@
@ new, create, uuid-only, bytes, binary, hex, hexadecimal, uuid.uuid1(), .uuid1()



# Encode, Decode
@
@ encodings, decodings, to, from



### ASCII - Encode To ASCII

<cb>= <v>string_1<>.encode("ascii")<>

Returns: <c>bytes<>


Converts a string to an ASCII encoded byte array.
Non ASCII characters will raise an exception.
@
@ string, str, .encode()



### ASCII - Decode From ASCII

<cb>= <v>bytes_1<>.decode("ascii")<>

Retuns: <c>str<>


Converts an ASCII encoded byte array to a string.
@
@ bytes, string, .decode()



### UTF-8 - Encode To UTF-8

<cb>= <v>string_1<>.encode("utf-8")<>

Returns: <c>bytes<>

Converts a string to an utf-8 encoded byte array.
@
@ string, str, .encode()



### UTF-8 - Decode From UTF-8

<cb>= <v>bytes_1<>.decode("utf-8")<>

Retuns: <c>str<>

Converts a utf-8 encoded byte array to a string.
@
@ bytes, string, .decode()



### Hash - To MD5

<!>Do not use MD5
(deprecated, vulnerabilities)<>

<cb>from hashlib import md5

= md5(<v>bytes_1<>)<>


Returns: <c>_hashlib.HASH<>


Converts a byte array into an MD5 hash.


Note:

MD5 is deprecated. Do not use.
It has major vulnerabilities that can be exploited.

Use <#>SHA2<> instead.
@
@ hash, encode, hashlib.md5(), .md5()



#### Hash - To MD5 Digest

<!>Do not use MD5
(deprecated, vulnerabilities)<>

<cb>from hashlib import md5

= md5(<v>bytes_1<>).digest()<>


Returns: <c>bytes<>


Converts a byte array into an MD5 digest.
@
@ hashlib.md5(), .md5().digest(), .digest()



#### Hash - To MD5 Hex Digest

<!>Do not use MD5
(deprecated, vulnerabilities)<>

<cb>from hashlib import md5

= md5(<v>bytes_1<>).hexdigest()<>


Returns: <c>str<>


Converts a byte array into hex formatted MD5 digest.
@
@ hexadecimal
@ hashlib.md5(), .md5().hexdigest(), .hexdigest()



### Hash - To SHA256

<cb>from hashlib import sha256

= sha256(<v>bytes_1<>)<>


Returns: <c>_hashlib.HASH<>


Converts a byte array into a SHA2 hash.
@
@ hash, encode, hashlib.sha256(), .sha256()
@ md5, sha2



#### Hash - To SHA256 Digest

<cb>from hashlib import sha256

= sha256(<v>bytes_1<>).digest()<>


Returns: <c>bytes<>


Converts a byte array into an SHA2 digest.
@
@ hash, encode, hashlib.sha256().digest(), .sha256().digest(), .digest()



#### Hash - To SHA256 Hex Digest

<cb>from hashlib import sha256

= sha256(<v>bytes_1<>).hexdigest()<>


Returns: <c>str<>


Converts a byte array into an SHA2 digest in hex.
@
@ hexadecimal
@ hashlib.sha256().digest(), .sha256().hexdigest(), .hexdigest()



# Files



## Directory Operations
@
@ Directories, dir-only, directory-only, directories-only
@ ops, dir-ops-only, directory-ops-only, directory-operations-only
@ Folders, folder-only, folders-only, folder-ops-only



### Directory - Copy

<cb>from shutil import copytree

copytree(<v>source<>, <v>target<>)<>
@
@ shutil.copytree(), .copytree()



### Directory - Create

<cb>from os import mkdir<>

<cb>mkdir(<v>directory_path<>)<>


Raises <c>FileExistsError<> if the directory exists.
@
@ make, os.mkdir, .mkdir()



### Directory - Create All

<cb>from os import makedirs<>

Create:

<cb>makedirs(<v>directory_path<>)<>

Ignore If Created:

<cb>makedirs(<v>directory_path<>, exist_ok = True)<>


Creates all the directories needed to form <c><v>directory_path<><>.
@
@ make directories, os.makedirs, .makedirs(), 



### Directory - Delete - Empty

<cb>from os import rmdir

rmdir(<v>directory_path<>)<>


Deletes empty directories only.
Raises <c>OSError<> if the directory is not empty.
@
@ remove, os.rmdir(), .rmdir()



### Directory - Delete - Non Empty

<cb>from shutil import rmtree

rmtree(<v>directory_path<>)<>


Deletes the directory and all its contents.
@
@ shutil.rmtree(), .rmtree(), remove



### Directory - Delete All Files

<cb>from glob import glob
from os import remove
from os.path import join

<v>files<> = glob (join (<v>directory_path<>, '<v>*<>'))
for <v>file<> in <v>files<>:
	remove (<v>file<>)<>


Deletes all the files in the directory.

To delete particular files, change <c>'*'<> to match (e.g. <c>'*.txt'<>).



### Directory - Exists? Is Directory?

<cb>from os.path import isdir

<v>is_directory<> = isdir(<v>directory_path<>)<>

Returns: <c>bool<>

Returns <c>True<> if <c><v>directory_path<><> exists and is a directory.
Otherwise, returns <c>False<>.
@
@ os.path.isdir(), .path.isdir(), .isdir()



### Directory - Read

<cb>from os import listdir

<v>file_names<> = listdir(<v>directory_path<>)<>

Returns: <c>list<> of <c>str<>

Returns all files and directories for <c><v>directory_path<><>.
Returns the file names only, not the full path.
@
@ os.listdir(), .listdir()
@ simple, basic, retrieve, ls



### Directory - Read, Directories Only

<cb>from os import listdir
from os.path import isdir
from os.path import join

<v>directories<> = filter(
		lambda file: isdir(join(<v>directory_path<>, file)),
		listdir(<v>directory_path<>))<>

Returns: <c>filter<> of <c>str<>

Returns list of all directory names in <c><v>directory_path<><>.
Returns the file names only, not the path.

Examples:

Directories in Current Directory:

<cb>from os import listdir
from os.path import isdir
from os.path import join

<v>path<> = '.'

<v>directories<> = filter(
		lambda file: isdir(join(<v>path<>, file)),
		listdir(<v>path<>))

print(list(directories))<>
@
@ os.path.isdir(), .path.isdir(), .isdir(), os.listdir(), .listdir()
@ retrieve, ls



### Directory - Read, Files Only

<cb>from os import listdir
from os.path import isfile
from os.path import join

<v>file_names<> = filter(
		lambda file: isfile(join(<v>directory_path<>, file)),
		listdir(<v>directory_path<>))<>

Returns: <c>filter<> of <c>str<>

Returns list of file names.
Only returns the name, not the path.

Examples:

Directories in Current Directory:

<cb>from os import listdir
from os.path import isfile
from os.path import join

<v>path<> = '.'

<v>files<> = filter(
		lambda file: isfile(join(<v>path<>, file)),
		listdir(<v>path<>))

print(list(files))<>
@
@ os.path.isfile(), .path.isfile(), .isfile(), os.listdir(), .listdir()
@ retrieve, ls



### Directory - Read, Filtered

<cb>from os import listdir
from fnmatch import filter

<v>file_names<> = filter(listdir(<v>directory_path<>), <v>file_filter<>)<>

Returns: <c>list<> of <c>str<>

Returns list of matching file names only.
Returns the file names only, not the path.


Example:

<cb>from os import listdir
from fnmatch import filter

<v>file_names<> = filter(listdir("<v>.<>"), "<v>*.txt<>")<>
@
@ os.listdir(), .listdir(), fnmatch.filter(), .filter()
@ wildcards, wild cards, pattern expansion, * asterisk, retrieve, ls



### Directory - Read, Full Path

<cb>from glob import glob
from os.path import join

<v>file_paths<> = glob(join(<v>directory_path<>, "*"))<>

Returns: <c>list<> of <c>str<>

Returns all files and sbdirectories in <c><v>directory_path<><>.
Returns the full path to the files.
@
@ glob.glob(), .glob()
@ retrieve, ls, absolute path



### Directory - Read, Full Path, Filtered

<cb>from glob import glob
from os.path import join

<v>file_paths<> = glob(join(<v>directory_path<>, "<v>filter<>"))<>

Returns: <c>list<> of <c>str<>

Returns all files and sbdirectories in <v>directory_path<>.
Returns the full path to the files.


Examples:

<cb>from glob import glob
from os.path import join

<v>file_paths<> = glob(join(<v>directory_path<>, "<v>*.txt<>"))<>
@
@ glob.glob(), .glob()
@ Wildcards, Wild Cards, Pattern Expansion, * Asterisk, Retrieve, ls,
@ absolute path



### Directory - Read, Full Path, Recursive
 
<cb>from glob import glob
from os.path import join

<v>file_paths<> = glob(join(<v>directory_path<>, "**", "*"), recursive=True)<>

Returns: <c>list<> of <c>str<>

Recursively
Returns full path to all files.
@
@ glob.glob(), .glob()
@ subdirectories, recursively, retrieve, ls
@ absolute path



### Directory - Read, Full Path, Recursive, Filtered
 
<cb>from glob import glob
from os.path import join

<v>file_paths<> = glob(join(<v>directory_path<>, "**", <v>filter<>), recursive=True)<>

Returns: <c>list<> of <c>str<>

Returns full path to all files.


Examples:

<cb>from glob import glob
from os.path import join

<v>filtered_files<> = glob(join(<v>directory_path<>, "**", "<v>*.txt<>"), recursive=True)<>
@
@ @ glob.glob(), .glob()
@ wildcards, wild cards, pattern expansion, * asterisk, subdirectories, recursively, retrieve, ls
@ absolute path



### Directory - Read Recursively / Walk

<cb>from os import walk

for <v>root<>, <v>directories<>, <v>files<> in walk(<v>directory_path<>):
	<v>...<><>

Returns:

<indent><table><col><c>root<><><col><c>str<><>
<col><c>directories<><><col><c>list[str]<><>
<col><c>files<><><col><c>list[str]<><><><>


Returns the list of directories and files in each directory under and including <c><v>directory_path<><>).
The current directory is returned in <c><v>root<><>.
When no files or directories are found, returns an empty list (<c>[]<>).


Example:

Walk The Current Directory:

<cb>from os import walk

for <v>root<>, <v>directories<>, <v>files<> in walk(<v>'.'<>):

	print("Current Path:", <v>root<>)
	print("Directories:", <v>directories<>)
	print("Files:", <v>files<>)
	print()<>
@
@ os.walk(), .walk(), files, path



## File Operations
@
@ ops, file-ops, file-ops-only, file-operations



### File - Get Created Datetime

<cb>from datetime import datetime
from os.path import getctime

<v>created_datetime_1<> = datetime.fromtimestamp(getctime(<v>file_name<>))<>

<cb>= datetime.fromtimestamp(getctime(<v>full_path<>))<>

Returns: <c>datetime<>

Returns the file creation time as a datetime.
@
@ os.path.getctime(), path.getctime(), .getctime(), .fromtimestamp()
@ creation, retrieve, read, date time



### File - Get Created Timestamp

<cb>from os.path import getctime

<v>created_timestamp_1<> = getctime(<v>file_name<>))<>

<cb>= getctime(<v>full_path<>)<>

Returns: <c>float<>

Returns the file creation time as a unix timestamp (epoch).
@
@ os.path.getctime(), .path.getctime(), .getctime()
@ creation, retrieve, read, date time



### File - Get Modified Datetime

<cb>from os.path import getmtime
from datetime import datetime

<v>modified_datetime_1<> = datetime.fromtimestamp(getmtime(<v>file_name<>))<>

<cb>= datetime.fromtimestamp(getmtime(<v>full_path<>))<>

Returns: <c>datetime<>

Returns the file modification time as a datetime.
@
@ os.path.getmtime(), .path.getmtime(), .getmtime(), .fromtimestamp()
@ modification, retrieve, read, modify, date time



### File - Get Modified Timestamp

<cb>from os.path import getmtime

<v>modified_timestamp_1<> = getmtime(<v>full_path<>)<>

Returns: <c>float<>

Returns the file modified time as a unix timestamp (epoch).
@
@ os.path.getmtime(), .path.getmtime(), .getmtime()
@ modification, retrieve, read, modify, date time



### File - Get Size

<cb>from os.path import getsize

= getsize(<v>file_path<>)<>
@
@ length
@ os.path.getsize(), .path.getsize(), .getsize()



### File - Copy

<cb>from shutil import copyfile

copyfile(<v>source_path<>, <v>destination_path<>)<>
@
@ shutil.copyfile(), .copyfile(), cp



### File - Delete

<cb>from os import remove

remove(<v>file_path<>)<>
@
@ .remove(), os.remove()



### File - Exists?

<cb>from os.path import exists

<v>file_exists<> = exists(<v>file_path<>)<>

Returns <c>bool<l>
@
@ os.path.exists(), path.exists(), .exists()



### File - Is File?

<cb>from os.path import isfile

<v>is_file<> = isfile(<v>file_path<>)<>

Returns <c>bool<>

Returns <c>True<> if <c><v>file_path<><> exists and is a file (not a directory).
Otherwise, returns <c>False<>.
@
@ os.path.isfile(), .path.isfile(), .isfile()



### File - Join Paths

<cb>from os.path import join

<v>joined_path<> = join(<v>path_1<>, <v>path_2<><v>...<>)<>


Returns the paths joined together with the correct OS specific file separator.
@
@ os.path.join(), .path.join(), .join()
@ merge, separator, combine, concatenate



### File - Move

<cb>from os import rename

rename(<v>source_path<>, <v>destination_path<>)<>


Moves a file to a location within the current drive only. 
@
@ os.rename(), .rename()



### File - Move - Across Drives

<cb>from shutil import move

move(<v>source_path<>, <v>destination_path<>)<>

Move within drive or copy from one to another (original not deleted with copy)
@
@ shutil.move(), .move()



### File - Rename

<cb>from os import rename

rename(<v>source_path<>, <v>destination_path<>)<>
@
@ os.rename(), .rename()



## File Manipulation
@
@ open as, .open(), io



### Binary File - Read

<cb>with open(<v>file_name<>,'rb') as file:
	<v>contents<> = file.read()<>

Returns: <c>bytes<>
@
@ 'rb', "rb", .read(), open(), with open, from



### Binary File - Read By Byte

<cb>with open(<v>file_name<>, "rb") as file:
	while (<v>next_byte<> := file.read(1)):
		<v>...<><>

Reads the file one byte at a time.
@
@ 'rb', "rb", .read(), open(), with open, from



### Binary File - Write

<cb>with open(<v>file_name<>, 'wb') as file:
	file.write(<v>contents<>)<>

Deletes the file if it exists before writing to it.
@
@ 'wb', "wb", .write(), open(), with open
@ create, new, save, to



### Binary File - Append

<cb>with open(<v>file_name<>, 'ab') as file:
	file.write(<v>contents<>)<>

Creates a new file or appends to an existing one.
@
@ 'ab', "ab", .write(), open()
@ create, new, write, append to, with open



### Text File - Read

<cb>with open(<v>file_name<>,'r') as file:
	<v>contents<> = file.read()<>

Returns: <c>str<>
@
@ 'r', "r", .read(), open(), with open, from



### Text File - Read By Character

<cb>with open(<v>file_name<>, 'r') as file:

	<v>characters<> = []
	while (<v>next_character<> := file.read(1)):
		<v>characters<>.append(<v>next_character<>)<>

Returns: <c>list<> of <c>str<>

Returns the contents of the file as a list in <c><v>lines<><>.
@
@ 'r', "r", .read(), open(), with open, from



### Text File - Read By Line

<cb>with open(<v>file_name<>, 'r') as file:

	<v>lines<> = []
	while (line := file.readline()):
		<v>lines<>.append(line.rstrip('\\n'))<>

Returns: <c>list<> of <c>str<>

Returns the contents of the file as a list in <c><v>lines<><>.
@
@ open(), with open, from
@ 'r', "r", 'rt', "rt"
@ .readline()



### Text File - Read All Lines

<cb>with open(<v>file_name<>, 'r') as file:
	<v>lines<> = [line.rstrip('\\n') for line in file]<>

Returns: <c>list<> of <c>str<>

Returns the contents of the file as a list in <c><v>lines<><>.
The line's newline character is returned by default. rstrip, removes it.
@
@ list, by
@ open(), with open, from
@ 'r', "r", 'rt', "rt"



### Text File - Write

<cb>with open(<v>file_name<>, 'w') as file:
	file.write(<v>contents<>)<>

Deletes the file if it exists before writing to it.
@
@ create, new, save
@ open(), with open, from
@ 'w', "w", 'wt', "wt"
@ .write(), to



### Text File - Append

<cb>with open(<v>file_name<>, 'a') as file:
	file.write(<v>contents<>)<>

Creates a new file or appends to an existing one.
@
@ create, new, write, append to
@ .write(), 'a', "a", open(), with open, to



### File - Seek

<cb><v>file<>.seek(<v>offset<>)<>

<cb><v>file<>.seek(<v>offset<>, <v>whence<>)<>

Positions the read / write position within a file.


<v>whence<>	= 0		Absolute Position (Default)
		= 1		Relative To Current Position
		= 2		Relative To End of File


Example:

<cb>with open(<v>file_name<>, 'r+') as file:
	file.seek(10)
	<v>content<> = file.read(10)
	file.seek(10)
	file.write("**********")<>



### File - Read / Write Modes

<card><table><col>				<><col><c>r<><><col><c>r+<><><col><c>w<><><col><c>w+<><><col><c>a<><><col><c>a+<><>
<col> <>
<col>Read<><col>✅<><col>✅<><col> <><col>✅<><col> <><col>✅<>
<col> <>
<col>Write<><col> <><col>✅<><col>✅<><col>✅<><col>✅<><col>✅<>
<col> <>
<col>Truncate<><col> <><col> <><col>✅<><col>✅<>
<col> <>
<col>Position At Start<><col>✅<><col>✅<><col>✅<><col>✅<>
<col> <>
<col>Position At End<><col> <><col> <><col> <><col> <><col>✅<><col>✅<><><>


<card><table><col><b>Mode<><><col><b>Operation<><><col><b>Pointer<><>
<col> <>
<col>r	<><col>Read Only	<><col>File Start<>
<col>r+<><col>Read / Write<><col>File Start<>
<col>w<><col>Write Only<><col>Truncated File<>
<col>w+<><col>Read / Write<><col>Truncated File<>
<col>a<><col>Write Only<><col>File End<>
<col>a+<><col>Read / Write<><col>File End<><>

<table><col>+	<><col>Read / Write<>
<col>b	<><col>Binary Mode<>
<col>t	<><col>Text Mode (Default)<><><>
@
@ r, r+, w, w+, a, a+, b, rb, wb, t, rt, wt, +
@ 'r', 'r+', 'w', 'w+', 'a', 'a+', '+', 'b', 'rb', 'wb', 't', 'rt', 'wt'
@ "r", "r+", "w", "w+", "a", "a+", "+", "b", "rb", "wb", "t", "rt", "wt"



## File / Path Parts

<cb><v>full_path<> = /<v>root_directory<>/<v>parent_directory<>/<v>file_name<><>

<cb><v>base_name<> = <v>file_name<>.<v>extension<><>
@
@ path-parts, file-parts, components



### Path - Get Directory Part

<cb>from os.path import dirname

<v>directory_1<> = dirname(<v>full_path<>)<>

Returns the full directory portion of the path.
If the last element is a directory, that will be removed.


Example:

<cb>from os.path import dirname

<v>directory_1<> = dirname('<v>/root/parent/file.txt<>')	<#># Returns '/root/parent'<><>
@
@ os.path.dirname(), .path.dirname(), .dirname()



### Path - Get Base Name Part

<cb>from os.path import basename

<v>basename_1<> = basename(<v>full_path<>)<>

Returns the file name and extension, leaving out the directory.
Use <c>ntpath.basename<> for the windows safe version of this (works with both \\ and /).
<c>= ntpath.basename(file_path)<>


Example:

<cb>from os.path import basename

<v>file_name<> = basename('<v>/root/parent/file.txt<>')	<#># Returns 'file.txt'<><>
@
@ base name
@ os.path.basename(), .path.basename(), .basename()



### Path - Get File Extension

<cb>from os.path import basename
from os.path import splitext<>

<cb><v>extension<> = splitext(<v>file_name<>)[1]<>

<cb><v>name<>, <v>extension<> = splitext(<v>file_name<>)<>

For Directory and File Name:

<cb><v>name<>, <v>extension<> = splitext(basename(<v>full_path<>))<>


Returns the file extension in <c><v>extension<><>.


Example:
<cb>from os.path import basename
from os.path import splitext

<v>name<>, <v>extension<> = splitext('<v>/root/parent/file.txt<>')	<#># Returns <c>extension<> = '.txt'<><>
@
@ part
@ os.path.splitext(), .path.splitext(), .splitext()



### Path - Get File Name

<cb>from os.path import basename
from os.path import splitext<>

<cb><v>name<> = splitext(<v>file_name<>)[0]<>

<cb><v>name<>, <v>extension<> = splitext(<v>file_name<>)<>

For Directory and File Name:

<cb><v>name<>, <v>extension<> = splitext(basename(<v>full_path<>))<>


Example:
<cb>from os.path import basename
from os.path import splitext

<v>name<>, <v>extension<> = splitext(basename('<v>/root/parent/file.txt<>'))	<#># Returns <c>name<> = ('file', '.txt')<><>
@
@ part
@ os.path.splitext(), .path.splitext(), .splitext()
@ os.path.basename(), .path.basename(), .basename()



## Path Separators



#### Path Separator - File Separator

<cb>import os

<v>separator<> = os.path.sep<>

Returns the OS specific form of the internal path separator...
the <c>/<> or <c>\\<> in <c>/<v>dir_1<>/<v>file_1<><>.
@
@ /, \
@ os.path.sep, .path.sep, .sep



#### Path Separator - Paths Separator

<cb>import os

<v>separator<> = = os.pathsep<>

Returns the OS specific form of the paths separator...
the <c>;<> or <c>:<> in <c><v>dir_1<>;<v>dir_2<>;<v>dir_3<><>
@
@ :, ;
@ os.pathsep, .pathsep



# Standard Libraries


## ConfigParser

Reads, and writes Windows style ini files.
@
@ config parser



### ConfigParser - Video Tutorial

Get going faster with our 5 minute tutorial here:

<cb><l "https://www.youtube.com/watch?v=JLMd7AJnzrc">ConfigParser Tutorial<><>



### ConfigParser - Basics

<cb>from configparser import ConfigParser

<v>config<> = ConfigParser()
<v>config<>.read(‘<v>file_name.ini<>')<>

Read Property:

<cb><v>value_1<> = <v>config<>['<v>section_name<>']['<v>property_name<>']<>

Read To Type:

<cb><v>boolean_1<> = <v>config<>.getboolean('<v>section_name<>', '<v>boolean_property<>')
<v>int_1<> = <v>config<>.getint('<v>section_name<>', '<v>int_property<>')
<v>float_1<> = <v>config<>.getfloat('<v>section_name<>', '<v>float_property<>')<>

Read From Section:

<cb><v>section_1<> = <v>config<>['<v>section_name<>']
<v>value_2<> = <v>section_1<>['<v>property_name<>']<>

Read Section Property To Type:

<cb><v>boolean_<> = <v>section_1<>.getboolean(<v>boolean_property<>')
<v>int_<> = <v>section_1<>.getint(<v>int_properte<>')
<v>float_<> = <v>section_1<>.getfloat(<v>float_property<>')<>


Sample File:

<cb>[<v>section_name<>]
<v>property_name<> = <v>Property Value<>

<v>int_property<> = <v>42<>
<v>float_property<> = <v>1.23<>
<v>boolean_property<> = <v>True<><>
@
@ Config File, Configuration, configparser.ConfigParser, .read()



### ConfigParser - File



#### ConfigParser - Read File

<cb>from configparser import ConfigParser

<v>config_parser<> = ConfigParser()
<v>config_parser<>.read(‘<v>file_name.ini<>')<>
@
@ .read()



#### ConfigParser - Read File - Sectionless Properties

Function:

<cb>from configparser import ConfigParser

def <v>read_sectionless<>(<v>file_name<>):

	with open(<v>file_name<>,'r') as file:
		contents = file.read()

	<v>config<> = ConfigParser()
	<v>config<>.read_string(f'[default]\n{contents}')
	return <v>config<>['default']<>

Read File:

<cb><v>config_1<> = <v>read_sectionless<>(<v>file_name<>)<>

Get Value:

<cb><v>property_1<> = <v>config_1<>.get('<v>property-1<>')<>



Returns all properties defined before any <c>[<v>section<>]<> in the config file.
All sections and their properties are ignored.
@
@ with sectionless properties, section-less, read



#### ConfigParser - Read From String

<cb>from configparser import ConfigParser

<v>config_parser<> = ConfigParser()
<v>config_parser<>.read_string(<v>string_representation<>)<>


Reads a string as if it were an ini file.
Useful for unit testing.
@
@ .read_string(),



#### ConfigParser - Write File

<cb>with open(<v>file_name<>, 'w') as file:
	<v>config_parser<>.write(file)<>
@
@ .write()



### ConfigParser Property


#### ConfigParser Property - Add / Update

<cb><v>config_parser<>.set('<v>section_name<>', '<v>property_name<>', <v>'value'<>)<>

or

<cb><v>config_parser<>['<v>section_name<>']['<v>property_name<>'] = <v>'value'<><>


Section <c><v>section_name<><> must exist.
<c><v>'value'<><> must be a string.
@
@ .set(), .update(), new, create



#### ConfigParser Property - Exists?

<cb>= <v>config_parser<>.has_option('<v>section_name<>', '<v>property_name<>')<>
@
@ contains, check, has, in, .has_option()



#### ConfigParser Property - Get

<cb>= <v>config_parser<>.get('<v>section_name<>', '<v>property_name<>')     <#>#1<><>

or

<cb>= <v>config_parser<>['<v>section_name<>']['<v>property_name<>']         <#>#2<><>


Returns: <c>str<>


\#1  -  Raises <c>configparser.NoSectionError<> if section not found.
\#1  -  Raises <c>configparser.NoOptionError<> if property not found.

\#2  -  Raises <c>NameError<> if section or property not found.
@
@ value, .get(), read



#### ConfigParser Property - Get or Default

<cb>= <v>config_parser<>.get('<v>section<>', '<v>property<>', fallback = '<v>fallback_value<>')<>


Returns: <c>str<>


Returns <c><v>fallback_value<><> if property not found.
@
@ value, .get(), read, default, fallback



#### ConfigParser Property - Get As Boolean

<cb>= <v>config_parser<>.getboolean('<v>section_name<>', '<v>property_name<>')<>


Returns: <c>bool<>



Raises <c>InvalidValue<> if not a boolean value.
Not case sensitive.



True Values:

<cb>true | yes | on | 1<>

False Values:

<cb>false | no | off | 0<>
@
@ value, .getbool(), .getboolean(), read



#### ConfigParser Property - Get As Integer

<cb>= <v>config_parser<>.getint('<v>section_name<>', '<v>property_name<>')<>


Returns: <c>int<>



Raises <c>InvalidValue<> if not an integer.
@
@ value, .getint(), read



#### ConfigParser Property - Get As Float

<cb>= <v>config_parser<>.getfloat('<v>section_name<>', '<v>property_name<>')<>


Returns: <c>float<>



Raises <c>InvalidValue<> if not a float.
@
@ value, .getfloat(), read



### ConfigParser Section

The ConfigParser section is a subclass of <c>MutableMapping<> (<c>collections.abc.MutableMap<>).
@
@ configparser.section, sectionproxy



#### ConfigParser Section - Add

<cb><v>config_parser<>.add_section('<v>section_name<>')<>

or

<cb><v>config_parser<>['<v>section_name<>'] = {}<>

or

<cb><v>config_parser<>['<v>section_name<>'] = {
	'<v>property-1<>': '<v>value-1<>',
	'<v>property-2<>': '<v>value-2<>',
	<v>...<>
}<>
@
@ add_section(), new, create



#### ConfigParser Section - Remove

<cb>= <v>config_parser<>.remove_section('<v>section_name<>')<>
@
@ remove_section()



#### ConfigParser Section - Exists?

<cb>= <v>config_parser<>.has_section('<v>section_name<>')<>
@
@ contains, check, has, in, .has_section()



#### ConfigParser Section - Get

<cb>= <v>config_parser<>['<v>section_name<>']<>


Raises <c>NameError<> if section not found.
@
@ read



#### ConfigParser Sections - Get All Section Names

<cb>= <v>config_parser<>.sections()<>


Returns: <c>list<> of <c>str<>


Returns a list of section names.
@
@ list of



### ConfigParser Section Properties



#### ConfigParser Section Property - Add / Update

<cb>= <v>section_1<>['<v>property_name<>'] = <v>'value'<><>
@
@ .set(), new, create



#### ConfigParser Section Property - Exists?

<cb>= '<v>property_name<>' in <v>section_1<><>
@
@ contains, check, has, in, .has_option()



#### ConfigParser Section Property - Get

<cb>= <v>section_1<>.get('<v>property_name<>')	<#>#1<><>

or

<cb>= <v>section_1<>['<v>property_name<>']		<#>#2<><>


\#1  -  Returns <c>None<> if not found.

\#2  -  Raises <c>KeyError<> if not found.
@
@ value, .get(), read



#### ConfigParser Section Property - Get As Boolean

<cb>= <v>section_1<>.getbool('<v>property_name<>')<>


Returns: <c>bool<>



Raises <c>InvalidValue<> if not a boolean value.
Not case sensitive.


True Values:

<cb>true | yes | on | 1<>

False Values:

<cb>false | no | off | 0<>
@
@ value, .getboolean(), .getbool(), read



#### ConfigParser Section Property - Get As Integer

<cb>= <v>section_1<>.getint('<v>property_name<>')<>


Returns: <c>int<>



Raises <c>InvalidValue<> if not an integer.
@
@ value, .getint(), read



#### ConfigParser Section Property - Get As Float

<cb>= <v>section_1<>.getfloat('<v>property_name<>')<>


Returns: <c>float<>



Raises <c>InvalidValue<> if not a float.
@
@ value, .getfloat(), read



#### ConfigParser Section Properties - Get All Names

<cb>= <v>config_parser<>.options(<v>section_name<>)<>

or

<cb>= list(<v>section_1<>.keys())<>


Returns: <c>list<> of <c>str<>


Returns a list of all the property names for that section.
@
@ list of property names, read



### ConfigParser - Iterate Over Values

<cb>for <v>section_name<> in <v>config_1<>.sections():

	<v>section<> = <v>config_1<>[<v>section_name<>]

	for <v>property_name<>, <v>value<> in <v>section<>.items():
		print(<v>section_name<>, <v>property_name<>, ":", <v>value<>)<>


Iterates over each section and displays all the properties and their values.
@
@ show all, configparser.sections()



### Ini File - Sample File

<cb><#># Comment line<>

[<v>section-1<>]
<v>property-1<> = <v>value 1<>
<v>property-2<> = <v>value 2<>

[<v>section-2<>]
<v>property-3<> = <v>value 3<>

[<v>types<>]
<v>bool-true-1<> = yes
<v>bool-true-2<> = true
<v>bool-true-3<> = 1
<v>bool-false<> = no

<v>int-1<> = <v>42<>
<v>float-1<> = <v>12.001<><>



## Internet / urllib
@
@ Http, Https, Urls, http-only, https-only, url-only, web, apis, io



### HTTP - Get

<cb>from urllib.request import urlopen

with urlopen(<v>url<>) as response:
	<v>content<> = response.read()<>


Returns: <c>bytes<>


Example:

<cb>from urllib.request import urlopen

with urlopen(<v>"https://www.google.com"<>) as response:
	<v>content<> = response.read()

<v>text<> = <v>content<>.decode("utf-8", "ignore")<>
@
@ urllib.request.urlopen, .request.urlopen(), .urlopen(), .read(), web page



### HTTP - Handle Error

<cb>from urllib.request import urlopen
from urllib.error import HTTPError
from urllib.error import URLError

try:

	with urlopen(<v>url<>) as response:
		<v>content<> = response.read()
	<v>...<>

except URLError as <v>error<>:

	<#># Unable to make request...<>

	<v>message<> = <v>error<>.reason

except HTTPError as <v>error<>:

	<#># Server returned error...<>

	<v>status_code<> = <v>error<>.code
	<v>message<> = <v>error<>.reason
	<v>headers<> = <v>error<>.headers<>
@
@ status code
@ urllib.request.urlopen, .request.urlopen(), .urlopen(), .read()
@ urllib.error.HTTPError, urllib.error.URLError



### HTTP - Escape URL

<cb>from urllib.parse import quote<>

<cb>= quote(<v>url_1<>)<>


Example:

<cb><v>escaped<> = quote("<v>somewebsite.com/p/page numbered - 1<>")

<#># Returns 'somewebsite.com/p/page%20numbered%20-%201'<><>
@
@ urlib.parse.quote(), parse.quote(), .quote(), encode()



### HTTP - Unescape URL

<cb>from urllib.parse import unquote<>

<cb>= unquote(<v>encoded_url_1<>)<>


Example:

<cb><v>url<> = unquote("<v>somewebsite.com/p/page%20numbered%20-%201<>")

<#># Returns 'somewebsite.com/p/page numbered - 1'<><>
@
@ urlib.parse.unquote(), parse.unquote(), .unquote(), decode()



### HTTP - Escape URL Parameter

<cb>from urllib.parse import quote_plus<>

<cb>= quote(<v>parameters_1<>)<>


Example:

<cb><v>escaped<> = quote_plus("<v>param1=param 1 value&param2= param 2 value<>")

<#># Returns 'param1%3Dparam+1+value%26param2%3D+param+2+value'<><>
@
@ urlib.parse.quote_plus(), parse.quote_plus(), .quote_plus(), encode()



### HTTP - Unescape URL Parameter

<cb>from urllib.parse import unquote_plus<>

<cb>= unquote_plus(<v>encoded_parameter<>)<>


Example:

<cb><v>parameters<> = unquote_plus("<v>param1%3Dparam+1+value%26param2%3D+param+2+value<>")

<#># Returns 'param1=param 1 value&param2= param 2 value'<><>
@
@ urlib.parse.unquote_plus(), parse.unquote_plus(), .unquote_plus(), decode()



## Pickle

Converts an object hierarchy into a byte stream so it can be saved and then restored later.

Unpickling is the inverse operation converting a byte stream back into the object hierarchy.
@
@ serialization



### Pickle - Pickle

<cb>import pickle

pickle.dump(<v>data<>, open(<v>file_name<>, "wb"))<>


Saves an object hierarchy as a binary file.
@
@ serialize, pickling, marshalling, open, to file
@ pickle.dump(), .dump()



### Pickle - Unpickle

<cb>import pickle

= pickle.load(open(<v>file_name<>, "rb"))<>


Converts a file back into the original object hierarchy.
@
@ deserialize, unpickling, unmarshalling, from file, read
@ pickle.load(), .load()



# Execute External Commands
@
@ executing, run, launch, process, subprocess
@ execute-only, exec-only, run-only, process-only



### Execute Command - Run

<cb>from subprocess import run

run(<v>command<>)<>

<cb>run([<v>command<>, <v>args_1<>, <v>args_2<>, <v>...<>])		<#>#1<><>


\#1  <s>-<>  Pass arguments with the command in a single list.


Example:

<cb>from subprocess import run

run(['ls', '-1'])<>
@
@ run(), subprocess.run()
@ arguments, args, parameters, params



### Execute Command - Run Shell Command

<cb>from subprocess import run

run(<v>command<>, shell=True)<>


Starts the shell and executes <c><v>command<><> on it.
Allows the script to run shell only commands (e.g. <c>echo<>).
<c><v>command<><> is a string with the complete command, arguments included.


Example:

<cb>from subprocess import run

run('echo "This is how to run a shell command."', shell=True)<>
@
@ run(), subprocess.run(), bash, shell script



### Execute Command - Get Exit Code

<cb>from subprocess import run

<v>results<> = run(<v>command<>)
<v>exit_code<> = <v>results<>.returncode<>

Returns: <c>int<>


Gets the exit code returned by the process after it completed.
@
@ run(), subprocess.run()
@ return code, return value, bash, shell script




### Execute Command - Get Standard Output

<cb>from subprocess import run
from subprocess import PIPE

<v>results<> = run(<v>command<>, stdout = PIPE)
<v>output<> = <v>results<>.stdout<>

Returns: <c>bytes<>


Captures the output sent to standard out.


Example:

<cb>from subprocess import run
from subprocess import PIPE

<v>results<> = run(['ls', '-1'], stdout = PIPE)
<v>output<> = <v>results<>.stdout
print(<v>output<>.decode("utf-8"))
<>
@
@ run(), subprocess.run(), stdout, subprocess.PIPE
@ capture output, console, stdout, bash, shell script



# Testing
@
@ Unit Tests, test-only, testing-only, unit-only, unit-test-only, unit-tests-only



### Test - Basics

<cb>from unittest import TestCase

class <v>TestMyStuff<>(TestCase):

	def setUp(self):					<#># Run Before Every Test<>
		<v>...<>

	def tearDown(self):					<#># Run After Every Test<>
		<v>...<>

	def test<v>_this_function<>(self)		<#># Name Must Start With <c>test<><>
		<v>...<><>
@
@ unittest.testcase, testcase, setup(), teardown(), test_
@ examples



### Test - Example

<cb>from unittest import TestCase

class <v>BasicTest<>(TestCase):

	def setUp(self):
		self.<v>field1<> = True

	def tearDown(self):
		self.<v>field1<> = None

	def test<v>_IsTrue<>(self):
		self.assertTrue(self.<v>field1<>, "<v>failed_assertion_message<>")

	def test<v>_IsFalse<>(self):
		self.assertFalse(self.<v>field1<>, "<v>failed_assertion_message<>")<>
@
@ unittest.testcase, testcase, setup(), teardown(), test_



## Test - Definition
@
@ unittest.TestCase



### Test - Define - Class

<cb>from unittest import TestCase

class <v>TestClass1<>(TestCase):

	def test<v>_function_1<>(self)			<#># Must Start With '<c>test<>'<>
		<v>...<><>
@
@ new, create, definition
@ unittest.testcase, testcase, test_



### Test - Define - Setup

<cb>class <v>TestClass1<>(TestCase):

	def setUp(self):
		<v>...<><>

Runs before every test.
@
@ setup(), initialize, pre



### Test - Define - Teardown

<cb>class <v>TestClass1<>(TestCase):

	def tearDown(self):
		<v>...<><>

Runs after every test.
Runs even if test fails.
@
@ deconstructor, post, teardown()



### Test - Define - Unit Test

<cb>class <v>TestClass1<>(TestCase):

	def test_<v>unit_test_name<>(self):
		<v>...<><>

Method names must start with '<c>test<>'.
@
@ testcase, test_



## Test Assertions



### Test Assertion - Equals

<cb>self.assertEqual(<v>actual<>, <v>expected<>, <v>comment<>)<>


Use <c>.assertEqual(). <!>.assertEquals()<> is deprecated.
@
@ is equal, assertequal(), self.assertequal(), , self.assertequals()



### Test Assertion - Not Equals

<cb>self.assertNotEqual(<v>actual<>, <v>expected<>, <v>comment<>)<>
@
@ assertnotequal(), self.assertnotequal(), is not equal



### Test Assertion - Contains

<cb>self.assertIn(<v>substring<>, <v>full_string<>, <v>comment<>)<>

Returns true if <c><v>substring<><> is in <c><v>full_string<><>.
@
@ substring, is in
@ assertin(), self.assertin()



### Test Assertion - Not Contains

<cb>self.assertNotIn(<v>substring<>, <v>full_string<>, <v>comment<>)<>


Returns true if <c><v>substring<><> is not in <c><v>full_string<><>.
@
@ substring, is not in
@ assertnotin(), self.assertnotin()



### Test Assertion - Is False

<cb>self.assertFalse(<v>actual<>, <v>comment<>)<>
@
@ boolean, not
@ assertfalse(), self.assertfalse()



### Test Assertion - Is None

<cb>self.assertIsNone(<v>actual<>, <v>comment<>)<>
@
@ boolean
@ self.assertisnone(), self.isnone()



### Test Assertion - Not None

<cb>self.assertIsNotNone(<v>actual<>, <v>comment<>)<>
@
@ boolean, not
@ is, self.assertisnotnone(), self.assertnotnone(),



### Test Assertion - Is True

<cb>self.assertTrue(<v>actual<>, <v>comment<>)<>
@
@ boolean
@ asserttrue(), self.asserttrue()



### Test Assertion - Exception Raised?

<cb>self.assertRaises(<v>ExceptionType<>, <v>function_1<>)<>

Calls the method to be tested (<c><v>function_1<><>).
Fails if the exception <c><v>ExceptionType<><> is not raised.
@
@ error, raises
@ assertraises(), self.assertraises()



### Test Assertion - Fail

<cb>self.fail()<>

Fails test immediately.
@
@ fail(), self.fail()



### Test Assertion - Attribute Exists

<cb>self.assertTrue(
	hasattr(obj, intendedAttr),
	msg=f'obj lacking an attribute. {obj=}, {intendedAttr=}')
@
@ assertTrue(), hasattr()



# Type Hints
@
@ Static Typing, :



### Type Hints - Function

<cb>def <v>function_1<>(<v>param_1<>: <v>type<>) -> <v>return_type<>:
	<v>...<><>


Defines the function parameter types and the return type.


Example:

<cb>def <v>area<>(<v>height<>: <v>float<>, <v>width<>: <v>float<>) -> float:
	return <v>height<> * <v>width<><>
@
@ ->, def



### Type Hints - Variable Type

<cb><v>name<>: <v>type<><>


Defines the type of a variable.
The type is not compiler enforced.


Basic Types:

<cb>bool, int, complex, float, str<>


Examples:

<cb><v>id<>: int<>

<cb><v>descrption<>: str<>

<cb><v>home_address<>: Address<>



### Type Hints - Variable Type, Subtype /  Generics

<cb><v>name<>: <v>type<>[<v>subtype<>]<>

<cb><v>name<>: <v>type<>[<v>subtype_1<>, <v>subtype_2<>]<>


Defines the type and subtype of a variable.
The type is not compiler enforced.


Basic Types:

<cb>tuple, list, dict<>


Examples:

<cb><v>names<>: list[str]<>

<cb><v>name_and_id<>: tuple[str, int]<>

<cb><v>addresses<>: dict[int, Address]<>
@
@ dict, list, tuple



# Virtual Environments

Use the <c>venv<> package to create a local python environment separate from the system environmnent.

This will allow your application to load and run it's own libraries in it's own version of python.
@
@ Venv, venv-only, virtual-only



### Virtual Environment - Create

<cb>python3 -m venv <v>project_venv_dir<><>

Creates a virtual environment in the directory <c><v>project_venv_dir<><>.
@
@ python3 -m



### Virtual Environment - Upgrade

<cb>python3 -m venv --upgrade <v>project_venv_dir<><>


Upgrade libraries (must start environment):

<cb>pip install -r requirements.txt<>
@
@ pip install requirement.txt
@ python3 -m --upgrade



### Virtual Environment - Start / Use

Bash:

<cb>. <v>project_venv_dir<>/bin/activate<>

DOS <m>(Untested. Can someone confirm this works or not?)<>:

<cb>call bin\\activate & <v>...<><>

Run from the project root directory.
Run this bash script from the command line.
For DOS, add any commands you want to run after <c><b>&<><>.
@
@ start, run, activate
@ /bin/activate



### Virtual Environment - Start Venv and Run Program

Bash:

<cb>. <v>project_venv_dir<>/bin/python <v>path/module.py<><>

DOS:
<m>(Untested. Can someone confirm this works?)<>

<cb>bin\\python <v>path/module.py<><>

Starts the venv and then runs the module in that environment.

Run from the project root directory.
Run this bash script from the command line.
@
@ start, run, activate, execute
@ /bin/activate



### Virtual Environment - Exit

<cb>deactivate<>

Run <c>deactivate<> to exit the venv environment.
@
@ end, stop, deactivate



# Environment Variables


### Environment Variable - Exists?

<cb>from os import environ

= '<v>name<>' in environ<>


Returns true if the environment variable <v>name<> is set.


Example:

<cb>from os import environ

if 'PYTHONPATH' in environ:
	print ('PYTHONPATH exists.')
else:
	print ('PYTHONPATH does not exist.')<>
@
@ os.environ



### Environment Variable - Get

<cb>from os import environ

= environ['<v>name<>']          <#>#1<><>

<cb>= environ.get('<v>name<>')      <#>#2<><>

<cb>= environ.get('<v>name<>', <v>default_value<>)<>


\#1  <s>-<>  Raises <c>KeyError<> if not found.

\#2  <s>-<>  Returns <c>None<> if not found.


Reads the value of the environment variable.


Example:

<cb>from os import environ

print (environ['PYTHONPATH'])<>
@
@ read, getenv, os.environ



### Environment Variable - Get All

<cb>from os import environ

= environ.keys()<>
@
@ read all, getenv, os.environ, keys()



### Environment Variable - Set

<cb>from os import environ

environ['<v>name<>'] = <v>value<><>


<c><v>value<><> must be a string.
@
@ get, getenv, os.environ



### Environment String - Expand

<cb>from os.path import expandvars

= expandvars('<v>...<> ${<v>VARIABLE_NAME<>} <v>...<>')<>


Example:

<cb><v>python_path<> = expandvars('The python path is ${PYTHONPATH}')<>
@
@ variable, os.path.expandvars()



# Parallelism



## Thread

The smallest sequence of instructions that can be managed by the OS.

Great for IO bound operations.
Do not use for CPU bound operations.


Each Thread Has:

	Registers
	Stack

Threads Share:

	Common Memory
	Resources

Local Variables

	Stored on thread's stack

Thread Synchronization

	Use Lock
	Use Semaphore
	Use Queue
@
@ thread-only, threads-only, threading-only, .thread(), therading.thread()
@ multitasking



### Thread - Basics



#### Thread - Basic Thread

<cb>from threading import Thread<>

Create:

<cb><v>thread_1<> = Thread(
		target = <v>worker_function<>,
		args = (<v>worker_argument_1<>,)<>

Start:

<cb><v>thread_1<>.start()<><>

Wait for Completion:

<cb><v>thread_1<>.join()<>



#### Thread - Basic Thread Class

<cb>from threading import Thread<>

Define:

<cb>class <v>ThreadClass<>(Thread):

	def run(self):
		<v>...<><>

Create:

<cb><v>thread_1<> = ThreadClass()<>

Start:

<cb><v>thread_1<>.start()<>

Wait for Completion:

<cb><v>thread_1<>.join()<>



### Thread - Create



#### Thread - Create Thread

<cb>from threading import Thread<>

Create:

<cb><v>thread_1<> = Thread(
		target = <v>worker_function<>,
		args = (<v>worker_argument_1<>,)<>

Create With Name:

<cb><v>thread_1<> = Thread(
		name = "<v>thread name<>",
		<v>...<>)<>



#### Thread - Create Thread Class

<cb>from threading import Thread<>

Define:

<cb>class <v>ThreadClass<>(Thread):		<#>#1<>

	def run(self):				<#>#2<>
		<v>...<><>

Create:

<cb><v>thread_1<> = ThreadClass()<>


\#1  -  Inherit from <c>Thread<>

\#2  -  Override <c>run()<>



#### Thread - Create Thread Class - With Arguments

<cb>from threading import Thread<>

Define:

<cb>class <v>WorkerClass<>(Thread):

	def __init__(self, <v>argument_1<>, <v>...<>):
		Thread.__init__(self)		<#>#1<>
		<v>...<><>

Start:

<cb><v>worker_1<> = WorkerClass(<v>argument_1<>, <v>...<>)<>


\#1  -  Must call <c>Thread.__init__()<>
\#1  -  Must Be First Line In <c>__init__<> Method



### Thread - Operations



#### Thread - Start

<cb><v>thread_1<>.start()<><>


Starts the execution of the thread.
The thread is initially stopped.
@
@ thread.start(), .start()



#### Thread - Stop On Application Exit

<cb><v>thread_1<>.daemon = True<>


Stops execution when the parent or main thread terminate.
Must be called before calling <c>.start()<>.
@
@ thread.daemon, .daemon



#### Thread - Wait For Completion

<cb><v>thread_1<>.join()<><>

Blocks the current thread until <c><v>thread_1<><> completes.
@
@ thread.join(), .join(), block



#### Thread - Is Alive?

<cb>= <v>thread_1<>.is_alive()<>

Is alive means it is actively running.
<c>False<> when either not started or is terminated.
@
@ Not Terminated



#### Thread - Is Terminated?

<cb>= not <v>thread_1<>.is_alive()<>

Will be <c>True<> after the thread terminates.
Must call <c>.start()<> first.
@
@ Not Terminated



## Process

A running instance of a program.

It has:

	System Resources
	Assigned Memory Space
	Security Attributes
	Process State

Each Process Has:

	It's Own GIL
	Self Contained Memory

Processes can be paused or terminated.

Processes have a big memory footprint.
Context switch between processes is expensive.
@
@ processes, processing, process-only, processes-only, processing-only
@ multiprocessing.process(), .process()
@ multitasking


### Process - Basics



#### Process - Basic Process

<cb>from processing import Process<>

Create:

<cb><v>process_1<> = Process(
		target = <v>worker_function<>,
		args = (<v>worker_argument_1<>,)<>

Start:

<cb><v>process_1<>.start()<><>

Wait for Completion:

<cb><v>process_1<>.join()<>



#### Process - Basic Process Class

<cb>from processing import Process<>

Define:

<cb>class <v>ProcessClass<>(Process):

	def run(self):
		<v>...<><>

Create:

<cb><v>process_1<> = ProcessClass()<>

Start:

<cb><v>process_1<>.start()<>

Wait for Completion:

<cb><v>process_1<>.join()<>



### Process - Create


#### Process - Create Process

<cb>from processing import Process<>

Create:

<cb><v>process_1<> = Process(
		target = <v>worker_function<>,
		args = (<v>worker_argument_1<>,)<>

Create With Name:

<cb><v>process_1<> = Process(
		name = "<v>process name<>",
		<v>...<>)<>



#### Process - Create Process Class

<cb>from processing import Process<>

Define: 

<cb>class <v>ProcessClass<>(Process):	<#>#1<>

	def run(self):				<#>#2<>
		<v>...<><>

Create:

<cb><v>process_1<> = ProcessClass()<>


\#1  -  Inherit from <c>Process<>

\#2  -  Override <c>run()<>



#### Process - Create Process Class - With Arguments

<cb>from processing import Process<>

Define:

<cb>class <v>WorkerClass<>(Process):

	def __init__(self, <v>argument_1<>, <v>...<>):
		Process.__init__(self)			<#>#1<>
		<v>...<><>

Start:

<cb><v>worker_1<> = WorkerClass(<v>argument_1<>, <v>...<>)<>


\#1  -  Must call <c>Process.__init__()<>
\#1  -  Must Be First Line In <c>__init__<> Method



### Process - Operations



#### Process - Start

<cb><v>process_1<>.start()<><>


Starts the execution of the process.
The process is initially stopped.
@
@ process.start(), .start()



#### Process - Stop on Application Exit

<cb><v>process_1<>.daemon = True<>


Stops execution when the parent or main process terminate.
Must be called before calling <c>.start()<>.
@
@ process.daemon, .daemon



#### Process - Terminate

<cb><v>process_1<>.terminate()<>

May cause issues such as putting the system into an inconsistent state.
Will not run any finally clauses or exit handlers. Its Dead!

Prefer something like a poison pill.
@
@ process.terminate(), .terminate()



#### Process - Wait For Completion

<cb><v>process_1<>.join()<><>

Blocks the current process until <c><v>process_1<><> completes.
@
@ process.join(), .join(), block



#### Process - Get Exit Code

<cb>= <v>process_1<>.exitcode<>

Values:

	0 -     No Error
	1 -     Error
	< 0 -       Terminated.
			Terminating Signal code = .exitcode * -1
@
@ process.exitcode, .exitcode



#### Process - Is Alive?

<cb>= <v>process_1<>.is_alive()<>

Is alive means it is actively running.
<c>False<> when either not started or is terminated.
@
@ Not Terminated



#### Process - Is Terminated?

<cb>= not <v>process_1<>.is_alive()<>

Will be <c>True<> after the process terminates.
Must call <c>.start()<> first.
@
@ Not Terminated



## Process Pool
@
@ pool-only, pools-only, process-pools-only, multiprocessing.pool(), .pool()



### Pool - Basics

<cb>from multiprocessing import Pool<>

Create:

<cb><v>pool_1<> = Pool(<v>process_count<>)<>


Run Single Task:

<cb><v>result<> = <v>pool_1<>.apply(<v>worker_function<>, <v>arguments<>)<>

Run Single Task Asynchronously:

<cb><v>async_result<> = <v>pool_1<>.apply_async(<v>worker_function<>, <v>arguments<>)<>

Run Series of Task:

<cb><v>results<> = <v>pool_1<>.map(<v>worker_function<>, <v>list_of_inputs<>)<>

Run Series of Tasks Asynchronously:

<cb><v>async_result<> = <v>pool_1<>.map_async(<v>worker_function<>, <v>list_of_inputs<>)<>


Close:

<cb><v>pool_1<>.close()<>

Wait Until All Complete:

<cb><v>pool_1<>.join()<>



### Pool - Create

<cb>from multiprocessing import Pool<>

Create (Processes = Number of CPUs):

<cb><v>pool_1<> = Pool()<>

Create:

<cb><v>pool_1<> = Pool(<v>process_count<>)<>

Create All Options:

<cb><v>pool_1<> = Pool(
		processes = <v>process_count<>,
		initializen = <v>initializing_function<>,
		initargs = <v>initial_arguments<>,
		maxtasksperchild = <v>number_of_tasks<>)<>


By default processes live as long as the pool is alive.
Note the initial arguments do not need to be picklable!
@
@ New, Instantiate



### Pool - Operations



#### Pool - Close

<cb><v>pool_1<>.close()<>


Prevents any new tasks being added to the pool.
@
@ pool.close(), .close()



#### Pool - Perform Single Operation

<cb>= <v>pool_1<>.apply(<v>worker_function<>, <v>args<>)<>

<cb>= <v>pool_1<>.apply(
		func = <v>worker_function<>,
		args = <v>args<>,
		kwargs = <v>kwargs<>)<>


Returns: Result


Performs <v>worker_function<> on <v>args<>.
<c>apply()<> blocks until the worker function is done.
@
@ pool.apply(), .apply()



#### Pool - Perform Single Operation Asynchronously

<cb>= <v>pool_1<>.apply_async(
		<v>worker_function<>,
		<v>list_of_inputs<>)<>

<cb>= <v>pool_1<>.apply_async(
		func = <v>worker_function<>,
		args = <v>args<>,
		kwargs = <v>kwargs<>,
		callback = <v>callback_function<>
		error_callback = <v>error_handler<>)<>


Returns: <c>AsyncResult<>


<c>apply_async()<> does not block.
@
@ pool.apply_async(), .apply_async(), async_result



#### Pool - Get Single Async Result

<cb>= <v>async_result<>.get()<>

<cb>= <v>async_result<>.get(<v>timeout_seconds<>)<>


Returns: The Actual Result


<c>.get()<> blocks until all processes are finished.
@
@ pool.apply_async(), .apply_async(), asyncresult.get(), async_result.get(), .get()
@ value, async_result



#### Pool - Perform Multiple Operations

<cb><v>list_of_result<> = <v>pool_1<>.map(<v>worker_function<>, <v>list_of_arguments<>)<>


Performs <v>worker_function<> on all poll processes
This call blocks until all results are in.
<v>worker_function<> should take a single parameter which will be given from <c><v>list_of_arguments<><>.
@
@ pool.map(), .map()



#### Pool - Perform Multiple Operations Asynchronously

<cb>= <v>pool_1<>.map_async(
		<v>worker_function<>,
		<v>list_of_inputs<>)<>

<cb>= <v>pool_1<>.map_async(
		<v>worker_function<>,
		<v>list_of_inputs<>,
		callback = <v>callback_function<>,
		error_callback = <v>error_callback_function<>)<>


Returns: <c>AsyncResult<>


<c>map_async() does not block.
@
@ pool.map_async(), .map_async()



#### Pool - Get Map Async Results

<cb>= <v>async_result<>.get()<>

<cb>= <v>async_result<>.get(<v>timeout_seconds<>)<>


Returns: List of Actual Results


<c>.get()<> blocks until all processes are finished.
@
@ pool.map_async(), .map_async, asyncresult.get(), .get()
@ value



#### Pool - Terminate

<cb><v>pool_1<>.terminate()<> 
@
@ pool.terminate(), .terminate()



#### Pool - Wait

<cb><v>pool_1<>.join()<>


Blocks until all pool worker processes exit.
Can only be called after .close() or .terminate()
@
@ pool.join()



## Pool Executor

Abstract Class:

<cb>Executor<>

Concrete Classes:

<cb>concurrent.futures.ThreadPoolExecutor<>

<cb>concurrent.futures.ProcessPoolExecutor<>
@
@ PoolExecutor



### Pool Executor - Create


#### ProcessPoolExecutor - Create

<cb>from concurrent.futures import ProcessPoolExecutor<>

<cb>= ProcessPoolExecutor()<>

<cb>= ProcessPoolExecutor (
	max_workers = <v>worker_count<>)<>


max_workers default = # computer cores * 5
@
@ concurrent.futures.ProcessPoolExecutor



#### ProcessPoolExecutor - Create Using With

<cb>from concurrent.futures import ProcessPoolExecutor<>

<cb>with ProcessPoolExecutor() as <v>executor_1<>
	<v>...<><>
@
@ concurrent.futures.ProcessPoolExecutor, Process Pool Executor



#### ThreadPoolExecutor - Create

<cb>from concurrent.futures import ThreadPoolExecutor<>

<cb>= ThreadPoolExecutor()<>

<cb>= ThreadPoolExecutor (
	max_workers = <v>worker_count<>,
	thread_name_prefix = '<v>prefix_name<>')<>


max_workers default = # computer cores * 5
@
@ concurrent.futures.ThreadPoolExecutor, Thread Pool Executor



#### ThreadPoolExecutor - Create Using With

<cb>from concurrent.futures import ThreadPoolExecutor<>

<cb>with ThreadPoolExecutor() as <v>executor_1<>
	<v>...<><>
@
@ Thread Pool Executor, concurrent.futures.ThreadPoolExecutor



### Pool Executor - Operations



#### Executor - Submit Task

<cb><v>future_1<> = <v>executor_1<>.submit(<v>worker_function<>, *args, **kwargs)<>


Returns: <c>concurrent.futures.Future<>


Submits a single task.
<c>submit()<> does not block.

For ProcessPoolExecutor, make sure the worker function and arguments are pickleable!
@
@ executor.submit(), .submit()
@ concurrent.futures.ProcessPoolExecutor, Process Pool Executor
@ Thread Pool Executor, concurrent.futures.ThreadPoolExecutor



#### Executor - Submit Task Map

<cb><v>list_of_results<> = <v>executor_1<>.map(<v>worker_function<>, <v>list_of_arguments<>)<>

<cb><v>list_of_results<> = <v>executor_1<>.map (
		func = <v>worker_function<>,
		iterables = <v>list_of_arguments<>,
		timeout = <v>timeout_seconds<>,
		chunksize = 1)<>


Returns: <c>result_iterator<> (an iterator)


Submit multiple requests to the task.
<c>map()<> does not block.

For ProcessPoolExecutor, make sure the worker function and arguments are pickleable!
@
@ executor.map(), .map()
@ concurrent.futures.ProcessPoolExecutor, Process Pool Executor
@ Thread Pool Executor, concurrent.futures.ThreadPoolExecutor



#### Executor - Shutdown

<cb><v>executor_1<>.shutdown()<>

Block Until Complete:

<cb><v>executor_1<>.shutdown(wait = True)<>
@
@ executor.shutdown(), .shutdown()
@ concurrent.futures.ProcessPoolExecutor, Process Pool Executor, wait
@ Thread Pool Executor, concurrent.futures.ThreadPoolExecutor



## Concurrent Future
An object that is a proxy for a future result that has yet to be computed.

<cb>concurrent.futures.Future<>

Futures can raise exceptions.
@
@ submit(), executor.submit(), concurrent.futures.Future



#### Future - Cancel

<cb>= <v>future_1<>.cancel()<>


Returns: <c>bool<>


Attempts to cancel a request.
Returns <c>True<> if successful.
@
@ future.cancel(), .cancel(), stop



#### Future - Is Complete?

<cb>= <v>future_1<>.done()<>
@
@ future.done(), .done(), done? stopped



#### Future - Get Value

<cb>= <v>future_1<>.result()<>


<c>result()<> blocks until the result is available.
@
@ future.result(), .result(), 



#### Future - Get With Exception Handling

<cb>try:
	<v>result<> = <v>future_1<>.result()
except Exception as <v>exception<>:
	<v>...<><>


Exceptions are returned through the future itself.
@
@ future.result(), .result(), 



#### Future - Get Exception

<cb>= <v>future_1<>.exception()<>

<cb>= <v>future_1<>.exception(timeout = <v>timeout_seconds<>)<>

<c>exception()<> blocks until a result is available unless a timeout is specified.
@
@ future.exception(), .exception(), future.getexception(), .getexception(), 



#### Future - Add Callback Function

<cb>= <v>future_1<>.add_done_callback(<v>callback_function<>)<>


Exceptions are not returned the the callback function.
@
@ future.add_done_callback(), .add_done_callback(), 



#### Futures - Wait Until All Complete

<cb>from concurrent.futures import wait
from concurrent.futures import ALL_COMPLETE<>

<cb>wait(<v>futures<>)<>

<cb>wait(<v>futures<>, timeout = <v>timeout_seconds<>, return_when = ALL_COMPLETE)<>

<v>futures<> is a list of futures to wait for.
Blocks until all futures are complete.
@
@ concurrent.futures.wait(), .futures.wait(), .wait()



#### Futures - Wait Until First Complete

<cb>from concurrent.futures import wait
from concurrent.futures import FIRST_COMPLETE<>

<cb>wait(<v>futures<>, timeout = <v>timeout_seconds<>, return_when = FIRST_COMPLETE)<>


<v>futures<> is a list of futures to wait for.
Blocks until the first future completes.
@
@ concurrent.futures.wait(), .futures.wait(), .wait()



#### Futures - Process As Completed

<cb>from concurrent.futures import as_completed<>

<cb>= as_completed(<v>futures<>)<>

<cb>= as_completed(<v>futures<>, timeout = <v>timeout_seconds<>)<>


Returns: iterable



## Pipe

Pipes allow communication between processes.
Pipes are bidirectional by default.
Contains no locks and no guarantees.
If two processes write to the same side of the queue, data can get corrupt.
@
@ multiprocessing.pipe(), .pipe(), pipe-only, pipes-only



### Pipe - Create



#### Pipe - Create - Bidirectional (Default)

<cb>from multiprocessing import Pipe<>

<cb><v>connection_1<>, <v>connection_2<> = Pipe()<>


Pass <c><v>connection_1<><>, <c><v>connection_2<><> to the target processes.
Ensure each process should send on one connection and receive on the other.

Example:

	Process 1 should send on  <c><v>connection_1<><>, and receive on <c><v>connection_2<><>.
	Process 2 should send on  <c><v>connection_2<><>, and receive on <c><v>connection_1<><>.



#### Pipe - Create - Unidirectional

<cb>from multiprocessing import Pipe<>

<cb><v>connection_receive<>, <v>connection_send<> = Pipe(False)<>


Pass <c><v>connection_receive<><>, <c><v>connection_send<><> to the target processes.



### Pipe - Operations



#### Pipe - Receive Data

<cb>= <v>connection_1<>.recv()<>


Blocks until a message is received.
@
@ Message



#### Pipe - Send Data

<cb><v>connection_1<>.send(<v>data<>)<>
@
@ Message



## Queues for Multitasking

The preferred way to communicate between threads or processes.
@
@ queue-only, queues-only, .queue(), parallel



### Queue - Create

#### Thread Queue - Create

<cb>from queue import Queue<>

<cb>= Queue()<>

<cb>= Queue(<v>max_size<>)<>
@
@ threading.queue(), queue.queue(), queue(), threads



#### Process Queue - Create

<cb>from multiprocessing import Queue<>

<cb>= Queue()<>

<cb>= Queue(<v>max_size<>)<>
@
@ multiprocessing.queue(), processes



### Queue - Operations
@
@ threading.queue(), threads



#### Queue - Add

<cb><v>queue_1<>.put(<v>value_1<>)<>

<cb><v>queue_1<>.put(
		obj = <v>value<>
		block = <v>true_or_false<>,
		timeout = <v>timeout_seconds<>)<>
@
@ put, append, insert, append to, .put()
@ multiprocessing.queue(), processes



#### Queue - Get Next

<cb>= <v>queue_1<>.get()                           <#>#1<><>

<cb>= <v>queue_1<>.get(
		block = <v>true_or_false<>,
		timeout = <v>timeout_seconds<>)<>

or

<cb>= <v>queue_1<>.get_nowait()                    <#>#2<><>


Get next item.


\#1  <s>-<>  If no items, waits until one becomes available.

\#2  <s>-<>  If no items, raises <c>QueueEmpty<>.
@
@ .get(), .get_nowait(), no wait
@ multiprocessing.queue(), processes



#### Queue - Is Empty?

<cb>= <v>queue_1<>.empty()<>

Returns: <c>bool<>

Returns <c>True<> if empty.
@
@ .empty()
@ multiprocessing.queue(), processes



#### Queue - Is Full?

<cb>= <v>queue_1<>.full()<>

Returns: <c>bool<>

Returns <c>True<> if the queue is full and can't take any more items.
@
@ .empty()
@ multiprocessing.queue(), processes



#### Queue - Maximum Size

<cb>= <v>queue_1<>.maxsize<>


Returns the maximum allowed size of the queue.
Returns 0 if no maximum set.
@
@ count, length, .maxsize
@ multiprocessing.queue(), processes



#### Queue - Size

<cb>= <v>queue_1<>.qsize()<>

Returns the number of items in the queue.
@
@ count, length, .qsize()
@ multiprocessing.queue(), processes



#### Queue - Wait Until Empty

<cb><v>queue_1<>.join()<>


Blocks until the queue is empty.
@
@ queue.join(), .join()
@ multiprocessing.queue(), processes



#### Queue - Wait Until Task Complete

<cb><v>queue_1<>.task_done()<>


Blocks until the queue is empty.
For thread queues only.
@
@ queue.task_done(), .task_done(), task done



## Event

Prefer Queues

Event is basically a listener that notifies other classes when a single event has occurred.
The server sets or notifies the go condition by setting <c>.set()<>.

Listeners will block while event is <c>False<>.
Listeners will go when the event is <c>True<>.
@
@ event-only, events-only, .event()



### Event - Basics



#### Thread Event - Basics

<cb>from threading import Event<>

<cb><v>event_1<> = Event()<>

Server - Notify:

<cb><v>event_1<>.set()<>

Server - Clear:

<cb><v>event_1<>.clear()<>

Listener - Wait for Event / Block:

<cb><v>event_1<>.wait()<>
@
@ threading.event()



#### Process Event - Basics

<cb>from multiprocessing import Event<>

<cb><v>event_1<> = Event()<>

Server - Notify:

<cb><v>event_1<>.set()<>

Server - Clear:

<cb><v>event_1<>.clear()<>

Listener - Wait for Event / Block:

<cb><v>event_1<>.wait()<>
@
@ multiprocessing.event()



### Event - Create



#### Event - Create Thread Event

<cb>from threading import Event<>

<cb>= Event()<>
@
@ threading.event(), threads



#### Event - Create Process Event

<cb>from multiprocessing import Event<>

<cb>= Event()<>
@
@ multiprocessing.event(), processes



### Event - Operations
@
@ threading.event(), threads
@ multiprocessing.event(), processes



#### Event - Server - Notify

<cb><v>event_1<>.set()<>


Notifies listeners that the event happened.
@
@ event.set(), .set()



#### Event - Server - Clear

<cb><v>event_1<>.clear()<>
@
@ event.clear(), .clear()



#### Event - Listener - Wait for Event

<cb><v>event_1<>.wait()<>

Blocks until the event happens.
@
@ event.wait(), .wait()



## Lock
@
@ .lock(), lock-only, locks-only



### Lock - Lock States

	Locked
	Unlocked



### Lock - When Not Needed

For atomic operations...

	Assigning a simple value
	Getting a dictionary or list item.
	Adding an item to a dictionary or list.



### Lock - Basics



#### Lock - Thread Lock - Basics

<cb>from threading import Lock<>

Create:

<cb><v>lock_1<> = Lock()<>

Use:

<cb><v>lock_1<>.acquire()

<v>...<>

<v>lock_1<>.release()<>
@
@ threading.lock(), threading, threads



#### Lock - Thread Lock - Basics Using With

<cb>from threading import Lock<>

Create and Use:

<cb>with Lock() as <v>lock_1<>:

	<v>...<><>

Automatically acquires and releases the lock.
@
@ threading.lock(), threading, threads



#### Lock - Process Lock - Basics

<cb>from multiprocessing import Lock<>

Create:

<cb><v>lock_1<> = Lock()<>

Use:

<cb><v>lock_1<>.acquire()

<v>...<>

<v>lock_1<>.release()<>
@
@ multiprocessing.lock(), processes



#### Lock - Process Lock - Basics Using With

<cb>from threading import Lock<>

Create and Use:

<cb>with Lock() as <v>lock_1<>:

	<v>...<><>

Automatically acquires and releases the lock.
@
@ multiprocessing.lock(), processes



### Lock - Create



#### Thread Lock - Create

<cb>from threading import Lock<>

<cb>=Lock()<>
@
@ threading.lock(), threads



#### Thread Lock - Create Reentrant Lock / RLock

<cb>from threading import RLock<>

<cb>= RLock()<>


Allows a thread to call acquire on a lock they have already acquired.
With <c>Lock<> this would block and the thread would be deadlocked.
@
@ threading.rlock(), processes



#### Process Lock - Create

<cb>from multiprocessing import Lock<>

<cb>= Lock()<>
@
@ multiprocessing.lock(), processes



#### Process Lock - Create Reentrant Lock / RLock

<cb>from multiprocessing import RLock<>

<cb>= RLock()<>


Allows a process to call acquire on a lock they have already acquired.
With <c>Lock<> this would block and the process would be deadlocked.
@
@ multiprocessing.rlock(), processes



### Lock - Operations
@
@ multiprocessing.lock(), threading.lock(), threads, processes
@ multiprocessing.rlock(), threading.rlock(), RLock(), Reentrant



#### Lock - Acquire

Acquire - Blocking:

<cb><v>lock_1<>.acquire()<>

Acquire - Non-blocking:

<cb><v>lock_1<>.acquire(False)<>

<cb>if <v>lock_1<>.acquire(False):
	<#># Lock acquired.<>
	<v>...<>
else:
	<#># Did not acquire lock<>
	<v>...<><>



#### Lock - Release

<cb><v>lock_1<>.release()<>


Only the locking thread or process can unlock a lock.



#### Lock - Is Locked?

<cb>= <v>lock_1<>.locked()<>



#### Lock - With

<cb>with Lock() as <v>lock_1<>:

	<v>...<><>

Automatically acquires and releases the lock.



## Semaphore
@
@ .semaphore(), semaphore-only, semaphores-only



### Semaphore Basics



#### Thread Semaphore - Basics

<cb>from threading import Semaphore<>

Create With 1 Lock:

<cb><v>semaphore_1<> = Semaphore()<>

Create With <c><v>lock_count<><> Locks:

<cb><v>semaphore_1<> = Semaphore(<v>lock_count<>)<>

Use:

<cb><v>semaphore_1<>.acquire()

<v>...<>

<v>semaphore_1<>.release()<>


Acquire decrements the counter.
The semaphore will never let the counter go below 0.
Acquiring a counter at 0 blocks the thread until the counter increases.
@
@ threading.semaphore(), threads



#### Thread Semaphore - Basics Using With

<cb>from threading import Semaphore<>

Create:

<cb><v>semaphore_1<> = Semaphore(<v>lock_count<>)<>

Use:

<cb>with <v>semarphore_1<>:
	<v>...<><>

Automatically acquires and releases the semaphore.
@
@ threading.semaphore(), threads


#### Process Semaphore - Basics

<cb>from multiprocessing import Semaphore<>

Create With 1 Lock:

<cb><v>semaphore_1<> = Semaphore()<>

Create With <c><v>lock_count<><> Locks:

<cb><v>semaphore_1<> = Semaphore(<v>lock_count<>)<>

Use:

<cb><v>semaphore_1<>.acquire()

<v>...<>

<v>semaphore_1<>.release()<>


Acquire decrements the counter.
The semaphore will nevere let the counter go below 0.
Acquiring a counter at 0 blocks the process until the counter increases.
@
@ multiprocessing.semaphore(), processes



#### Process Semaphore - Basics Using With

<cb>from multiprocessing import Semaphore<>

Create:

<cb><v>semaphore_1<> = Semaphore(<v>lock_count<>)<>

Use:

<cb>with <v>semarphore_1<>:
	<v>...<><>

Automatically acquires and releases the semaphore.
@
@ multiprocessing.semaphore(), processes



### Semaphore - Create



#### Thread Semaphore - Create

<cb>from threading import Semaphore<>

Create With 1 Lock:

<cb><v>semaphore_1<> = Semaphore()<>

Create With <c><v>lock_count<><> Locks:

<cb><v>semaphore_1<> = Semaphore(<v>lock_count<>)<>
@
@ threading.semaphore(), threads



#### Process Semaphore - Create

<cb>from multiprocessing import Semaphore<>

Create With 1 Lock:

<cb><v>semaphore_1<> = Semaphore()<>

Create With <c><v>lock_count<><> Locks:

<cb><v>semaphore_1<> = Semaphore(<v>lock_count<>)<>
@
@ multiprocessing.semaphore(), processes



### Semaphore - Operations
@
@ multiprocessing.semaphore(), threading.semaphore(), threads, processes



#### Semaphore - Acquire

Acquire - Blocking:

<cb><v>semaphore_1<>.acquire()<>

Acquire - Non-blocking:

<cb><v>semaphore_1<>.acquire(False)<>

<cb>if <v>semaphore_1<>.acquire(False):
	<#># Semaphore acquired.<>
	<v>...<>
else:
	<#># Did not acquire semaphore<>
	<v>...<><>



#### Semaphore - Release

<cb><v>semaphore_1<>.release()<>


Only the acquiring thread or process can release a semaphore.



#### Semaphore - With

<cb>with Semaphore() as <v>semaphore_1<>:

	<v>...<><>

Automatically acquires and releases the semaphore.



## Shared Memory - Value

Creates a synchronized value that can be shared between different processes.
@
@ multiprocessing.value



### Shared Value - Basics

<cb>from multiprocessing import Value<>

Create:

<cb><v>shared_value_1<> = Value(<v>type<>, (<v>arguments<>))<>

Retrieve:

<cb><v>current_value<> = <v>shared_value_1<>.value<>

Update:

<cb><v>shared_value_1<>.value = <v>new_value<><>



### Shared Value - Create



#### Shared Value - Create

<cb>from multiprocessing import Value<>

<cb>= Value(<v>type<>, (<v>arguments<>))<>

<cb>= Value(
		typecode_or_type = <v>type<>,
		args = (<v>arguments<>),
		lock = <v>lock<>)<>


Examples:

<cb><v>counter<> = Value('i')          <#># Creates an Integer Value<><>



#### Shared Value - Create With Synchronizing Lock

<cb>from multiprocessing import Value<>

<cb>= Value(<v>...<>, lock = <v>lock_1<>)<>


Example:

<cb>from multiprocessing import Lock

<v>lock_1<> = Lock()
<v>lock_controlled_value<> = Value('i', 0, lock = <v>lock_1<>)<>
@
@ Synchronized



#### Shared Value - Create Unsynchronized

<cb>from multiprocessing import Value<>

<cb>= Value(<v>...<>, lock = False)<>


Example:

<cb><v>boolean_flag<> = Value(ctypes.c_bool, False)<>



#### Shared Value - Types

For:

<cb>= Value(<v>type<>, <v>...<>)<>

<c><v>type<><>        <c>ctypes.c_bool<>
		<c>ctypes.c_char<>
		<c>ctypes.c_wthar<>
		<c>ctypes.c_int<>
		<c>ctypes.c_long<>
		<c>ctypes.c_float<>
		<c>ctypes.c_char_p<>
		<c>ctypes.c_wchar_p<>
		<c>ctypes.c_void_p<>

		'c'             <#>Same as ctype.c_char, 1-character bytes object<>
		'u'             <#>Same as ctype.c_wchar, 1-character string<>
		'i'             <#>Same as ctypes.c_int, int<>
		'l'             <#>Same as ctypes.c_long, int<>
		'f'             <#>Same as ctypes.c_float, float<>


<c><v>type<><> is a C-Type value.


Example:

<cb><v>integer_1<> = Value(ctypes.c_int)<>

<cb><v>integer_2<> = Value('i')<>



### Shared Value - Operations



#### Shared Value - Get Value

<cb>= <v>value_1<>.value<>



#### Shared Value - Update Value

<cb><v>value_1<>.value = <v>new_value<><>
@
@ set, change, modify



#### Shared Value - Get Lock

<cb>= <v>value_1<>.get_lock()<>



## Parallel Extras
@
@ how to, how-to



### Multiprocessing - Get Process Name

<cb>import multiprocessing<>

<cb>= multiprocessing.current_process().name<>



### Multiprocessing - Get CPU Count

<cb>import multiprocessing<>

<cb>= multiprocessing.cpu_count()<>



### Threads - Count

<cb>from threading import active_count

<v>thread_count<> = active_count()<>
@
@ threading.active_count(), .active_count()
@ get current, alive, active



# Asyncio



## Async Def

<cb>async def <v>coroutine_1<>():
	<v>...<><>

Defines a coroutine that can be scheduled to run on an event loop.
@ async-only



## Async For

<cb>async for <v>item<> in <v>async_iterable<>:
	<v>...<><>


Use with asyncronous iterables.


Example:

<cb>class <v>AsyncIterable1<>:
	def __aiter__(self):
		return self

	async def __anext__(self):
		<v>next<> = await <v>get_next()<>
		return <v>next<>


async for <v>item<> in <v>AsyncIterable1<>:
	<v>...<><>
@
@ as, __aiter__, __anext__
@ async-only



## Async With

<cb>async with <v>AsyncClass1<>() as <v>async_1<>:
	<v>...<>
	await <v>async_1<>.<v>action<>()<>


Use with classes that use the asynchronous context manager.


Example:

<cb>class <v>AsyncClass1<>:

	async def __aenter__(self):
		<v>...<>

	async def __aexit__(self, exc_type, exc, tb):
		<v>...<>


async with <v>AsyncClass1<>() as async_1:
	<v>...<><>
@
@ as, __aenter__, __aexit__
@ async-only



## Await

<cb>await <v>future_1<>()<>

<cb>await <v>coroutine_fuction_1<>()<>

<cb>await <v>task_1<>()<>


Suspends operations and returns control from a coroutine function while it waits for the future or function to complete.
@
@ await-only



## Asyncio Sleep

<cb>from asyncio import sleep<>

<cb>await sleep(<v>time_in_seconds<>)<>


Example:

<cb>await sleep(<v>1.5<>)
<#># Sleep 1½ seconds.<><>
@
@ asyncio.sleep(), .sleep(), await



## Asyncio Sleep - Suspend Execution

<cb>from asyncio import sleep<>

<cb>await sleep(0)<>

Suspends the current coroutine immediately.
Releases control back to the event loop so it can process other coroutines.
Execution returns to this immediately after the other tasks in the event loop have run.
@
@ asyncio.sleep(), .sleep(), sleep(0), await, release control



## Asyncio Sleep - Until Given Time

Function:

<cb>from datetime import datetime
from asyncio import sleep

async def <v>sleep_until<>(<v>datetime_1<>):
	await sleep ((<v>datetime_1<> - datetime.now()).total_seconds())<>

Call:

<cb>await <v>sleep_until<>(<v>datetime_1<>)<>
@
@ asyncio.sleep(), .sleep(), await



## Asyncio Coroutines
@
@ coroutine-only, coroutines-only



### Coroutine - Basics
@
@ async functions



#### Coroutine - Start Main Coroutine

<cb>run(<v>main<>())<>

<cb>from asyncio import run

async def <v>main<>():
	<v>...<>

run(<v>main<>())<>


This is a typical way to start your threads running.
It runs <c>main()<> on the main event loop.
@
@ run(), function



#### Coroutine - Run with await

Define Coroutine Function:

<cb>async def <v>coroutine_function_1<>():
	<v>...<><>

Call:

<cb>await <v>coroutine_function_1<>()<>

<cb><v>result<> = await <v>coroutine_function_2<>()<>


Define the coroutine with <c>async def<>.
<c>await<> calls and then blocks until the coroutine completes.



#### Coroutine - Run as Task

<cb>from asyncio import create_task<>

Define:

<cb>async def <v>coroutine_function<>():
	<v>...<><>

Schedule Execution:

<cb><v>task_1<> = create_task(<v>coroutine_function<>())<>

Complete?:

<cb>= <v>task_1<>.done()<>

Get Result:

<cb>= <v>task_1<>.result()<>



Define the coroutine with <c>async def<>.
Schedule the coroutine to run with <c>create_task()<>.
Check it is complete with <c>.done()<>.
Get the final result with <c>.result()<>.
@
@ c



### Coroutine - Life Cycle

<cb>Coroutine Function

-> Coroutine

-> Task / Running Coroutine<>


Coroutines start out as coroutine functions defined with <c>async def<>.

They become coroutines (sometimes called coroutine object) when the function is called. The coroutine is not running yet.

There are at least 2 options to run it:

	Call with <c>await<>
	Create a <c>Task<>

Call with <c>await<> will run the coroutine immediately and wait for a result. <c>await<> must be called inside another coroutine.

Create a <c>Task<> with <c>create_task()<>. This will schedule the coroutine on the current event loop and will execute it once the event loop completes it's other tasks.



### Coroutine - Create



#### Coroutine - Define / async def

<cb>async def <v>coroutine_function_1<>():
	<v>...<><>


Defines a coroutine function that can be scheduled on the event loop.
@
@ async def



#### Coroutine - Create Coroutine

To Coroutine:

<cb><v>coroutine_1<> = <v>coroutine_function_1<>()<>


This is an intermediate  step that is usually done directly within <c>await<> or <c>create_task()<>.
@
@ coroutine object



### Coroutine - Operations



#### Coroutine - Call, Wait / await

<cb>await <v>coroutine_function_1<>()<>

or

<cb>await <v>coroutine_1<><>


<c>await<> blocks until the coroutine completes.
Can only be called from within another coroutine.



#### Coroutine - Call, Wait For Result / await

<cb><v>result<> = await <v>coroutine_function_1<>()<>

or

<cb><v>result<> = await <v>coroutine_1<><>


<c>await<> blocks until the coroutine completes.
Can only be called from within another coroutine.
@
@ run



#### Coroutine - Schedule Execution

<cb>from asyncio import create_task<>

<cb><v>task_1<> = create_task(<v>coroutine_function_1<>())<>

or

<cb><v>task_1<> = create_task(<v>coroutine_1<>)<>


Once converted to a task, the coroutine is scheduled to run on the current event loop.
@
@ asyncio.create_task(), create_task(), run, call



#### Coroutines - Chain Sequentially

<cb>await <v>subfunction_1<>()
await <v>subfunction_2<>()
<v>...<><>


Use <c>await<> to run coroutines sequentially.
@
@ chaining, serially, call, run, execute, await



#### Coroutines - Chain Sequentially With Chaining Function

<cb>async def <v>chaining_function<>():

	await <v>subfunction_1<>()
	await <v>subfunction_2<>()
	<v>...<><>


<c>chaining_function<> chains subroutines together and runs them sequentially.
Get the final result by calling <c><v>chaining_function<>()<> with <v>await<>.
@
@ chaining, serially, call, run, execute, await



#### Coroutines - Run 'In Parallel'

<cb>from asyncio import create_task
from asyncio import gather

<v>tasks<> = []
<v>tasks<>.append(create_task(<v>coroutine_1<>()))
<v>tasks<>.append(create_task(<v>coroutine_2<>()))
<v>tasks<>.append(create_task(<v>coroutine_3<>()))

<v>results<> = await gather(*<v>tasks<>)<>


Starts all coroutines and then waits for them to complete.
@
@ run in parallel, asyncio.gather(), .gather()



#### Coroutine - To Task

<cb>from asyncio import create_task<>

<cb><v>task_1<> = create_task(<v>coroutine_function_1<>())<>
@
@ asyncio.create_task(), create_task(), From, Convert, Conversion



## Asyncio Event Loop

Responsible for getting items from an event queue and processing them.
@
@ Event Loops, event-loop-only, event-loops-only



### Event Loop - Life Cycle

The event loop stores tasks in a queue.
The event loop calls the first/next task in that queue.

The task runs until it suspends itself, releasing control back to the event loop.

The event loop resumes the task
	once the io/external operation completes.



### Event Loop - Create / Get


#### Event Loop - Create

<cb>from asyncio import new_event_loop()<>

<cb>= new_event_loop()<>


Returns: Subclass of <c>AbstractEventLoop<>


This event loop runs in the current thread by default.
@
@ asyncio.new_event_loop(), .new_event_loop(), new, start



#### Event Loop - Start on Main Loop

<cb>from asyncio import run<>

<cb>async def <v>main<>():
	<v>...<><>

<cb>run(<v>main<>())<>


This is a typical way to start your threads running.
It runs <c>main()<> on the main event loop.
@
@ asyncio.run(), .run(), new, start



#### Event Loop - Start on Main Loop (Verbose Version)

<cb>from asyncio import get_event_loop<>

<cb>async def <v>main<>():
	<v>...<><>

<cb><v>loop<> = get_event_loop()
<v>loop<>.run_until_complete(<v>main<>())
<v>loop<>.close()<>


This is a typical way to start your threads running.
It runs <c>main()<> on the main event loop.
@
@ asyncio.get_event_loop(), .get_event_loop(), .run_until_complete(), new, start



#### Event Loop - Get Main Loop

<cb>from asyncio import get_event_loop()<>

<cb>= get_even_loop()<>


Returns: Subclass of <c>AbstractEventLoop<>
@
@ asyncio.get_even_loop(), .get_even_loop() 



### Event Loop - Operations



#### Event Loop - Start

<cb><v>event_loop_1<>.run_forever()<>


Starts the event loop.
@
@ eventloop.run_forever(), .run_forever(), Run Forever



#### Event Loop - Stop

<cb><v>event_loop_1<>.stop()<>


Stops the event loop at the next appropriate moment.
@
@ eventloop.stop(), .stop()



#### Event Loop - Close

<cb><v>event_loop_1<>.close()<>


Closes an event loop.
Make sure to call <c>.stop()<> first.
@
@ eventloop.close(), .close()



#### Event Loop - Run Until Complete

<cb><v>event_loop_1<>.run_until_complete(<v>future_1<>)<>

<cb><v>event_loop_1<>.run_until_complete(<v>coroutine_object_1<>)<>
@
@ start, eventloop.run_until_complete(), .run_until_complete(), execute, future, task



## Asyncio Future
An object that is a proxy for a future result that has yet to be computed.
@
@ future-only, futures-only



### Future - Cancel

<cb>= <v>future_1<>.cancel()<>


Returns: <c>bool<>


Attempts to cancel a request.
Returns <c>True<> if successful.
@
@ .cancel()



### Future - Is Complete?

<cb>= <v>future_1<>.done()<>
@
@ future.done(), .done(), done?



### Future - Get Value

<cb>= <v>future_1<>.result()<>


<c>.result()<> never blocks even if the result is not available.
@
@ future.result(), .result(), 



### Future - Get With Exception Handling

<cb>try:
	<v>result<> = <v>future_1<>.result()
except Exception as <v>exception<>:
	<v>...<><>


Exceptions are returned through the future itself.
@
@ future.result(), .result(), 



### Future - Get Exception

<cb>= <v>future_1<>.exception()<>

<c>.exception()<> never blocks.
@
@ future.exception(), .exception(), future.getexception(), .getexception(), 



### Future - Add Callback Function

<cb>= <v>future_1<>.add_done_callback(<v>callback_function<>)<>


<c><v>callback_fuction<><> is called once the future completes.
Exceptions are not returned to the callback function.
@
@ future.add_done_callback(), .add_done_callback(), 



## Asyncio Task

Subclass of Future.
Wraps and manages the execution of a coroutien in an event loop.
@
@ task-only, tasks-only



### Task - Operations



#### Create Task From Future / Coroutine Object

<cb>from asyncio import create_task<>

<cb>= create_task(<v>coroutine_function_1<>())<>


The task is placed on the event loop and scheduled to run.
Defaults to the default event loop.
@
@ asyncio.create_task(), .create_task()



#### Create Task From Future / Coroutine Object

<cb>from asyncio import ensure_future<>

<cb>= ensure_future(<v>coroutine_function_1<>())<>

<cb>= ensure_future(<v>coroutine_object_1<>)<>

<cb>= ensure_future(<v>future_<>)<>

<cb>= ensure_future(<v>...<>, loop = <v>event_loop_1<>)<>


The task is placed on the event loop and scheduled to run.
Defaults to the default event loop.
@
@ asyncio.ensure_future(), .ensure_future()



#### Task - Cancel

<cb>= <v>task_1<>.cancel()<>


Returns: <c>bool<>


Attempts to cancel a request.
Returns <c>True<> if successful.
@
@ stop



#### Task - Is Complete?

<cb>= <v>task_1<>.done()<>
@
@ task.done(), .done(), done?, stopped



#### Task - Get Value

<cb>= <v>task_1<>.result()<>


<c>.result()<> never blocks even if the result is not available.
@
@ task.result(), .result(), 



#### Task - Get With Exception Handling

<cb>try:
	<v>result<> = <v>task_1<>.result()
except Exception as <v>exception<>:
	<v>...<><>


Exceptions are returned through the task itself.
@
@ task.result(), .result(), error



#### Task - Get Exception

<cb>= <v>task_1<>.exception()<>

<c>.exception()<> never blocks.
@
@ task.exception(), .exception(), task.getexception(), .getexception(), error



#### Task - Add Callback Function

<cb>= <v>task_1<>.add_done_callback(<v>callback_function<>)<>


Exceptions are not returned the the callback function.
@
@ task.add_done_callback(), .add_done_callback(), 



#### Task - Get Name

<cb>= <v>task_1<>.get_name()<>
@
@ task.get_name(), .get_name()




#### Task - Set Name

<cb><v>task_1<>.set_name(<v>name<>)<>
@
@ task.set_name(), .gst_name()



## Asyncio Tasks, Futures - Running
@
@ future-only, task-only, futures-only, tasks-only



#### Futures / Tasks - Run Single Task / Future

<cb>from asyncio import wait_for<>

<cb>wait_for(<v>future_1<>)<>

<cb>wait_for(<v>task_1<>)<>

<cb>wait_for(<v>future_1<>,
		timeout = <v>timeout_seconds<>,
		*,
		loop = <v>event_loop_1<>)<>

<cb>await wait_for(<v>future_1<>)<>
@
@ asyncio.wait_for(), .wait_for()



#### Futures / Tasks - Run Chained Sequentially

<cb>async def <c>chaining_function<>():

	await <v>task_1<>()
	await <v>task_2<>()
	<v>...<>
@
@ chaining, serially



#### Futures / Tasks - Run In Parallel

<cb>from asyncio import wait<>

<cb>wait(<v>futures<>)<>

<cb>wait(<v>tasks<>)<>

<cb>wait(<v>futures<>,
		*,
		loop = <v>event_loop_1<>,
		timeout = <v>timeout_seconds<>,
		return_when = <v>when<>)<>

With Results:

<cb><v>done<>, <v>pending<> = await wait(<v>futures<>)<>


Schedules futures for execution together.
Timeout does not cancel futures.
@
@ asyncio.wait(), .wait(), await



#### Futures / Tasks - Process As Completed

<cb>from asyncio import as_completed<>

<cb>for <v>task<> in as_completed(<v>futures<>):
	<v>result<> = await <v>task<><>


Returns tasks as they are completed.
Internally it sets up a call back function that yields a task when it completes.
@
@ asyncio.as_completed(), .as_completed(), await



#### Futures / Tasks - Wait, Gather Results

<cb>from asyncio import gather<>

<cb><v>results<> = await gather(*<v>futures<>)<>


Returns: List of results


Waits for all futures to complete and then returns the results.
The order of the results is the same order as the tasks were submitted.
@
@ asyncio.gather(), .gather(), await



## Asyncio - Popular Asyncio Libraries

<b>I/O:<>

<c><l "https://pypi.org/project/aiofiles/">aiofiles<><>			Asynchronous File I/O
<c><l "/s/aiohttp">aiohttp<><>				Asynchronous Web Requests (SpeedSheet)

<b>Databases:<>

<c><l "https://aiomysql.readthedocs.io/en/latest/">aiomysql<><>			Asynchronous MySql Library
<c><l "https://aiopg.readthedocs.io/en/stable/">aiopg<><>				Asynchronous PostgreSql Library
<c><l "https://pypi.org/project/aiocouchdb/">aiocouchdb<><>			Asynchronous Couch DB Library
<c><l "https://github.com/aio-libs/aiocassandra">aiocassandra<><>		Asynchronous Cassandra Library


Other Libraries:
<l>https://github.com/python/asyncio/wiki/ThirdParty<>



# CSV


### CSV File - Read To Dict - With Header

<cb>= DictReader(<v>file<>)<>

<cb>from csv import DictReader

with open(<v>file_name<>) as file:

	<v>reader<> = DictReader(<v>file<>)

	for <v>row<> in <v>reader<>:
		<v>...<><>


Each <c><v>row<><> returns the row of values as a dict.
The keys are set by the header row (1st line in the CSV file).
Requires a header row.


Example:

<cb><v>file_name<> = '<v>path/data_file.csv<>'
with open(<v>file_name<>) as <v>file<>:

	<v>reader<> = DictReader(<v>file<>)
	<v>data<> = [<v>row<> for <v>row<> in <v>reader<>]<>
@
@ csv.dictreader(), .dictreader(), row



### CSV File - Read To Dict - Without Header

<cb>= DictReader(<v>file<>, fieldnames = <v>field_names<>)<>

<cb>from csv import DictReader

with open(<v>file_name<>) as file:

	<v>reader<> = DictReader(<v>file<>, fieldnames = <v>field_names<>)

	for <v>row<> in <v>reader<>:
		<v>...<><>


Set the field names using the <c>fieldnames<> option.
Pass the field names as a list of strings.
Each <c><v>row<><> returns the row of values as a dict.


Example:

<cb><v>file_name<> = '<v>path/data_file.csv<>'
with open(<v>file_name<>) as <v>file<>:

	<v>reader<> = DictReader(<v>file<>, ["name", "date", "value"])
	<v>data<> = [<v>row<> for <v>row<> in <v>reader<>]<>
@
@ csv.dictreader(), .dictreader(), fieldnames=, row



### CSV File - Read To List - With Header

<cb>= csv.reader(<v>file<>)<>

<cb>import csv

with open(<v>file_name<>) as file:

	<v>reader<> = csv.reader(<v>file<>)

	<v>header<> = next(<v>reader<>)
	for <v>row<> in <v>reader<>:
		<v>...<><>


<c><v>header<><> contains the fields returned from the first row as a list of strings.
Each <c><v>row<><> returns the row of values as a list.


Example:

<cb><v>file_name<> = '<v>path/data_file.csv<>'
with open(<v>file_name<>) as <v>file<>:

	<v>reader<> = csv.reader(<v>file<>)
	<v>header<> = next(<v>reader<>)
	<v>data<> = [<v>row<> for <v>row<> in <v>reader<>]<>
@
@ csv.reader(), .reader(), row



### CSV File - Read To List - Without Header

<cb>= csv.reader(<v>file<>)<>

<cb>import csv

with open(<v>file_name<>) as file:

	<v>reader<> = csv.reader(<v>file<>)

	for <v>row<> in <v>reader<>:
		<v>...<><>


Example:

<cb><v>file_name<> = '<v>path/data_file.csv<>'
with open(<v>file_name<>) as <v>file<>:

	<v>reader<> = csv.reader(<v>file<>)
	<v>data<> = [<v>row<> for <v>row<> in <v>reader<>]<>
@
@ csv.reader(), .reader(), row



### CSV File - When Reading Blank Lines

Using <b><c>csv.reader()<>:<>

<indent-half>Returns a blank line as an empty list <c>[]<>.
The last line is ignored if blank.<>

Using <b><c>DictReader<>:<>

<indent-half>Ignores all blank lines.<>



### CSV File - Write From Dict

<cb><v>writer<> = DictWriter(<v>file<>, fieldnames = <v>fields<>)

<v>writer<>.writerow(<v>row_dict<>)<>

<cb>from csv import DictWriter

with open(<v>file_name<>, 'w') as <v>file<>:

	<v>writer<> = DictWriter(<v>file<>, fieldnames = <v>fields<>)

	for <v>row_dict<> in <v>list_of_dicts<>:
		<v>writer<>.writerow(<v>row_dict<>)<>
@
@ csv.DictWriter.writerow(), .writerow(), row, dictionary, dictionaries



### CSV File - Write List of Dicts

<cb><v>writer<> = DictWriter(<v>file<>, fieldnames = <v>fields<>)

<v>writer<>.writerows(<v>list_of_dicts<>)<>

<cb>from csv import DictWriter

with open(<v>file_name<>, 'w') as <v>file<>:

	<v>writer<> = DictWriter(<v>file<>, fieldnames = <v>fields<>)

	<v>writer<>.writerows(<v>list_of_dicts<>)<>
@
@ csv.DictWriter.writerows(), .writerows(), rows, dictionary, dictionaries



### CSV File - Write Dict Header

<cb><v>writer<> = DictWriter(<v>file<>, fieldnames = <v>fields<>)

<v>writer<>.writeheader()<>

<cb>from csv import DictWriter

with open(<v>file_name<>, 'w') as <v>file<>:

	<v>writer<> = DictWriter(<v>file<>, fieldnames = <v>fields<>)

	<v>writer<>.writeheader()
	<v>...<><>
@
@ csv.DictWriter.writeheader(), .writeheader(), dictionary, dictionaries



### CSV File - Write From List

<cb><v>writer<> = csv.writer(<v>file<>)

<v>writer<>.writerow(<v>item_list<>)<>

<cb>import csv

with open(<v>file_name<>, 'w') as <v>file<>:

	<v>writer<> = csv.writer(<v>file<>)

	for <v>item_list<> in <v>list_of_lists<>:
		<v>writer<>.writerow(<v>item_list<>)<>
@
@ writer.writerow(), .writerow(), row



### CSV File - Write List of Lists

<cb><v>writer<> = csv.writer(<v>file<>)

<v>writer<>.writerows(<v>list_of_lists<>)<>

<cb>import csv

with open(<v>file_name<>, 'w') as <v>file<>:

	<v>writer<> = csv.writer(<v>file<>)

	<v>writer<>.writerows(<v>list_of_lists<>)<>
@
@ writer.writerows(), .writerows(), rows



### CSV - Escaped Quotes

Automatically handled.

The csv library handles escaping quotes in values automatically.
When reading values, string values are automatically unescaped with extra quotes removed.
When writing, strings will be automatically escaped and then placed inside double quotes.

Escaped Double Quotes:  ""




### CSV Option - Delimiter

<cb><v>...<>(delimiter = "<v>delimiter<>")<>


Examples:

<cb><v>reader<> = csv.reader(<v>file<>, delimiter="\\t")<>

<cb><v>writer<> = csv.writer(<v>file<>, delimiter="\\t")<>
@
@ setting



### CSV Option - Dialect

<cb><v>...<>(dialect = "<v>dialect<>")<>

<indent><table><col><c>'excel'<><><col>Excel formatting, Comma Delimited, '\\n\\r' Newlines<>
<col><c>'excel-tab'<><><col>Excel formatting, Tab Delimited, '\\n\\r' Newlines<>
<col><c>'unix'<><><col>Unix formatting, Comma Delimited, All Values in Quotes, '\\n' Newlines<><><>


Examples:

<cb><v>reader<> = csv.reader(<v>file<>, dialect='excel')<>

<cb><v>writer<> = csv.writer(<v>file<>, dialect='unix')<>
@
@ dialect=, excel, unix



### CSV Option - Quoting

<cb><v>...<>(quoting = <v>quote_setting<>)<>

<c>quote_setting<>:

<indent><table><col><c>csv.QUOTE_NONE<><><col>Quote Nothing<>
<col><c>csv.QUOTE_MINIMAL<><><col>Add Quotes Only To Values That Need It (Default)<>
<col><c>csv.QUOTE_NONNUMERIC<><><col>Add Quotes To Non Numeric Values<>
<col><c>csv.QUOTE_ALL<><><col>Add Quotes To All Values<><><>


Examples:

<cb><v>writer<> = csv.writer(<v>file<>, quoting=csv.QUOTE_NONNUMERIC)<>
@
@ quotes, setting



# Dataclass
@
@ data class, dataclasses, dataclasses.dataclass, @dataclass


### Dataclass - Define

<cb>from dataclasses import dataclass<>

Define:

<cb>@dataclass
class <v>NewClass1<>:
	<v>field_1<>: <v>type<>
	<v>field_2<>: <v>type<>
	<v>...<><>

Create:

<cb><v>item_1<> = <v>NewClass1<>(<v>value_1<>, <v>value_2<> <v>...<>)<>

Or:

<cb><v>item_1<> = <v>NewClass1<>(<v>field_1<> = <v>value_1<>, <v>field_2<> = <v>value_2<> <v>...<>)<>


Example:

<cb>@dataclass
class Size:
	width: int
	height: int

size_1 = Size(10, 20)
size_2 = Size(width = 10, height = 20)<>
@
@ create, definition, new



### Dataclass - Define With Defaults

Define:

<cb>@dataclass
class <v>NewClass1<>:
	<v>field_1<>: <v>type<> = <v>default_value<>
	<v>field_2<>: <v>type<> = <v>default_value<>
	<v>...<><>

Create:

<cb><v>item_1<> = <v>NewClass1<>()<>


Example:

<cb>@dataclass
class Size:
	width: int = 0
	height: int = 0

size_1 = Size()<>
@
@ create, definition, new



### Dataclass - Define Immutable

Define:

<cb>@dataclass(frozen = True)
class <v>NewClass1<>:
	<v>...<><>


The class properties can not be changed.
@
@ frozen, create, definition, new



### Dataclass - Define - Override Constructor

<cb>@dataclass
class <v>NewClass1<>:

	<v>field_1<>: <v>type<>
	<v>...<>

	def __init__(self, <v>...<>):
		<v>...<><>


You can override the constructor if you need.
Consider using __post_init__() instead.
@
@ __init__()


### Dataclass - Define - Post Constructor

Post Init Method:

<cb>@dataclass
class <v>NewClass1<>:
	<v>...<>

	def __post_init__(self):
		<v>...<><>

Call Parent Class:

<cb>@dataclass
class <v>NewClass1<>(<v>ParentClass<>):
	<v>...<>

	def __post_init__(self):
		super().__init__()
		<v>...<><>


<c>__post_init__<> is called after the class is created.
Add any setup code you need in here including calling <c>super()<>.
@
@ super(), __post_init_()



### Dataclass - Property - Access

Same as a normal class.

<cb>= <v>item_1<>.<v>field_1<><>
@
@ properties, get



### Dataclass - Property - Update

Same as a normal class.

<cb><v>item_1<>.<v>field_1<> = <v>new_value<><>
@
@ properties, set, change



### Dataclass - Method

Same as a normal class.

Define:

<cb>@dataclass
class <v>NewClass1<>:
	
	def <v>method_1<>(self):
		<v>...<><>

Use:

<cb><v>item_1<>.<v>method_1<>()<>
@
@ methods, add, create



# Collections Library
@
@ from collections, collections.


## Deque
@
@ collections.deque, deque(), double ended queue, deque-only



### Deque - Basics

<cb>from collections import deque

<v>queue_1<> = deque()

<v>queue_1<>.append(<v>value<>)			<#># Append End / Right<>
<v>queue_1<>.appendleft(<v>value<>)		<#># Append Start / Left<>

<v>last<> = <v>queue_1<>.pop()			<#># Pop End / Right<>
<v>first<> = <v>queue_1<>.popleft()		<#># Pop Start / Left<>

<v>size<> = len(<v>queue_1<>)
<v>item<> = <v>queue_1<>[<v>1<>]

del <v>queue_1<>[<v>1<>]
<v>queue_1<>.clear()<>



### Deque - Create
@
@ new, instantiate, define


#### Deque - Create Empty

<cb>from collections import deque

= deque()<>



#### Deque - Create From List

<cb>from collections import deque

= deque(<v>list_1<>)<>

<cb>= deque([<v>value_1<>, <v>value_2<>, <v>...<>])<>



### Deque - Operations



#### Deque - Append

<cb><v>queue_1<>.append(<v>value<>)<>


Appends an item to the end / right of the queue.


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>queue_1<>.append(10)

<#># Sets queue_1 To: [1, 2, 3, 10]<><>
@
@ .append(), end, right



#### Deque - Append List

<cb><v>queue_1<>.extend(<v>list_1<>)<>


Appends a list of items to the end / right of the queue.


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>queue_1<>.extend([10, 20])

<#># Sets queue_1 To: [1, 2, 3, 10, 20]<><>
@
@ .extend(), extend, end, right



#### Deque - Count Value Occurences

<cb>= <v>queue_1<>.count(<v>value<>)<>


Returns the number of times <c><v>value<><> appears in <c><v>queue_1<><>.
@
@ item, occurrences, .count(), times



#### Deque - Delete

<cb><v>del<> <v>queue_1<>[<v>index<>]<>


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>del queue_1<>[1]

<#># Sets queue_1 To: [1, 3]<><>
@
@ remove from, one, single, del



#### Deque - Delete All

<cb><v>queue_1<>.clear()<>
@
@ remove from, clear, del, .clear()



### Deque - Is Empty?

<cb>= not <v>queue_1<><>

<cb>if not <v>queue_1<>:
	<v>...<><>



#### Deque - Not Empty?

<cb>= bool(<v>queue_1<>)<>

<cb>if <v>queue_1<>:
	<v>...<><>

Use <b>bool()<> if you need to get a True/False value.
There is no need for <b>bool()<> when using <b>if...<>.
@
@ bool()



#### Deque - Get

<cb>= <v>queue_1<>[<v>index<>]<>

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v><v>item_1<> = queue_1<>[1]

<#># Returns: 2<><>
@
@ item, value



#### Deque - Insert

<cb><v>queue_1<>.insert(<v>index<>, <v>value<>)<>

Inserts at position <c><v>index<><>.


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>queue_1<>.insert(1, 10)

<#># Sets queue_1 To: [1, 10, 2, 3]<><>
@
@ put, set, item, .insert()



#### Deque - Pop First

<cb>= <v>queue_1<>.popleft()<>

Removes the first / left item from the queue and returns it.
@
@ .pop(), left



#### Deque - Pop Last

<cb>= <v>queue_1<>.pop()<>

Removes the last / right item from the queue and returns it.
@
@ .pop(), right, end



### Deque - Prepend

<cb><v>queue_1<>.appendleft(<v>value<>)<>


Prepends an item to the start / left of the queue.


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>queue_1<>.appendleft(10)

<#># Sets queue_1 To: [10, 1, 2, 3]<><>
@
@ .appendleft(), append, start, left



#### Deque - Prepend List

<cb><v>queue_1<>.extendleft(<v>list_1<>)<>


Appends a list of items to the start / left of the queue.

⚠️ Adds items in reverse order!


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>queue_1<>.extendleft([<v>10<>, <v>20<>])

<#># Sets queue_1 To: [20, 10, 1, 2, 3]<><>
@
@ .extendleft(), extend, append left, start



#### Deque - Reverse

<cb><v>queue_1<>.reverse()<>


Reverses the order of items in the queue.
Reverses in place.


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>queue_1<>.reverse()

<#># Sets queue_1 To: [3, 2, 1]<><>
@
@ .reverse(), order



#### Deque - Shift / Rotate

<cb><v>queue_1<>.rotate(<v>count<>)<>


Rotates (shifts) the queue to the right <c><v>count<><> times by taking the last items and placing them at the start of the queue.
Rotates in place.


Example:

<cb>from collections import deque

<v>queue_1<> = deque([<v>1<>, <v>2<>, <v>3<>])

<v>queue_1<>.rotate(2)

<#># Sets queue_1 To: [2, 3, 1]<><>
@
@ deque.rotate(), .rotate()



#### Deque - Size

<cb>= len(<v>queue_1<>)<>
@
@ len(), length, count



## Named Tuple
@
@ collections.namedtuple, Named Tuples, nametuple, namedtuple()



### Named Tuple - Define

<cb>from collections import namedtuple<>

Define:

<cb>= namedtuple("<v>NamedTuple1<>", ["<v>field_1<>", "<v>field_2<>", <v>...<>])<>

or

<cb>= namedtuple("<v>NamedTuple1<>", "<v>field_1<> <v>field_2<> <v>..."<>)<>


Defines a named tuple, a tuple with named propeties.
Creates a subclass of <c>tuple<>.


Example:

<cb>Size = namedtuple("Size", ["width", "height"])

size_1 = Size(160, 100)

width = size_1.width
height = size_1.height<>
@
@ new, definition, create



### Named Tuple - Instantiate

<cb>= <v>NamedTuple1<> (<v>value_1<>, <v>value_2<>, <v>...<>)<>

or

<cb>= <v>NamedTuple1<> (<v>field_1<> = <v>value_1<>, f<v>ield_2<> = <v>value_2<>, <v>...<>)<>
@
@ new, create



### Named Tuple - Access Property

<cb>= <v>item_1<>.<v>field_1<><>

<cb>= <v>item_1<>[0]<>


### Named Tuple - Update Property

Not possible.
This is an immutable tuple.



## Ordered Dict

<cb>from collections import OrderedDict

= OrderedDict()<>

<cb>= OrderedDict({<v>key<>: <v>value<>, <v>key<>: <v>value<>, <v>...<>})<>


Returns a dict where the keys are stored in insertion order.
Subclasses the dict type.

All dict operations work on ordered dict.


Example:

<cb>from collections import OrderedDict

<v>dict_1<> = OrderedDict()

<v>dict_1<>['<v>c<>'] = '<v>First<>'
<v>dict_1<>['<v>b<>'] = '<v>Second<>'
<v>dict_1<>['<v>a<>'] = '<v>Third<>'

for <v>key<> in <v>dict_1<>.keys():
	print (<v>key<>, <v>dict_1<>[<v>key<>])

<#># Prints:
\#
\# c First
\# b Second
\# a Third<><>
@
@ collections.ordereddict, .ordereddict, ordereddict()




### Ordered Dict - Operations


#### Ordered Dict - Get Keys

<cb>= <v>dict_1<>.keys()<>

Returns: <c>odict_keys<>


Returns the keys in insertion order.
@
@ .keys()


#### Ordered Dict - Get First

<cb>= <v>dict_1<>.popitem(last = False)<>

Returns: <c>tuple = (<v>key<>, <v>value<>)<>


Removes and returns the first item placed in the dictionary.

Example:

<cb>from collections import OrderedDict

<v>dict_1<> = OrderedDict({
        '<v>c<>': '<v>First<>',
        '<v>b<>': '<v>Second<>',
        '<v>a<>': '<v>Third<>'})

<v>first<> = <v>dict_1<>.popitem(last = False)

<#># Returns ('c', 'First')<><>
@
@ .popitem()


#### Ordered Dict - Get Last

<cb>= <v>dict_1<>.popitem()<>

Returns: <c>tuple = (<v>key<>, <v>value<>)<>


Removes and returns the last item placed in the dictionary.

Example:

<cb>from collections import OrderedDict

<v>dict_1<> = OrderedDict({
        '<v>c<>': '<v>First<>',
        '<v>b<>': '<v>Second<>',
        '<v>a<>': '<v>Third<>'})

<v>last<> = <v>dict_1<>.popitem()

<#># Returns ('a', 'Third')<><>
@
@ .popitem(), last



# How To
@
@ how-to, how-only, how-to-only



### Anything - Convert To String

<cb>= repr(<v>variable<> <s>|<> <v>expression<>)<>

Converts any value to a machine intrepretable string.
@
@ repr()



### Bash - Make Python File Executable

Python File - 1st Line:

<cb>#!/usr/bin/env python3<>

Make Executable:

<cb>chmod +x <v>file_name.py<><>


1. Add the shebang to the file.
2. Set the file as executable.


Adding a shebang to the top of the script allows Bash to run it without explicitly having to tell it to use Python. 
@
@ shebang, run script from bash
@ #!/usr/bin/env python3



#### 1 - Add Shebang

<cb>#!/usr/bin/env python3<>

Called the shebang.
Add to the first line in your file.



#### 2 - Set File As Executable

<cb>chmod +x <v>file_name.py<><>

Makes the file executable.
@
@ chmod +x



### Bitwise Not

<cb>= (1 \<\< <v>bit_count<>) - 1 - <v>value<><>

Bitwise NOT Function:

<cb>def bitwise_not(<v>value<>, <v>bits<> = 8):
	return (1 \<\< <v>bits<>) - 1 - <v>value<><>


There is no built in bitwise NOT that simply flips the bits.
Use this formula instead.


Examples:

Using Formula:

<cb><v>value<> = 0b11

<v>bitwise_not<> = (1 \<\< <v>4<>) - 1 - <v>value<>

<#># Returns: 0b1100<><>

Using Function:

<cb>def bitwise_not(<v>value<>, <v>bits<> = 8):
	return (1 \<\< <v>bits<>) - 1 - <v>value<>

<v>value<> = 0b11

<v>not_value<> = bitwise_not(<v>value<>)

<#># Returns: 0b11111100<>

<v>not_value<> = bitwise_not(<v>value<>, 4)

<#># Returns: 0b1100<><>
@
@ inverse, invert, inversion



### Byte Code - Print

<cb>from dis import dis<>

Print Function:

<cb>dis(<v>function_name<>)<>

Print Class:

<cb>dis(<v>class_name<>)<>


Prints the byte code operations for the given function or class.
@
@ dis.dis(), .dis()
@ operations, op codes



### Console Screen - Clear

Use This Function:

<cb>from os import system, name

def <v>clear_screen<>():
	if name == 'nt':
		<#># Windows:<>
		system('cls')
	else:
		<#># Mac, Linux:<>
		system('clear')<>

Call:

<cb><v>clear_screen<>()<>


Clears the console screen.
@
@ clear_screen()



### Current Working Directory - Get

<cb>from os import getcwd

<v>directory<> = getcwd()<>
@
@ os.getcwd(), .getcwd(), getpwd(), pwd, cwd, path



### Current Working Directory - Change

<cb>from os import chdir

chdir(<v>new_directory<>)<>
@
@ set, os.chdir(), cd(), cwd, pwd, path



### Evaluate String Expression

<cb>= eval("<v>expression<>")<>


Evaluates the python expression and returns the value.
The expression can contain local and global variables.

Syntax errors will raise <c>SyntaxError<>.
Referencing non-existent variables will raise <c>NameError<>.


Examples:

<cb><v>a<> = eval('<v>2 * 3<>')               <#># Returns 6<><>

<cb><v>a<> = <v>3<>
<v>b<> = eval('<v>2 * a<>')               <#># Returns 6<><>

<cb><v>b<> = eval("<v>'2' + ' * ' + '3'<>")   <#># Returns "2 * 3"<><>
@
@ eval()



### Global Symbols - Get

<cb>= globals()<>


Returns: <c>dict<>


Returns all symbols currently in global scope from the symbol table.
@
@ globals(), in scope



### Input - Read

<cb>= input()<>

<cb>= input("<v>Input caption:<>")<>

<cb>= input("<v>Input caption with new line:\\n<>")<>

Read a line from the standard input.


Example:

<cb><v>text<> = input("<v>Enter a number between 1 and 10:\\n<>")

print("You entered", <v>text<>)<>
@
@ input(), user, input-only



### Item - Copy - Deep Copy

<cb>from copy import copy<>

<cb>= deepcopy(<v>item_1<>)<>

Makes a copy of any variable, particularly objects or collections.
All child objects will also be replicated.
The new item will be completely independent of the original.
@
@ copy.deepcopy(), .deepcopy(), object, instance



### Item - Copy - Shallow Copy

<cb>from copy import copy<>

<cb>= copy.copy(<v>item_1<>)<>

Makes a shallow copy of any variable, particularly objects or collections.
All child objects will be referenced from the new item.
@
@ copy.copy(), .copy(), object, instance



### Item - dir - Show Methods, Attributes

<cb>dir(<v>Class1<>)<>

<cb>dir(<v>instance_1<>)<>

Prints all available methods and attributes on an item.
Works for classes, class instances, functions, just about everything.
@
@ dir(), available methods, attributes, class, view, functions



### Line Separator

<cb>from os import linesep

= linesep<>

Returns the OS specific new line character.
@
@ newline, new line
@ os.linesep



### Local Symbols - Get

<cb>= locals()<>


Returns: <c>dict<>


Locals returns all symbols currently in local scope from the local symbol table.
@
@ locals(), in scope



### Logical Operator - XOR

<cb>= bool(<v>a<>) != bool(<v>b<>)<>

If <c><v>a<><>, <c><v>b<><> Are Booleans:

<cb>= <v>a<> != <v>b<><>


There is no explicit XOR operator but <c>!=<> works just fine.



### Module - File Path

<cb>= __file__<>
@
@ __file__



### Module - Root

<cb>= __main__<>
@
@ __main__



### Module - Root - File Path

<cb>= __main__.__file__<>
@
@ __main__.__file__, __main__ __file__



### Operating System - Get

<cb>from platform import system<>

<cb>= system()<>


Returns the current Operating System

Linux:

<cb>= 'Linux'<>

MacOS:

<cb>= 'Darwin'<>

Windows:

<cb>= 'Windows'<>

@
@ get, os, windows, linux, macos, darwin, find



### Print

<cb>print("<v>Text to be printed.<>")<>

<cb>print("<v>item 1<>", "<v>item 2<>", <v>...<>)			<#>#1<><>

<cb>print(repr(<v>item_1<>))						<#>#2<><>


\#1  -  Puts a space between items.

\#2  -  Use when <c>print(<v>item_1<>)<> wouldn't work<>.


Prints to the standard out.
Automatically moves to the next line.
@
@ print(), echo, to console, print-only, standard output, stdout, print()



### Print - No Newline

<cb>print('<v>text...<>', end='')<>
@
@ print(), echo, to console, print-only, standard output, stdout, new line, end=



### Print - No Separator

<cb>print('<v>text1<>', '<v>text2<>', '<v>text3<>', sep='')<>
@
@ print(), echo, to console, print-only, standard output, stdout, sep=



### Print - PPrint

<cb>import pprint

pprint.pprint(<v>value<>)<>

Prints Python data structures in a readable format.
@
@ pretty print pprint.pprint()



### Print - To Standard Error

Preferred:

<cb>print('<v>text...<>', file = sys.stderr)<>

Alternative:

<cb>sys.stderr.write('<v>text...<>')<>
@
@ print(), echo, to console, print-only, standard output, stderr, sys.stderr, file=



### Print - To Standard Out

Preferred:

<cb>print('<v>text...<>')<>

Explicit:

<cb>print('<v>text...<>', file = sys.stdout)<>
@
@ print(), echo, to console, print-only, standard output, stdout, sys.stdout, file=



### Program - Arguments - Get

<cb>from sys import argv

<v>arguments<> = argv[1:]<>

Use <c>argv[1:]<> to return arguments.
<c>.argv[0]<> returns the module file name.
@
@ sys.argv
@ Command Line Start
@ parameters, params, args, arguments, system, program



### Program - Arguments - Has

<cb>from sys import argv

= len(argv) > 1<>


Returns True when the program has command line arguments.
@
@ sys.argv
@ Command Line Start
@ parameters, params, args, arguments, system, program



### Program - Starting Module

<cb>from sys import argv

<v>module_name<> = argv[0]<>

Returns the name of the starting module file.
@
@ sys argv, sys.argv
@ command line, entry point, program, script



### Python Home Directory

<cb>from sys import prefix

<v>python_home_directory<> = prefix<>

This is where Python thinks it's home directory is.
@
@ sys.prefix, path, folder



### Python Module Search Path

<cb>import path from sys

<v>module_search_path<> = path<>


Returns the python module search path.
@
@ sys.path, get, mod



### Python Version

<cb>import sys

<v>version<> = sys.version					<#># Text Form of Version Number<><>

<cb>= sys.version_info						<#># Properties <c>major<>, <c>minor<>, And <c>micro<><><>


Example:

<cb>import sys

print(
		sys.version_info.major, '-',
		sys.version_info.minor, '-',
		sys.version_info.micro)<>
@
@ sys.version, sys.version_info
@ language, number, get



### Python Version - Descriptive

<cb>from sys import version

<v>descriptive_version<> = version<>

Includes version number, build date, clang version.
@
@ version, sys.version



### Show Help

<cb>help(<v>item<>)<>

Shows help documentation for <c><v>item<><>.
Will display the docstring if available.
Works for keywords, functions, classes, methods, or modules.
@
@ functions, help(), docstring, class, documentation, keyword, module, methods



### Sleep

<cb>from time import sleep

sleep(<v>time_in_seconds<>)<>

Sleep for the time in seconds.
Takes floats (0.030 = 30 ms)


Example:

<cb>from time import sleep

sleep(1.5)
<#># Sleep 1½ seconds.<><>
@
@ sleep(), pause, suspend, time delay, time.sleep()



### Sleep - Until Given Time

Function:

<cb>from datetime import datetime
from time import sleep

def <v>slee_until<>(<v>datetime_1<>):
	sleep((<v>datetime_1<> - datetime.now()).total_seconds())<>

Call:

<cb><v>sleep_until<>(<v>datetime_1<>)<>

Sleeps until the given time has passed.
Works fine for sub-second times.



### System - Exit, Return Exit Code

<cb>import sys

sys.exit(<v>exit_code<>)<>

Returns from execution with the given exit code.

Recommended Exit Codes:

	0	OK
	1	General Error
	2	Command Line Validation
@
@ error code, status, number, end program, stop, quit, sys.exit(), .exit(), .quit(), python, script, application



### System - Exit, Return Exit Messages

<cb>import sys

sys.exit(<v>exit_message<>)<>

Returns from execution with error code 1.
Prints <c><v>exit_message<><>.
@
@ error, status, end program, stop, quit, sys.exit(), .exit(), .quit(), python, script, application



### Timer - Measure Elapsed Time

<cb>from time import perf_counter

<v>start<> = perf_counter()
<v>...<>
<v>end<> = perf_counter()

<v>difference_in_seconds<> = <v>end<> - <v>start<><>

Returns: <c>float<>


<c>perf_counter()<> returns the elapsed time in seconds,
Prefer over <c>time.time()<> as <c>perf_counter()<> is more accurate.
@
@ time.perf_counter(), .per_counter(), timing



### Timer - Measure Execution Time (CPU Time)

<cb>from time import process_time

<v>start<> = process_time()
<v>...<>
<v>end<> = process_time()

<v>difference_in_seconds<> = <v>end<> - <v>start<><>

Returns: <c>float<>


<c>process_time()<> returns the execution time (CPU time) in seconds as a float.
Does not measure time while a process is sleeping or suspended.
@
@ time.process_time(), .process_time(), timing



### Timing - perf_counter() vs process_time() vs time()

<c>perf_counter()<>:

<*>Prefer over <c>time()<> (more accurate).
Measures elapsed time precisely.
perf_counter -> Performance Counter
<c>import time.perf_counter<><>

<c>process_time()<>:

<*>Measures CPU time only.
If the process sleeps, that time will not be tracked.
<c>import time.process_time<><>

<c>time()<>:

<*>Measures absolute elapsed time.
Not guaranteed to be accurate as it can be changed.
<c>import time.time<><>
@
@ time.perf_counter(), .per_counter()
@ time.process_time(), .process_time()
@ time.time(), .time()



# Reference - Formatting

Python Format Page:
<l>https://docs.python.org/3/library/string.html#format-specification-mini-language<>
@
@ format-only, formatting-only, formats-only, f-strings, fstrings, .format(), f"", f'', codes, symbols



### Format - Padding
@
@ strings, integers, floats, numbers



#### Format - Pad Center Text

With Spaces:

<cb>= f'{<v>item_1<>:^<v>length<>}'<>

<cb>= '{:^<v>length<>}'.format(<v>item_1<>)<>


With Fill Character:

<cb>= f'{<v>item_1<>:<v>fill_character<>^<v>length<>}'<>

<cb>= '{:<v>fill_character<>^<v>length<>}'.format(<v>item_1<>)<>


Text centered, pad both sides.


Example:

<cb><v>formatted_1<> = "{:^15}".format(<v>"Center"<>)

<#># Returns '<c>    Center     <>'<><>

<cb><v>formatted_2<> = "{:*^15}".format(<v>"Center"<>)

<#># Returns '<c>****Center*****<>'<><>
@
@ Around



#### Format - Pad Left

With Spaces:

<cb>= f'{<v>item_1<>:><v>length<>}'<>

<cb>= '{:><v>length<>}'.format(<v>item_1<>)<>


With Fill Character:

<cb>= f'{<v>item_1<>:<v>fill_character<>><v>length<>}'<>

<cb>= '{:<v>fill_character<>><v>length<>}'.format(<v>item_1<>)<>


Text right, pad left.


Example:

<cb><v>formatted_1<> = "{:>15}".format(<v>"Pad Left"<>)

<#># Returns '<c>       Pad Left<>'<><>

<cb><v>formatted_2<> = "{:*>15}".format(<v>"Pad Left"<>)

<#># Returns '<c>*******Pad Left<>'<><>
@
@ Right Justify, start



#### Format - Pad Right

With Spaces:

<cb>= f'{<v>item_1<>:\<<v>length<>}'<>

<cb>= '{:\<<v>length<>}'.format(<v>item_1<>)<>


With Fill Character:

<cb>= '{<v>item_1<>:<v>fill_character<>\<<v>length<>}'<>

<cb>= '{:<v>fill_character<>\<<v>length<>}'.format(<v>item_1<>)<>


Text left, pad right.


Example:

<cb><v>formatted_1<> = "{:\<15}".format(<v>"Pad Right"<>)

<#># Returns '<c>Pad Right      <>'<><>

<cb><v>formatted_2<> = "{:*\<15}".format(<v>"Pad Right"<>)

<#># Returns '<c>Pad Right******<>'<><>
@
@ Left Justify, End



### Format - Date / Date Time

<cb>= f'{<v>datetime_1<>:<v>date_format<>}'<>

<cb>= '{:<v>date_format<>}'.format(<v>datetime_1<>)<>
@
@ To String, datetime, date times



#### Format Date - Date Format Codes

Literal %			<c>%<>			<c>%%<>

Day 			<c>1-31<>		<c>%-d<>
				<c>01-31<>		<c>%d<>

Day of Week		<c>0-6<>			<c>%w<>
				<c>1-7<>			<c>%u<>		<#>(ISO 8601)<>
				<c>Mon<>			<c>%a<>
				<c>Monday<>		<c>%A<>

Day of Year		<c>1-365<>		<c>%-j<>
				<c>001-365<>		<c>%j<>

Month			<c>1-12<>		<c>%-m<>
				<c>01-12<>		<c>%m<>
				<c>Jan<>			<c>%b<>
				<c>January<>		<c>%B<>

Week			<c>0-53<>		<c>%-U<>		<#>(Starts Sunday)<>
				<c>00-53<>		<c>%U<>		<#>(Starts Sunday)<>
				<c>0-53<>		<c>%-W<>		<#>(Starts Monday)<>
				<c>00-53<>		<c>%W<>		<#>(Starts Monday)<>
				<c>0-53<>		<c>%-V<>		<#>(Starts Monday) (ISO 8601)<>
				<c>00-53<>		<c>%V<>		<#>(Starts Monday) (ISO 8601)<>

Year			<c>00-99<>		<c>%y<>
				<c>2001<>		<c>%Y<>


Time Zone					<c>%Z<>
UTC Offset					<c>%z<>

Local Date					<c>%x<>

Local Date Time				<c>%c<>
@
@ pattern, formats
@ %%, %a, %b, %c, %d, %j, %m, %u, %v, %w, %x, %y
@ yyyy-mm-dd, year, month, day, week, local, iso 8601, iso-8601



#### Format Date - Time Format Codes

Literal %			<c>%<>			<c>%%<>

Milliseconds	<c>000000-999999<>	<c>%f<>

Second			<c>00-59<>		<c>%S<>
				<c>0-59<>		<c>%-S<>

Minute			<c>00-59<>		<c>%M<>
				<c>0-59<>		<c>%-M<>

Hour			<c>00-12<>		<c>%I<>
				<c>0-12<>		<c>%-I<>
				<c>00-23<>		<c>%H<>
				<c>0-23<>		<c>%-H<>

AM/PM			<c>AM <s>|<> PM<>		<c>%p<>

Time Zone		<c>UTC<>			<c>%Z<>

UTC Offset		<#># -0500<>		<c>%z<>

Local Time					<c>%X<>
@
@ formats, timezones, pattern
@ %%, %f, %s, %m, %i, %h, %p, %z, %x
@ hh-mm-ss, am, pm, UTC, timezone, time zone, hour, minute, second, millisecond, local time



#### Format Date - HH:MM:SS

Using F-String:

<cb>= f'{<v>datetime_1<>:%H:%M:%S}'<>

Using format():

<cb>= '{:%H:%M:%S}'.format(<v>datetime_1<>)<>


Returns hour, minute, second.
@
@ datetime, time, hour, minute, second, hhmmss



#### Format Date - YYYY-MM-DD

Using F-String:

<cb>= f'{<v>datetime_1<>:%Y-%m-%d}'<>

Using format():

<cb>= '{:%Y-%m-%d}'.format(<v>datetime_1<>)<>

Returns year, month, day.

Works with dates and datetimes.
@
@ datetime, Year, Month, Day, iso 8601, iso-8601, yyyymmdd



#### Format Date - YYYY-MM-DD HH:MM:SS

Using F-String:

<cb>= '{<v>datetime_1:%Y-%m-%d %H:%M:%S}'<>

Using format():

<cb>= '{:%Y-%m-%d %H:%M:%S}'.format(<v>date_1<>)<>

<cb>= '{:%Y-%m-%d %H:%M:%S}'.format(<v>datetime_1<>)<>

Returns year, month, day, hour, minute, second.
For dates will print time as '00:00:00'
@
@ datetime, year, month, day, hour, minute, second, yyyymmdd, hhmmsss



### Format Date - Standard Formats
@
@ dates


#### Format Date - Ireland / UK

Using F-String:

<cb>= f'{<v>datetime_1<>:%d/%m/%Y}'<>

Using format():

<cb>= '{:%d/%m/%Y}'.format(<v>datetime_1<>)<>

Format:

<cb><v>dd<>/<v>mm<>/<v>yyyy<><>
@
@ DD/MM/YYYY, DD-MM-YYYY



#### Format Date - Europe

Using F-String:

<cb>= f'{<v>datetime_1<>:%d.%m.%Y}'<>

Using format():

<cb>= '{:%d.%m.%Y}'.format(<v>datetime_1<>)<>

Format:

<cb><v>dd<>.<v>mm<>.<v>yyyy<><>
@
@ DD.MM.YYYY



#### Format Date - USA

Using F-String:

<cb>= f'{<v>datetime_1<>:%m/%d/%Y}'<>

Using format():

<cb>= '{:%m/%d/%Y}'.format(<v>datetime_1<>)<>

Format:

<cb><v>mm<>/<v>dd<>/<v>yyyy<><>
@
@ MM/DD/YYYY, MM-DD-YYYY, MMDDYYYY



#### Format Date - ISO 8601 / International

YYYY-MM-DD:

<cb>= f'{<v>datetime_1<>:%Y-%m-%d}'<>

<cb>= '{:%Y-%m-%d}'.format(<v>datetime_1<>)<>

YYYYMMDD:

<cb>= f'{<v>datetime_1<>:%Y%m%d}'<>

<cb>= '{:%Y%m%d}'.format(<v>datetime_1<>)<>
@
@ iso-8601, YYYY-MM-DD, YYYYMMDD



#### Format Date Time - ISO 8601 / International

YYYYMMDDThhmmss:

<cb>= f'{<v>datetime_1<>:%Y%m%dT%H%M%S}'<>

<cb>= '{:%Y%m%dT%H%M%S}'.format(<v>datetime_1<>)<>

YYYY-MM-DDThh:mm:ss:

<cb>= f'{<v>datetime_1<>:%Y-%m-%dT%H:%M:%S}'<>

<cb>= '{:%Y-%m-%dT%H:%M:%S}'.format(<v>datetime_1<>)<>

YYYY-MM-DDThh:mm:ssZ:

<cb>= f'{<v>datetime_1<>:%Y-%m-%dT%H:%M:%S%Z}'<>

<cb>= '{:%Y-%m-%dT%H:%M-:S%Z}'.format(<v>datetime_1<>)<>
@
@ iso-8601, YYYYMMDDThhmmss, YYYY-MM-DDThh:mm:ss, YYYY-MM-DDThh:mm:ssz



### Format Integer
@
@ Numbers, integers



#### Format Integer - Comma Separated

Using F-String:

<cb>= f'{<v>int_1<>:,}'<>

Using format():

<cb>= '{:,}'.format(<v>int_1<>)<>


Example:

<cb><v>an_int<> = 1234

<v>formatted<> = f'{<v>an_int<>:,}'

<#># Returns '1,234'<><>



#### Format Integer - Leading Zeros

Using F-String:

<cb>= f'{<v>int_1<>:0<v>length<>}'<>

Using format():

<cb>= '{:0<v>length<>}'.format(<v>int_1<>)<>


<c><v>length<><> is the total length including leading zeros.


Example:

<cb><v>an_int<> = 1234

<v>formatted<> = f'{<v>an_int<>:0<v>6<>}'

<#># Returns '001234'<><>



### Format - Float

Basic:

<cb>= f'{<v>value<>:f}'<>

<cb>= '{:f}'.format(<v>value<>)<>


With Formatting:

<cb>= f'{<v>value<>:<v>format<>f}'<>

<cb>= '{:<v>format<>f}'.format(<v>value<>)<>
@
@ Numbers, floats



#### Format Float - Decimals

<cb>= f'{<v>value<>:.<v>decimals<>f}'<>

<cb>= '{:.<v>decimals<>f}'.format(<v>value<>)<>


Rounds up or down as needed.


Example:

<cb><v>formatted_1<> = '{:.<v>2<>f}'.format(<v>12.3456<>)

<#># Returns '12.35'<><>
@
@ decimal point



#### Format Float - Decimals, Comma Separated

<cb>= '{<v>value<>:,.<v>decimals<>f}'<>

<cb>= '{:,.<v>decimals<>f}'.format(<v>value<>)<>


Rounds up or down as needed.


Example:

<cb><v>formatted_1<> = '{:,.<v>2<>f}'.format(<v>1234.567<>)

<#># Returns '1,234.57'<><>
@
@ decimal point



### Format Codes - Reverse Lookup

Codes for the <c><v>format<><> Part In:

<cb>f'{<v>value<>:<v>format<>}'

'{:<v>format<>}'.format(<v>value<>)<>


<c>%%<>			Escaped %
<c>{{<>			Escaped {
<c>}}<>			Escaped }

<c>,<>			Comma Separated Numbers
<c>.<v>2<><>			Decimal Places

<c>\<<v>10<><>			Align Left  /  Pad Right
<c>><v>10<><>			Align Right  /  Pad Left
<c>^<v>10<><>			Align Center

<c>0<v>10<><>			Leading Zeroes

<c><v>char<>\<<v>10<><>		Alight Left, Fill Character <c><v>char<><>
<c><v>char<>><v>10<><>		Alight Right, Fill Character <c><v>char<><>
<c><v>char<>^<v>10<><>		Alight Center, Fill Character <c><v>char<><>

<c>%%<>			Literal %			<c>%<>
<c>%-d<>			Day 			<c>1-31<>
<c>%-H<>			Hour			<c>0-23<>
<c>%-I<>			Hour			<c>0-12<>
<c>%-j<>			Day of Year		<c>1-365<>
<c>%-M<>			Minute			<c>0-59<>
<c>%-m<>			Month			<c>1-12<>
<c>%-S<>			Second			<c>0-59<>
<c>%-U<>			Week			<c>0-53<> (Starts Sunday)
<c>%-V<>			Week			<c>0-53<> (Starts Monday) (ISO 8601)
<c>%-W<>			Week			<c>0-53<> (Starts Monday)
<c>%a<>			Day of Week		<c>Mon<>
<c>%A<>			Day of Week		<c>Monday<>
<c>%b<>			Month			<c>Jan<>
<c>%B<>			Month			<c>January<>
<c>%c<>			Local Date Time
<c>%d<>			Day				<c>01-31<>
<c>%f<>			Milliseconds		<c>000000-999999<>
<c>%H<>			Hour			<c>00-23<>
<c>%I<>			Hour			<c>00-12<>
<c>%j<>			Day of Year		<c>001-365<>
<c>%m<>			Month			<c>01-12<>
<c>%M<>			Minute			<c>00-59<>
<c>%p<>			AM/PM			<c>AM <s>|<> PM<>
<c>%S<>			Second			<c>00-59<>
<c>%u<>			Day of Week		<c>1-7<>	 (ISO 8601)
<c>%U<>			Week			<c>00-53<> (Starts Sunday)
<c>%V<>			Week			<c>01-53<> (Starts Monday) (ISO 8601)
<c>%w<>			Day of Week		<c>0-6<>
<c>%W<>			Week			<c>00-53<> (Starts Monday)
<c>%x<>			Local Date
<c>%y<>			Year			<c>00-99<>
<c>%Y<>			Year			<c>2001<>
<c>%z<>			UTC Offset		(e.g. -0500)
<c>%Z<>			Time Zone		<c>UTC<>
<c>%X<>			Local Time
@
@ @%%, %-d, %-H, %-I, %-j, %-M, %-m, %-S, %-U, %-V, %-W, %a, %A, %b, %B, %c, %d, %f, %H, %I, %j, %M, %m, %p, %S, %u, %U, %V, %w, %W, %x, %y, %Y, %Z, %z, %X



# Reference - Magic Methods
@
@ magic-only, magic-methods-only, double underscore


### __bool__

Returns the true or false value of an object.
Return True for non zero, non empty values.
Use with if statements or <c>bool()<> function.


Example:

<cb>class <v>GetBoolean<>:

	def __init__(self, <v>bool_value<>):
		self.<v>bool_value<> = <v>bool_value<>

	def __bool__(self):
		return self.<v>bool_value<><>

<cb><v>is_true<> = <v>GetBoolean<>(<v>True<>)				<#># Set To True<>

<v>actual_value<> = bool(<v>is_true<>)			<#># Returns True<><>

<cb><v>is_true<> = <v>GetBoolean<>(<v>True<>)				<#># Set To True<>

if <v>is_true<>:
	<v>...<><>
@
@ bool, __bool__()



### __contains__

<cb>def __contains__(self, <v>value<>):
	<v>...<><>

<cb>if <v>item<> in <v>class_1<>:
	<v>...<><>

Overloads 'in' operator.
@
@ __contains__(), Overload, in, __in__()



### __dict__

<cb>= <v>class_1<>.__dict__.keys()<>

Returns class attributes as a dict.



### __doc__

<cb>= <v>Class1<>.__doc__						<#># From Class<><>

<cb>= <v>class_1<>.__doc__						<#># From Instance<><>

Returns the object's docstring.



### __file__

Returns the file name of the current module.



### __init__

<cb>class <v>Class1<>:

	def __init__(self, <v>...<>):
		<v>...<><>

Class initializer / constructor.



### __iter__

Returns an iterator usable with <c>for<> and <c>in<> statements.
Implement this method if you want to return an iterator for your object.

See: <c>__next__<>
See: Class - Iterator - Define



### __len___

Returns the length or count of an object.
Use with len function.


Example:

<cb>class <v>GetLength<>:

	def __init__(self, length):
		self.length = length

	def __len__(self):
		return self.length


<v>of_length_10<> = <v>GetLength<>(<v>10<>)

<v>length<> = len(<v>of_length_10<>)				<#># Returns 10<><>
@
@ size, count, len()



### __main__

The main/root module reference.
If <c>__name__ == '__main__'<>, this is the main module, the entry point into the program.


Example:

<cb>if __name__ == '__main__':
	<v>startup_code_here...<><>
@
@ Startup



### __name__

The name of the object.

e.g. module, class or function name.



### __next__

Iterator: Returns the next item in the collection.
Iterator: Raises an exception beyond the last point.



### __repr__

Returns unambiguous string representation of the class.
Always implement this.
@
@ tostring()



### __str__

Returns a readable string representation of the class.
Will call <c>__repr__<> if no <c>__str__()<> method found.
@
@ tostring()



### __repr__ vs __str__

<c>__repr__<>

	Use to show an unambiguous version of the class.
	You should always implement this.

<c>__str__<>

	Use to show a human readable version of the class.
	If not present, Python will call <c>__repr__<>.



# Reference - Standard Packages



### Package - kombu

Message Queue Library



### Package - os

OS and File Related Functions



### Package - sys

System Utilities



### Package - zipfile

Zip Class, Functions



# Reference - Coming From Other Languages


### Arrays

Use <c><l "/s/python?search=list-only">list<><>.

Python does not have built in arrays.
Use lists instead.
You can also use the Array library.
@
@ Create, New, Define, Instantiate



### Arrow Functions, ->, =>

Use <c><l "/s/python?search=lambda-only">lambdas<><>.



### istype, instanceof

Use <c><l "/s/python?search=type()">type()<><> or <c><l "/s/python?search=isinstance()">isinstance()<><>.



### Long

Use <c><l "/s/python?search=int-only">int<><>.

Python has only one integer type and that is <c>int<>.
@
@ long-only
@ Create, Define, Instantiate, New



### New Keyword

Not needed.

Python does not require <c>new<> when creatin a new instance of a class.


Example:

<cb><v>instance_1<> = <v>Class1<>()		<#># Creates a New Instance of Class1<><>
@
@ classes



### Nil, Null

Use <c><l "/s/python?search=none-only">None<><>.

Python's version of <c>nil<> or <c>null<> is <c>None<>.

For char(0), use <c>"\\00"<>.
@
@ long-only
@ Create, Define, Instantiate, New, is, isnull



### Stack

There is no stack. Use <c><l "/s/python?search=list-only">list<><> instead.


Example:

<cb><v>stack_1<> = []

<v>stack_1<>.append(<v>item<>)

<v>item<> = <v>stack_1<>.pop()<>
@
@ data type, collections, stacks, push, pop, add, remove, append to



### Throw

Use:

<cb>raise <v>Exception1<>()<>

See: <l "/s/python?search=exceptions-only">Exceptions<>.
@
@ throws, thrown



### Try Catch

Use:

<cb>try:

except Exception as <v>exception_1<>:<>

See: <l "/s/python?search=exceptions-only">Exceptions<>.
@
@ thrown


# Terms
@
@ Glossary
@ terms-only, glossary-only



### *args
Arguments passed to a function as a tuple.

When calling the function, the sequence or list is converted to the function arguments in order.
When the arguments as defined as <c>*args<> in the function, arguments are converted to a tuple and then passed in.
@
@ params, args, arguments
@ single asterisk, star



### **kwargs
Arguments passed to a function as a key value dict.

When calling the function, the keys are mapped to the function's internal arguments by name.
When the arguments are defined as <c>**kwargs<> in the function, named arguments are converted to a dict and then passed in.
@
@ kwargs
@ parameter, params, args, arguments
@ double asterisks, stars, keyword arguments, key word



### ABC
Abstract Base Class



### AST
Abstract Syntax Tree



### arg
An argument passed into a function.



### AWS
This is used in coroutines and event loops.

Best guess:
Awaitable subroutine.

<!>Someone who knows, can you please help us out and tell us what this stands for?<>



### FP
File Pointer

<cb>with open(<v>file_name<>, "w") as <v>fp<>:
	<v>fp<>.write()<>

See: <l "/s/python?search=open()+write">Write File<>



### GIL
Global Interpreter Lock



### PEP
Python Enhancement Proposals



### PIP
Pip Installs Packages (Python’s Package Manager)



### PyPI
Python Package Index



#### Python File Extension .py
Python code file.



#### Python File Extension .pyc
Python compiled bytecode.
Automatically generated.



#### Python File Extension .pyo
Python compiled module.
Created by interpreter when a module is imported.



#### Python File Extension .pyd
Windows dynamic link library that contains a python module.
Called from other python applications.



### REPL
Read Eval Print Loop

Pythons inteactive command line interface for executing Python code.



### VENV
Virtual Environment



### Asynchronous Programs
Breaks a task into internal and external steps.

The external steps are submitted.
Then the internal steps are performed.
Finally the responses from the external steps are collected.

The external task is often represented by an object
called future, promise or task.

Best for I/O bound processes and Python threads.



### Attribute
A class variable or function. Anything you reference with '.' . 



### Awaitable

Anything that can be used with <c>await<>.

Main types: coroutines, Tasks, and Futures



### Class
A class object defined in a module file. Classes should use Pascal case.



### Class Member
Any variable or function defined in the class.

All members are public.



### Class Method
Stored as an attribute on a class.



### Closure
Is a function that "closes over" the environment it was defined in. It has access to all the variables in that are in scope in that environment without having to explicitly have them passed in.

This applies to lambdas and nested functions.



### Constants
There is no mechanism to enforce constants in Python.

Use a regular variable, style it as a constant and trust your fellow developers to play by the rules!
@
@ variable



### Coroutine
A suspendable function for use in concurrent thread processes.

It can be stopped and restarted and will voluntarily yield control to other functions on the current thread instead of blocking.
Use this to work on single threaded event loops.



### Daemon Process
A process that runs independently of its parent process.

It will continue to run when the parent terminates.



### Decorator
A method or class that runs before a method is called.

The decorator method is applied with <c>@<v>decorator<><> ('@' + decorator function name).
Not related to the decorator pattern.



### Deep vs Shallow Copying

Shallow Copy:
Creates a copy of the parent object but reuses the original child objects.

Deep Copy:
Creates duplicates of the parent object and all related child objects.
Can break if there are circular references.
@
@ deepcopy


### Dictionary
A dict. A collection of key value pairs.



### Duck Typing
If it walks like a duck and quacks like a duck, it is a duck.

Duck typing states that if the method exists, the object supports that action and you can invoke it.
There is no type checking to see if the object type or superclass explicitly supports that method.



### Dunder Method
Any method that stars and ends with a double underscore.

Example: <c>__name__<>

Dunder = Double Underscore
See: Magic Method
@
@ double underscore



### Egg File
A zip file containing Python files. It is runnable if it contains __main__.py in the root directory.



### Event Loop
A single threaded process that places coroutines and tasks on a queue and executes them one at a time.
The task or coroutine will voluntarily give up control back to the event loop when blocked, allowing other tasks to continue.

Great for handling IO bound operations where you don't want to block execution when waiting for external operations to complete.



### Expression
Some code that evaluates to a value.

Examples:

<cb>1 + 3
"A string"
<v>my_variable<><>



### Formatted String literal
An f-string or string in the form <c>f"<v>text<>"<>.

Used to create a formatted string.



### Function
A callable section of code that has a name, takes arguments and performs an action or calculation.
Python functions can be stand alone or in a class.



### Function - Function Overloading
Not supported by Python.

Use named argument passing or optional function arguments.

Function overloading is where multiple functions are defined with the same name but have different arguments. For Python, use named arguments with default values inside a single function instead.



### Function - Inner Function
A function defined inside another function.



### Generics
Strictly speaking not supported in Python.

Python is a dynamic language and uses duck typing. No need for Generics.

Python's typing library allows you to declare generic types but they are ignored by the compiler.



### Global Interpreter Lock (GIL)
Used by python to protect the interpreter's state during multitasking operations.

Prevents multiple native threads from executing python code at the same time.

It is needed to prevent race conditions and dead locks with Python's memory management unit.
It is implemented as a mutex (lock) that allows only one thread to hold control of Python's interpreter.
A thread must obtain the lock before it can execute.
IO bound operations automatically release control to the GIL so other threads can run.

See: Multitasking, Thread



### Gorilla
Here is a gorilla  🦍



### Goto
Not supported in Python
@
@ go to



### Green Threads
Python's mechanism for emulating multi-threading.

They are managed in user space instead of kernel space, enabling them to work in environments that do not have native thread support. They work like cooperative multi-threading. Each thread voluntarily/explicitly give up control to one another at specified points in your code.

Also called: Greenlets
@
@ Greenlets



### Guido van Rossum
The creator of Python.

Guido created Python in 1991.



### Inter-Process Communication

Use any of these:

	Pipe
	Queue
	Shared Memory
	Shared Manager



#### Inter-Process Communication - Shared Memory

<cb>multiprocessing.Value<>

<cb>multiprocessing.Array<>


These are faster than a shared manager but have restrictions.



#### Inter-Process Communication - Shared Manager

Slower, uses proxy to write to shared memory.
Supports a wider range of types (dicts, lists, semaphores, etc.)

Can share memory over the network.



### Iterable
Any object that returns an iterator.

Used by any class that has data that can be iterated over.



### Iterator
An object that iterates over a set of data.

It returns the data one element at a time.



### Kitchen Sink
So we might have lied about the kitchen sink. But we are doing our best to make this as complete as possible.

Let us know what we should have in here but don't.

And one day, we may also add the kitchen sink!



### Lazy Iterators
These iterators evaluate each value one at a time and only when required.

Examples: Generator Expression, Yield



### Magic Method
A python language method that adds "magic" functionality to a class.

Reserved for system methods. These methods are always in the form <c>__<v>methodname<>__<>. The double underscores is a way of ensuring system method names don't collide with user names.

Also called: A Dunder method (<b>d<>ouble-<b>under<>score).
@
@ dunder, double underscore



### Map Data Structure
Use Python's <c>dict<> for other languages' map() or dictionary() data structures.
@
@ map()



### Memory Management
Python uses reference counting to track when objects become unused. When the count is 0, the object memory gets freed.



### Method or Function Overloading
Not supported in Python.

Use named argument passing or optional method arguments.

Use default values in the method signatures and pass arguments by name.



### Mixin
A special kind of multiple inheritance.

Used to either: 
- provide a lot of optional features for a class.
- use a particular feature in a lot of classes.

For the optional feature classes, these classes are not designed to stand alone but add some functionality to another class type.



### Module
A file that contains related Python definitions and statements. Should be short and lower case. Module names map to file names.



### Monkey Patch
Python's mechanism for changing the behaviour of a piece of code at runtime.

Functions or class methods can be changed dynamically while the application is running.
Usually done for testing purposes (unit tests).



### Multitasking
Python implements multitasking through non-blocking event loops, multithreading or multiprocessing.
Each has their benefits and costs.



#### Multitasking - Event Loops
Runs non blocking functions on a single threaded event loop.
Functions identify themselves as non-blocking and voluntarily give up control to the interpreter.

This has very little overhead and improves performance for IO bound operations.
It is slower than Multithreading but easier to code and is faster than sequential processing.
All core Python IO operations are non-blocking and work well.



#### Multitasking - Multithreading
Pythons multitasking implementation using threads.

It allows cooperative multitasking and uses shared memory.
It is light weight and starts up fast but will not do true multitasking.
Threads must voluntarily give up control to the interpreter.
However, it is ideal for processing IO bound operations.

See: Threads



### Multiprocessing
Pythons multitasking implementation using processes.

It allows multitasking in separate memory spaces.
It is costly to start and does not share memory (by default) with other processes but it preforms true multitasking.

See: Process



### Numpy
A scientific computing package/library.



### Object Aliasing
The ability for Python to assign multiple names to Python objects.

e.g. Functions can be referenced through multiple names.



### Operators
A symbols takes one or two arguments and performs a calculation on them.

Example: +, -, *, /



### Package
A directory that contains module files and the file <c>__info__.py<> (required).
All packages are modules but not all modules are packages.



### Pass By Assignment
Python passes arguments by assignment (object reference).

All variables are references(pointers) to an object. The references are copied in the arguments. Thus the function/method has access to the original value and mutable objects can be changed. However, reassign the variable ( var = …) and the reference to the original object is gone.



### PEP 8 - Style Guide
Python Standard Style Guide

<l>https://www.python.org/dev/peps/pep-0008/<>
@
@ pep-8



### Pickling
Converting an object hierarchy into a byte stream.

Unpickling is the inverse operation converting a byte stream back into an object hierarchy.
@
@ pickle



### Process
A single execution unit executing a part of the program.

Processes run on their own python interpeter and have their own memory space. As a result, there are no issues with GIL and performance is improved. They are costly to start up (use Pool to get the startup hit only one time) but perform true multitasking.

Library: multiprocessing

See Also: Multitasking, Threads
@
@ Multitasking



### PyPy
An alternative to the standard python language.

Features: Just in time compiler, better memory management, Stackless.
PyPy is written in RPython and compiled into c.



### Python Package Index (PiPy)
Python software repository.
@
@ Pipy, Pypi



### Python Programming Language
Python was created in 1991 by Guido van Rossum.
@
@ 1991



### Raw String
A string where values betweth the quotes are seet as in. No processing is done on the values between the quotes.



### Read Eval Print Loop (REPL)
Python’s interactive command line environment.



### Reserved Words

A reserved word is a key word that has special meaning or purpose to Python.
It can not be used as the name of a user created object, variable or function.

<c>and<>, <c>as<>, <c>assert<>, <c>break<>
<c>class<>, <c>continue<>, <c>def<>, <c>del<>
<c>elif<>, <c>else<>, <c>except<>, <c>False<>
<c>finally<>, <c>for<>, <c>from<>, <c>global<>
<c>if<>, <c>import<>, <c>in<>, <c>is<>
<c>lambda<>, <c>None<>, <c>nonlocal<>, <c>not<>
<c>or<>, <c>pass<>, <c>raise<>, <c>return<>
<c>True<>, <c>try<>, <c>while<>, <c>with<>
<c>yield<>
@
@ Keywords
@ and, as, assert, break, class, continue, def, del, elif, else, except
@ False, finally, for, from, global, if, import, in, is, lambda, None
@ nonlocal, not, or, pass, raise, return, True, try, while, with, yield



### RPython
A strict subset of python that can be statically compiled into C.



### Samples
Congratulations in testing out the <b>-only<> feature. Here are your samples 👍

Not happy with this? Let us know and we'll put something better in here.
@
@ Sample-only, Samples-only



### self
A reference to the class instance.

Use it to reference any instance variables or methods inside the class..
Must be declared in every instance method in a class.

Similar to <c>this<> in other languages.


Example:

<cb>self.<v>property_1<> = <v>...<>

self.<v>function_1<>()<>



### Sequence
Any iterable type in Python.

Includes lists, sets, tuples, range, strings, etc.



### Symbol Table
A structure used by python to track and manage what program elements have been loaded and are are in scope.


#### Global Symbol Table
Manages all program elements that are global.

See: globals()


#### Local Symbol Table
Manages all program elements that are currently in local scope.

See: locals()



### Thread
A single execution unit executing a part of the program.

Threads run in shared memory, on a single execution thread and use the same python interpreter. A thread needs to acquire GIL lock before it can execute. Threads are light weight to start up. Threads do not give an overall performance improvement as they use cooperative multitasking inside a single process.

Library: threading

See Also: Multitasking, Process, GIL

@ Multitasking, Multithreading



### Timestamp
The number of seconds since January 1st, 1970 at 00:00:00 UTC.

Can be an integer or float.

Also called Unix Time, Epoch Time.
@
@ Unix Time, Epoch Time



### Top Level Statement
Statements in a module (python file) that are outside functions and classes.



### Tuple
An immutable Array.



### Typing Library
Added to Python 3.5, this allows you to label types in function signatures.

<l>https://docs.python.org/3/library/typing.html<>
@
@ type hinting



### Venv / Virtual Environment
Creates an isolated python environment for a program to run in.

Ships standard with Python 3. It contains it's own packages independent of the global python environment but it links back to the standard python installation when possible. The environment must be accessed through a custom shell started up by one of the script files. Does not support Python 2.

vs <c>virtualenv<>



### VirtualEnv
A 3rd party tool used to create isolated Python environments.

virtualenv creates a directory which contains all the necessary executables to use the packages that a Python project would need. It works by installing required python files and binaries in a directory (eg: env/), and then modifying the PATH environment variable to prefix it with a custom bin directory (eg: env/bin/).

Prefer <c>venv<>.



### Wheel
A packaging system used to distribute but not execute python files. It is preferred over egg files. Can be stored on PyPI servers.

vs: Egg



# Other SpeedSheets



### aiohttp SpeedSheet

The aiohttp library for making asynchronous http calls:

<l>/s/aiohttp<>
@
@ async http library, asynchronous, post, put, get, request, url



### requests SpeedSheet

The requests library for making http calls:

<l>/s/requests<>
@
@ http library, post, put, get, request, url



### Numpy SpeedSheet

A greate library for manipulating large amounts of data:

<l>/s/numpy<>
@
@ np.array, numpy.array, numpy,ndarray, np.ndarray, averages, means, statistics



# More Speedsheets?

This sheet covers core python only. But want to see more here? Or for other libraries? Please let us know.
@
@ delta, terminal, process, dataframe, frame
@ Anacond, Arrowm, BeautifulSoup, Bokeh, Cirq, Conda, Databases, Delorean, Django, Eli5, Fire, FlashText, Flask, Gensim, HTTP, Image, Images, Imaging, Keras, LightGBM, Luminoth, Mahotas, Matplotlib, MoviePy, Networkx, NLTK, Pandas, Pendulum, Picture, Pillow, Pixel, Poetry, PyGame, PyQt, PyPi, PyTorch, Requests, Scikit Learn, Scikit-Learn, SciPy, SqlAlchemy, TensorFlow, Theano, Tkinter, wxPython, ai, a.i., artifical intelligence, Zip